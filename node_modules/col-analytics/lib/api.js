/**
 * Copyright Â©2016. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var _ = require('lodash');
var config = require('config');
var Mixpanel = require('mixpanel');

// Variable that will keep track of the Mixpanel instance
var mixpanel = null;

/**
 * Initialse the Mixpanel analytics
 */
var init = function() {
  if (config.get('analytics.enabled')) {
    mixpanel = Mixpanel.init(config.get('analytics.apiKey'));
  }
}

/**
 * Store or update the profile for a user for analytical purposes
 *
 * @param  {User}           user            The user for which a profile should be stored or updated
 */
var identify = module.exports.identify = function(user) {
  if (mixpanel) {
    mixpanel.people.set(user.id, _.extend({
      '$name': user.canvas_full_name,
      '$created': user.created_at
    }, _.pick(user, [
      'course_id', 'canvas_user_id', 'canvas_course_role', 'canvas_enrollment_state',
      'canvas_image', 'points', 'share_points', 'last_activity', 'updated_at', 'is_admin'
    ])));
  }
};

/**
 * Track a new event
 *
 * @param  {User}           user            The user for which to track the event
 * @param  {String}         event           The unique identifier of the event to track
 * @param  {Object}         [options]       Additional options to store against the specified event
 */
var track = module.exports.track = function(user, event, options) {
  if (mixpanel) {
    mixpanel.track(event, _.extend({'distinct_id': user.id}, options));
  }
};

/**
 * Get the tracking properties for an asset
 *
 * @param  {Asset}          asset           The asset for which to get the tracking properties
 * @return {Object}                         The tracking properties for the provided asset
 */
var getAssetProperties = module.exports.getAssetProperties = function(asset) {
  return {
    'asset_id': asset.id,
    'asset_type': asset.type,
    'asset_url': asset.url,
    'asset_title': asset.title,
    'asset_canvas_assignment_id': asset.canvas_assignment_id,
    'asset_description': asset.description,
    'asset_description_length': (asset.description ? asset.description.length : 0),
    'asset_description_hashtag': (asset.description ? asset.description.indexOf('#') !== -1 : false),
    'asset_thumbnail_url': asset.thumbnail_url,
    'asset_image_url': asset.image_url,
    'asset_embed_id': asset.embed_id,
    'asset_mime': asset.mime,
    'asset_source': asset.source,
    'asset_likes': asset.likes,
    'asset_dislikes': asset.dislikes,
    'asset_views': asset.views,
    'asset_liked': asset.liked,
    'asset_comment_count': asset.comment_count,
    'asset_created_at': asset.created_at,
    'asset_updated_at': asset.updated_at,
    'asset_categories': _.map(asset.categories, 'id'),
    'asset_categories_count': asset.categories.length,
    'asset_users': _.map(asset.users, 'id'),
    'asset_users_count': asset.users.length
  };
};

/**
 * Get the tracking properties for an asset comment
 *
 * @param  {Comment}        comment         The comment for which to get the tracking properties
 * @param  {Asset}          asset           The asset to which the comment belongs
 * @return {Object}                         The tracking properties for the provided comment and asset
 */
var getAssetCommentProperties = module.exports.getAssetCommentProperties = function(comment, asset) {
  // Comment properties
  var properties = {
    'comment_id': comment.id,
    'comment_body': comment.body,
    'comment_body_length': comment.body.length,
    'comment_created_at': comment.created_at,
    'comment_updated_at': comment.updated_at,
    'comment_parent_id': comment.parent_id,
    'comment_is_reply': comment.parent_id ? true : false
  };
  // Add the asset properties
  _.extend(properties, getAssetProperties(asset));
  return properties;
};

/**
 * Get the tracking properties for a whiteboard
 *
 * @param  {Whiteboard}     whiteboard      The whiteboard for which to get the tracking properties
 * @return {Object}                         The tracking properties for the provided whiteboard
 */
var getWhiteboardProperties = module.exports.getWhiteboardProperties = function(whiteboard) {
  // Base whiteboard properties
  var properties = {
    'whiteboard_id': whiteboard.id,
    'whiteboard_title': whiteboard.title,
    'whiteboard_thumbnail_url': whiteboard.thumbnail_url,
    'whiteboard_image_url': whiteboard.image_url,
    'whiteboard_created_at': whiteboard.created_at,
    'whiteboard_updated_at': whiteboard.updated_at
  };
  // The number of members in the whiteboard
  if (whiteboard.members) {
    properties.whiteboard_members = whiteboard.members.length;
  }
  // The number of elements in the whiteboard
  if (whiteboard.whiteboard_elements) {
    properties.whiteboard_elements = whiteboard.whiteboard_elements.length;
  } else if (whiteboard.whiteboardElements) {
    properties.whiteboard_elements = whiteboard.whiteboardElements.length;
  }
  // The number of online users in the whiteboard
  if (whiteboard.onlineUsers) {
    properties.whiteboard_online = whiteboard.onlineUsers.length;
  }
  return properties;
};

/**
 * Get the tracking properties for a whiteboard element
 *
 * @param  {Element}        element         The whiteboard element for which to get the tracking properties
 * @param  {Whiteboard}     whiteboard      The whiteboard to which the element belongs
 * @param  {Number}         total           The total number of elements in the current batch of element updates
 * @return {Object}                         The tracking properties for the provided whiteboard element and whiteboard
 */
var getWhiteboardElementProperties = module.exports.getWhiteboardElementProperties = function(element, whiteboard, total) {
  // Element properties
  var properties = {
    'whiteboard_element_id': element.uid,
    'whiteboard_element_type': element.type,
    'whiteboard_element_asset_id': element.assetId,
    'whiteboard_element_index': element.index,
    'whiteboard_element_left': element.left,
    'whiteboard_element_top': element.top,
    'whiteboard_element_scale_x': element.scaleX,
    'whiteboard_element_scale_y': element.scaleY,
    'whiteboard_element_fill': element.fill,
    'whiteboard_element_stroke': element.stroke,
    'whiteboard_element_stroke_width': element.strokeWidth,
    'whiteboard_element_angle': element.angle,
    'whiteboard_element_background_color': element.backgroundColor,
    'whiteboard_element_text': element.text,
    'whiteboard_batch_total': total
  };
  // Add the asset properties
  _.extend(properties, getWhiteboardProperties(whiteboard));
  return properties;
};

init();
