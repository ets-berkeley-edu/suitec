/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var async = require('async');
var config = require('config');
var cookie = require('cookie');
var cookieParser = require('cookie-parser');
var Embdr = require('embdr');
var fs = require('fs');
var Joi = require('joi');
var moment = require('moment-timezone');
var os = require('os');
var path = require('path');
var Sequelize = require('sequelize');
var spawn = require('child_process').spawn;
var util = require('util');

var AssetsAPI = require('col-assets');
var CategoriesAPI = require('col-categories');
var Collabosphere = require('col-core');
var CollabosphereConstants = require('col-core/lib/constants');
var CollabosphereUtil = require('col-core/lib/util');
var DB = require('col-core/lib/db');
var log = require('col-core/lib/logger')('col-whiteboards');
var UserConstants = require('col-users/lib/constants');
var UsersAPI = require('col-users');

// The interval (in seconds) when thumbnails should be generated
var THUMBNAIL_INTERVAL = 30;

// Keep track of the whiteboards for which a new thumbnail should be generated. The actual thumbnail
// generation happens every THUMBNAIL_INTERVAL seconds
var scheduledThumbnails = {};

/**
 * Get a full whiteboard profile, including the list of members, online members and
 * whiteboard elements.
 *
 * Each member will have an extra `online` property that indicates whether the user is currently
 * editing the whiteboard. The whiteboard elements will be returned in their serialized (JSON) form
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         id                              The id of the whiteboard
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Whiteboard}     callback.whiteboard             The requested whiteboard
 */
var getWhiteboardProfile = module.exports.getWhiteboardProfile = function(ctx, id, callback) {
  getFullWhiteboard(ctx, id, function(err, whiteboard) {
    if (err) {
      return callback(err);
    }

    // Serialize the whiteboard
    var data = whiteboard.toJSON();

    // Return the elements in a format that can be understood by Fabric.js
    data.whiteboard_elements = _.pluck(whiteboard.whiteboardElements, ['element']);

    // Add the serialized members including an `online` indicator
    data.members = _.map(whiteboard.members, function(member) {
      member = member.toJSON();
      member.online = _.findWhere(whiteboard.onlineUsers, {'user_id': member.id}) ? true : false;
      return member;
    });

    return callback(null, data);
  });
};

/**
 * Get a whiteboard, including the list of members, online members and whiteboard
 * elements
 *
 * The online users, members and whiteboard elements are all original Sequelize instances
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         id                              The id of the whiteboard
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Whiteboard}     callback.whiteboard             The requested whiteboard
 * @api private
 */
var getFullWhiteboard = function(ctx, id, callback) {
  // Get the base whiteboard
  getBasicWhiteboard(ctx, id, function(err, whiteboard) {
    if (err) {
      return callback(err);
    }

    // Get the members of the whiteboard
    whiteboard.getUsers({'attributes': UserConstants.BASIC_USER_FIELDS}).complete(function(err, members) {
      if (err) {
        log.error({'err': err, 'whiteboard': id}, 'Failed to get the whiteboard members');
        return callback({'code': 500, 'msg': err.message});
      }
      whiteboard.members = members;

      // Get the whiteboard elements
      whiteboard.getWhiteboardElements().complete(function(err, whiteboardElements) {
        if (err) {
          log.error({'err': err, 'whiteboard': id}, 'Failed to get the whiteboard elements');
          return callback({'code': 500, 'msg': err.message});
        }
        whiteboard.whiteboardElements = whiteboardElements;

        // Get the online users in the whiteboard
        getOnlineUsers(id, function(err, onlineUsers) {
          if (err) {
            return callback(err);
          }
          whiteboard.onlineUsers = onlineUsers;

          return callback(null, whiteboard);
        });
      });
    });
  });
};

/**
 * Get a basic whiteboard profile
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         id                              The id of the whiteboard
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Whiteboard}     callback.whiteboard             The requested whiteboard
 * @api private
 */
var getBasicWhiteboard = function(ctx, id, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'id': id
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the whiteboard from the DB
  var options = {
    'where': {
      'id': id,
      'course_id': ctx.course.id
    }
  };

  // Verify whether the current user has access to the whiteboard. Course administrators
  // have access to all whiteboards in the course
  if (!ctx.user.is_admin) {
    options.include = {
      'model': DB.User,
      'required': true,
      'where': {
        'id': ctx.user.id
      }
    };
  }

  DB.Whiteboard.find(options).complete(function(err, whiteboard) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to get a whiteboard');
      return callback({'code': 500, 'msg': err.message});
    } else if (!whiteboard) {
      log.debug({'err': err, 'id': id}, 'A whiteboard with the specified id could not be found');
      return callback({'code': 404, 'msg': 'A whiteboard with the specified id could not be found'});
    }

    return callback(null, whiteboard);
  });
};

/**
 * Get the whiteboards to which the current user has access in the current course
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}         [offset]                        The number to start paging from. Defaults to 0
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Object}         callback.whiteboards            The retrieved whiteboards
 * @param  {Number}         callback.whiteboards.total      The total number of whiteboards to which the current user has access in the current course
 * @param  {Whiteboard[]}   callback.whiteboards.results    The paged whiteboard to which the current user has access in the current course
 */
var getWhiteboards = module.exports.getWhiteboards = function(ctx, limit, offset, callback) {
  // Default some parameters
  limit = CollabosphereUtil.getNumberParam(limit, 10, 1, 25);
  offset = CollabosphereUtil.getNumberParam(offset, 0, 0);

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'limit': Joi.number().required(),
    'offset': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'limit': limit,
    'offset': offset
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the whiteboards from the DB
  var options = {
    'where': {
      'course_id': ctx.course.id
    },
    'include': [
      {
        'model': DB.WhiteboardSession,
        'attributes': ['user_id']
      }
    ],
    'order': [['id', 'DESC']],
    'limit': limit,
    'offset': offset
  };

  // If the current user is not a course administrator, only include the whiteboards
  // that have been shared with the current user
  if (!ctx.user.is_admin) {
    options.include.push({
      'model': DB.User,
      'attributes': ['id'],
      'required': true,
      'where': {
        'id': ctx.user.id
      }
    });
  }

  DB.Whiteboard.findAndCountAll(options).complete(function(err, result) {
    if (err) {
      log.error({'err': err, 'course': ctx.course, 'user': ctx.user}, 'Failed to get the whiteboards to which the current user has access in the current course');
      return callback({'code': 500, 'msg': err.message});
    }

    // Add the number of online users for each whiteboard. Note that a single user
    // can have multiple sessions in the same whiteboard. This only counts as a single
    // online user
    result.rows = _.map(result.rows, function(row) {
      row = row.toJSON();
      row.online_count = _.chain(row.whiteboard_sessions).pluck('user_id').uniq().value().length;
      // Remove the session details and current user information from the response
      delete row.whiteboard_sessions;
      delete row.users;
      return row;
    });

    return callback(null, {
      'total': result.count,
      'results': result.rows
    });
  });
};

/**
 * Create a new whiteboard
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {String}         title                           The title of the whiteboard
 * @param  {Number[]}       [members]                       The ids of the users that should be added to the whiteboard as members. The current user will automatically be added as a member
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Whiteboard}     callback.whiteboard             The created whiteboard
 */
var createWhiteboard = module.exports.createWhiteboard = function(ctx, title, members, callback) {
  // Default some parameters
  members = members || [];

  // Add the current user as a member
  members.push(ctx.user.id);

  // Ensure members are only added once
  members = _.uniq(members);

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'title': Joi.string().max(255).required(),
    'members': Joi.array().unique().items(Joi.number()).required()
  });

  var validationResult = Joi.validate({
    'title': title,
    'members': members
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Ensure that all provided members exist
  UsersAPI.getUsers(ctx, members, function(err, users) {
    if (err) {
      return callback(err);
    }

    // Create the whiteboard in the DB
    var whiteboard = {
      'course_id': ctx.course.id,
      'title': title
    };

    DB.Whiteboard.create(whiteboard).complete(function(err, whiteboard) {
      if (err) {
        log.error({'err': err}, 'Failed to create a new whiteboard');
        return callback({'code': 500, 'msg': err.message});
      }

      // Add the members to the whiteboard
      whiteboard.setUsers(members).complete(function(err) {
        if (err) {
          log.error({'err': err}, 'Failed to add members to a new whiteboard');
          return callback({'code': 500, 'msg': err.message});
        }

        // Retrieve the created whiteboard, including the members
        return getWhiteboardProfile(ctx, whiteboard.id, callback);
      });
    });
  });
};

/**
 * Edit a whiteboard
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         id                              The id of the whiteboard that is being edited
 * @param  {String}         title                           The updated title of the whiteboard
 * @param  {Number[]}       members                         The ids of the users that should be a member of the whiteboard
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Whiteboard}     callback.asset                  The updated whiteboard
 */
var editWhiteboard = module.exports.editWhiteboard = function(ctx, id, title, members, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required(),
    'title': Joi.string().max(255).required(),
    'members': Joi.array().unique().items(Joi.number()).min(1).required()
  });

  var validationResult = Joi.validate({
    'id': id,
    'title': title,
    'members': members
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Ensure that the provided whiteboard exists and the user is allowed to access it
  getBasicWhiteboard(ctx, id, function(err, whiteboard) {
    if (err) {
      return callback(err);
    }

    // Ensure that all provided members exist
    UsersAPI.getUsers(ctx, members, function(err, users) {
      if (err) {
        return callback(err);
      }

      // Update the whiteboard in the DB
      var update = {
        'title': title
      };

      whiteboard.updateAttributes(update).complete(function(err, whiteboard) {
        if (err) {
          log.error({'err': err, 'id': id}, 'Failed to update a whiteboard');
          return callback({'code': 500, 'msg': err.message});
        }

        // Update the members of the whiteboard
        whiteboard.setUsers(members).complete(function(err) {
          if (err) {
            log.error({'err': err}, 'Failed to update the members of a whiteboard');
            return callback({'code': 500, 'msg': err.message});
          }

          // Retrieve the updated whiteboard, including the members and elements
          return getWhiteboardProfile(ctx, whiteboard.id, callback);
        });
      });
    });
  });
};

/**
 * Get the list of online users for a whiteboard
 *
 * @param  {Number}         whiteboardId                    The id of the whiteboard for which to get the online users
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {User[]}         callback.users                  The online users in the whiteboard
 * @api private
 */
var getOnlineUsers = function(whiteboardId, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'whiteboardId': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'whiteboardId': whiteboardId
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the online users from the DB
  var options = {
    'where': {
      'whiteboard_id': whiteboardId
    },
    'attributes': ['user_id'],
    'include': [{
      'model': DB.User,
      'attributes': UserConstants.BASIC_USER_FIELDS
    }]
  };

  DB.WhiteboardSession.findAll(options).complete(function(err, onlineUsers) {
    if (err) {
      log.error({'err': err, 'whiteboard': whiteboardId}, 'Failed to get the online users for a whiteboard');
      return callback({'code': 500, 'msg': err.message});
    }

    // Filter out the duplicate records for those users that have multiple
    // sessions in the same whiteboard
    onlineUsers = _.unique(onlineUsers, function(onlineUser) {
      return onlineUser.user_id;
    });

    return callback(null, onlineUsers);
  });
};

/**
 * Send the list of all online users in a whiteboard to the users in the whiteboard
 *
 * @param  {Number}         whiteboardId                    The id of the whiteboard for which to send an updated list of online users
 * @api private
 */
var notifyOnlineUsers = function(whiteboardId) {
  getOnlineUsers(whiteboardId, function(err, onlineUsers) {
    if (err) {
      return log.error({'err': err}, 'Failed to send the updated list of online users to the users in the whiteboard');
    }

    Collabosphere.appServer.io.sockets.in(whiteboardId).emit('online', onlineUsers);
  });
};

/**
 * Create a new whiteboard session for a specific websocket connection
 *
 * @param  {Socket}         socket                          The socket over which the user is connected
 * @param  {Context}        socket.ctx                      Standard context containing the current user and the current course
 * @param  {Function}       [callback]                      Standard callback function
 * @param  {Object}         [callback.err]                  An error that occurred, if any
 * @api private
 */
var createWhiteboardSession = function(socket, callback) {
  callback = callback || function(err) {};

  var validationSchema = Joi.object().keys({
    'socketId': Joi.string().required(),
    'whiteboardId': Joi.number().required(),
    'userId': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'socketId': socket.id,
    'whiteboardId': socket.whiteboard.id,
    'userId': socket.ctx.user.id
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Create the whiteboard session in the DB
  var whiteboardSession = {
    'socket_id': socket.id,
    'whiteboard_id': socket.whiteboard.id,
    'user_id': socket.ctx.user.id
  };

  DB.WhiteboardSession.upsert(whiteboardSession).complete(function(err) {
    if (err) {
      log.error({'type': err}, 'Failed to create a whiteboard session');
      return callback({'code': 500, 'msg': err.message});
    }

    // Send the updated list of online users to the users in the whiteboard
    notifyOnlineUsers(socket.whiteboard.id);

    return callback();
  });
};

/**
 * Delete a whiteboard session for a specific websocket connection
 *
 * @param  {String}         socketId                        The unique socket id of the whiteboard session that is being deleted
 * @param  {Function}       [callback]                      Standard callback function
 * @param  {Object}         [callback.err]                  An error that occurred, if any
 * @api private
 */
var deleteWhiteboardSession = function(socketId, callback) {
  callback = callback || function() {};

  var validationSchema = Joi.object().keys({
    'socketId': Joi.string().required()
  });

  var validationResult = Joi.validate({
    'socketId': socketId
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the whiteboard session that is being deleted
  var options = {
    'where': {
      'socket_id': socketId
    }
  };

  DB.WhiteboardSession.find(options).complete(function(err, whiteboardSession) {
    if (err) {
      log.error({'err': err, 'socketId': socketId}, 'Failed to retrieve the whiteboard session to delete');
      return callback({'code': 500, 'msg': err.message});
    } else if (!whiteboardSession) {
      log.debug({'err': err, 'socketId': socketId}, 'The whiteboard session that is being deleted could not be found');
      return callback({'code': 404, 'msg': 'The whiteboard session that is being deleted could not be found'});
    }

    // Delete the whiteboard session from the DB
    whiteboardSession.destroy().complete(function(err) {
      if (err) {
        log.error({'err': err, 'socketId': socketId}, 'Failed to delete a whiteboard session');
        return callback({'code': 500, 'msg': err.message});
      }

      // Send the updated list of online users to the users in the whiteboard
      notifyOnlineUsers(whiteboardSession.whiteboard_id);

      return callback();
    });
  });
};

/**
 * Delete all whiteboard sessions. This is necessary when the server restarts, as all
 * websockets will have disconnect without the disconnect logic being executed
 *
 * @param  {Function}       [callback]                      Standard callback function
 * @param  {Object}         [callback.err]                  An error that occurred, if any
 * @api private
 */
var deleteWhiteboardSessions = function(callback) {
  callback = callback || function() {};

  var options = {
    'truncate': true
  };

  DB.WhiteboardSession.destroy(options).complete(function(err) {
    if (err) {
      log.error({'err': err}, 'Failed to delete all whiteboard session');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback();
  });
};

// Delete all whiteboard sessions when the server starts
deleteWhiteboardSessions();

/* WHITEBOARD ELEMENTS */

/**
 * Store the new elements that were added to the whiteboard canvas and inform
 * the online users in the whiteboard about the new elements
 *
 * @param  {Socket}         socket                          The socket on which the new whiteboard elements were sent
 * @param  {Object}         elements                        The deserialized whiteboard elements that were added
 * @param  {Function}       [callback]                      Standard callback function
 * @param  {Object}         [callback.err]                  An error that occurred, if any
 * @api private
 */
var whiteboardAddActivity = function(socket, elements, callback) {
  callback = callback || function() {};

  // Store the new elements
  upsertWhiteboardElements(socket.whiteboard.id, elements, function() {
    // Notify all online users in the whiteboard that new whiteboard elements were added.
    // This will not send a notification over the socket on which the new elements were sent
    socket.broadcast.to(socket.whiteboard.id).emit('addActivity', elements);
    return callback();
  });
};

/**
 * Store updated whiteboard canvas elements and inform the online users in the
 * whiteboard about the element updates
 *
 * @param  {Socket}         socket                          The socket on which the whiteboard element updates were sent
 * @param  {Object[]}       elements                        The deserialized updated whiteboard elements
 * @param  {Function}       [callback]                      Standard callback function
 * @param  {Object}         [callback.err]                  An error that occurred, if any
 * @api private
 */
var whiteboardUpdateActivity = function(socket, elements, callback) {
  callback = callback || function() {};

  // Store the updated elements
  upsertWhiteboardElements(socket.whiteboard.id, elements, function() {
    // Notify all online users in the whiteboard that whiteboard elements were updated.
    // This will not send a notification over the socket on which the element updates were sent
    socket.broadcast.to(socket.whiteboard.id).emit('updateActivity', elements);
    return callback();
  });
};

/**
 * Create one or multiple new whiteboard canvas elements. Elements that already exist will be updated
 *
 * @param  {Number}         whiteboardId                    The id of the whiteboard in which the element creation or update took place
 * @param  {Object[]}       elements                        The deserialized created or updated whiteboard elements
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 */
var upsertWhiteboardElements = function(whiteboardId, elements, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'whiteboardId': Joi.number().required(),
    'elements': Joi.array().items(Joi.object()).required()
  });

  var validationResult = Joi.validate({
    'whiteboardId': whiteboardId,
    'elements': elements
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Create or update each of the provided whiteboard elements
  async.eachSeries(elements, function(element, done) {
    var whiteboardElement = {
      'whiteboard_id': whiteboardId,
      'uid': element.uid,
      'element': element,
      'asset_id': element.assetId
    };

    DB.WhiteboardElement.upsert(whiteboardElement).complete(function(err) {
      if (err) {
        log.error({'type': err}, 'Failed to create or update a whiteboard element');
        return done({'code': 500, 'msg': err.message});
      }

      return done();
    });
  }, function() {
    // Schedule a new thumbnail for this whiteboard
    scheduleThumbnail(whiteboardId);
    return callback();
  });
};

/**
 * Delete the whiteboard canvas elements that were removed and inform
 * the online users in the whiteboard about the removed elements
 *
 * @param  {Socket}         socket                          The socket on which the whiteboard element removals were sent
 * @param  {Object[]}       elements                        The deserialized removed whiteboard elements
 * @param  {Function}       [callback]                      Standard callback function
 * @param  {Object}         [callback.err]                  An error that occurred, if any
 * @api private
 */
var whiteboardDeleteActivity = function(socket, elements, callback) {
  callback = callback || function() {};

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'whiteboardId': Joi.number().required(),
    'elements': Joi.array().items(Joi.object()).required()
  });

  var validationResult = Joi.validate({
    'whiteboardId': socket.whiteboard.id,
    'elements': elements
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Delete the elements in the DB
  var options = {
    'where': {
      'whiteboard_id': socket.whiteboard.id,
      'uid': _.pluck(elements, 'uid')
    }
  };

  DB.WhiteboardElement.destroy(options).complete(function(err) {
    if (err) {
      log.error({'err': err, 'whiteboardId': socket.whiteboard.id, 'elements': options.uid}, 'Failed to delete whiteboard elements');
      return done({'code': 500, 'msg': err.message});
    }

    // Notify all online users in the whiteboard that whiteboard elements were deleted.
    // This will not send a notification over the socket on which the element removals were sent
    socket.broadcast.to(socket.whiteboard.id).emit('deleteActivity', elements);

    // Schedule a new thumbnail for this whiteboard
    scheduleThumbnail(socket.whiteboard.id);
  });
};

/**
 * Schedule a thumbnail for a whiteboard
 *
 * @param  {Number}   whiteboardId    The id of the whiteboard to schedule a new thumbnail for
 */
var scheduleThumbnail = function(whiteboardId) {
  log.debug({
    'whiteboard': whiteboardId
  }, 'Scheduling thumbnail generation for a whiteboard');
  scheduledThumbnails[whiteboardId] = true;
};

/**
 * When a preview image has been generated for an asset, update all whiteboard elements
 * that use this asset to point to the generated preview
 *
 * @param  {Number}   assetId         The id of the asset for which a preview image has been generated
 * @param  {Object}   image           The generated preview image
 */
var updateAssetPreview = module.exports.updateAssetPreview = function(assetId, image) {
  // Get all whiteboard elements in which the asset is used
  var options = {
    'where': {
      'asset_id': assetId
    }
  };

  DB.WhiteboardElement.findAll(options).complete(function(err, whiteboardElements) {
    if (err) {
      log.error({'err': err, 'assetId': assetId}, 'Failed to get the whiteboard elements for an asset');
      return callback({'code': 500, 'msg': err.message});
    }

    _.each(whiteboardElements, function(whiteboardElement) {
      // Calculate the scale factor to retain the image dimensions
      var ratio = whiteboardElement.element.width * whiteboardElement.element.scaleX / image.metadata.width;
      whiteboardElement.element.scaleX = ratio;
      whiteboardElement.element.scaleY = ratio;
      whiteboardElement.element.src = image.url;
      // Update the whiteboard element and send the update out to all users
      // in the whiteboard
      upsertWhiteboardElements(whiteboardElement.whiteboard_id, [whiteboardElement.element], function() {
        Collabosphere.appServer.io.sockets.in(whiteboardElement.whiteboard_id).emit('updateActivity', [whiteboardElement.element]);
      });
    });
  });
};

/* WEB SOCKETS */

/**
 * When a user connects over a websocket, add them to the appropriate room based on the
 * whiteboard from which they connected. A record indicating that the user is online in
 * the whiteboard will also be added
 */
Collabosphere.appServer.io.on('connection', function(socket) {
  log.info({'socket': socket.id}, 'Initiating new websocket connection');

  // Extract the API domain, course ID and whiteboard ID from the handshake query
  var apiDomain = socket.handshake.query.api_domain;
  var courseId = socket.handshake.query.course_id;
  var whiteboardId = socket.handshake.query.whiteboard_id;

  if (!socket.handshake.headers.cookie) {
    log.error({
      'socket': socket.id,
      'whiteboardId': whiteboardId
    }, 'A user tried to connect on a socket without a cookie header');
    return socket.disconnect();
  }

  // Extract the user id from the session cookie that was sent along in the socket handshake
  var cookieName = encodeURIComponent(apiDomain + '_' + courseId);
  var sessionCookie = cookie.parse(socket.handshake.headers.cookie)[cookieName];
  if (!sessionCookie) {
    log.error({
      'socket': socket.id,
      'whiteboardId': whiteboardId
    }, 'A user tried to connect on a socket without a session cookie');
    return socket.disconnect();
  }
  var userId = cookieParser.signedCookie(sessionCookie, config.get('cookie.secret'));
  if (!userId) {
    log.error({
      'socket': socket.id,
      'whiteboardId': whiteboardId
    }, 'A user tried to connect on a socket with an empty session cookie');
    return socket.disconnect();
  }

  // Verify that the user exists
  UsersAPI.getUser(userId, function(err, user) {
    if (err) {
      log.error({'socket': socket.id, 'userId': userId, 'whiteboardId': whiteboardId}, 'Failed to verify the user for a websocket connection');
      return socket.disconnect();
    }

    // Store a mocked request context on the socket
    socket.ctx = {
      'user': user,
      'course': user.course
    };

    // Verify that the whiteboard exists and the user has access to it
    getBasicWhiteboard(socket.ctx, whiteboardId, function(err, whiteboard) {
      if (err) {
        log.error({'socket': socket.id, 'whiteboardId': whiteboardId}, 'Failed to verify websocket connection');
        return socket.disconnect();
      }

      // Store the whiteboard id on the socket
      socket.whiteboard = whiteboard;

      // Join the room that corresponds to the whiteboard to which the user connected
      socket.join(whiteboardId);

      // Create a whiteboard session for the current socket
      createWhiteboardSession(socket);

      /**
       * Create a new chat message via the websocket
       */
      socket.on('chat', function(body) {
        createChatMessage(socket, body);
      });

      /**
       * New elements have been added to the whiteboard
       */
      socket.on('addActivity', function(elements) {
        log.debug({'socket': socket.id, 'elements': _.pluck(elements, 'uid')}, 'New elements were added to the whiteboard');
        whiteboardAddActivity(socket, elements);
      });

      /**
       * Element on the whiteboard have been updated
       */
      socket.on('updateActivity', function(elements) {
        log.debug({'socket': socket.id, 'elements': _.pluck(elements, 'uid')}, 'Elements on the whiteboard were updated');
        whiteboardUpdateActivity(socket, elements);
      });

      /**
       * Whiteboard canvas elements were deleted
       */
      socket.on('deleteActivity', function(elements) {
        log.debug({'socket': socket.id, 'elements': _.pluck(elements, 'uid')}, 'Elements on the whiteboard were deleted');
        whiteboardDeleteActivity(socket, elements);
      });

      /**
       * When a user disconnected, they are removed from the room and their online record
       * is deleted as well
       */
      socket.on('disconnect', function() {
        log.debug({'socket': socket.id}, 'Websocket connection was disconnected');

        // Leave the room that corresponds to the whiteboard to which the user was in
        socket.leave(whiteboardId);
        // Remove the whiteboard session for the current socket
        deleteWhiteboardSession(socket.id);
      });
    });
  });
});

/* CHAT */

/**
 * Get a chat message.
 * Note that this is a private method that doesn't do any validation
 *
 * @param  {Number}         id                              The id of the chat message to retrieve
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Comment}        callback.chatMessage            The created chat message
 * @param  {User}           callback.chatMessage.user       The user that created the chat message
 * @api private
 */
var getChatMessage = function(id, callback) {
  var options = {
    'where': {
      'id': id
    },
    'include': [{
      'model': DB.User,
      'attributes': UserConstants.BASIC_USER_FIELDS
    }]
  };
  DB.Chat.find(options).complete(function(err, chatMessage) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to retrieve the chat message');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, chatMessage);
  });
};

/**
 * Create a new chat message on a whiteboard. Note that the access to the whiteboard has already been
 * verified when the websocket connection was initiated
 *
 * @param  {Socket}         socket                          The socket on which the chat message has been sent
 * @param  {Context}        socket.ctx                      Standard context containing the current user and the current course
 * @param  {String}         body                            The body of the chat message
 * @param  {Function}       [callback]                      Standard callback function
 * @param  {Object}         [callback.err]                  An error that occurred, if any
 * @param  {Comment}        [callback.chatMessage]          The created chat message
 * @param  {User}           [callback.chatMessage.user]     The user that created the chat message
 * @api private
 */
var createChatMessage = function(socket, body, callback) {
  callback = callback || function() {};

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'whiteboardId': Joi.number().required(),
    'userId': Joi.number().required(),
    'body': Joi.string().required()
  });

  var validationResult = Joi.validate({
    'whiteboardId': socket.whiteboard.id,
    'userId': socket.ctx.user.id,
    'body': body
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Create the chat message in the database
  var chatMessage = {
    'whiteboard_id': socket.whiteboard.id,
    'user_id': socket.ctx.user.id,
    'body': body
  };

  DB.Chat.create(chatMessage).complete(function(err, chatMessage) {
    if (err) {
      log.error({'err': err}, 'Failed to create a new chat message');
      return callback({'code': 500, 'msg': err.message});
    }

    // Retrieve the created chat message, including the associated user
    getChatMessage(chatMessage.id, function(err, chatMessage) {
      if (err) {
        return callback(err);
      }

      // Send the new chat message to all online users in the whiteboard, including
      // the user that has sent the chat message
      Collabosphere.appServer.io.sockets.in(socket.whiteboard.id).emit('chat', chatMessage);

      return callback(null, chatMessage);
    });
  });
};

/**
 * Get the most recent chat messages for a whiteboard
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         whiteboardId                    The id of the whiteboard for which to get the most chat messages
 * @param  {Number}         [before]                        The id of the message that happened just after the desired messages. The newest messages will be retrieved when no before id is specified
 * @param  {Number}         [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Chat[]}         callback.chatMessages           The most recent chat messages
 */
var getChatMessages = module.exports.getChatMessages = function(ctx, whiteboardId, before, limit, callback) {
  before = CollabosphereUtil.getNumberParam(before);
  limit = CollabosphereUtil.getNumberParam(limit, 10, 1, 25);

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'whiteboardId': Joi.number().required(),
    'before': Joi.number().optional(),
    'limit': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'whiteboardId': whiteboardId,
    'before': before,
    'limit': limit
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the whiteboard for which to retrieve the recent chat messages
  getBasicWhiteboard(ctx, whiteboardId, function(err, whiteboard) {
    if (err) {
      return callback(err);
    }

    // Get the chat messages from the DB
    var options = {
      'where': {
        'whiteboard_id': whiteboardId
      },
      'order': [['created_at', 'DESC']],
      'limit': limit,
      'include': [
        {
          'model': DB.User,
          'attributes': UserConstants.BASIC_USER_FIELDS
        }
      ]
    };

    if (before) {
      options.where.id = {'$lt': before};
    }

    DB.Chat.findAll(options).complete(function(err, chatMessages) {
      if (err) {
        log.error({'err': err, 'whiteboard': whiteboardId}, 'Failed to get the recent chat messages for a whiteboard');
        return callback({'code': 500, 'msg': err.message});
      }

      return callback(null, chatMessages);
    });
  });
};

/**
 * Export a whiteboard to an asset in the asset library
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         id                              The id of the whiteboard
 * @param  {String}         [title]                         The title of the exported whiteboard. Defaults to the whiteboard's title
 * @param  {Object}         [opts]                          A set of optional parameters
 * @param  {Number[]}       [opts.categories]               The ids of the categories to which the whiteboard should be associated
 * @param  {String}         [opts.description]              The description of the whiteboard
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Asset}          callback.asset                  The exported asset
 */
var exportWhiteboardToAsset = module.exports.exportWhiteboardToAsset = function(ctx, id, title, opts, callback) {
  // Default the optional values
  opts = opts || {};
  opts.categories = opts.categories || [];

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required(),
    'title': Joi.string().max(255).optional(),
    'opts': Joi.object().keys({
      'categories': Joi.array().unique().items(Joi.number()).optional(),
      'description': Joi.string().allow('').optional()
    })
  });

  var validationResult = Joi.validate({
    'id': id,
    'title': title,
    'opts': opts
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the whiteboard including its members and elements
  getFullWhiteboard(ctx, id, function(err, whiteboard) {
    if (err) {
      return callback(err);
    } else if (_.isEmpty(whiteboard.whiteboardElements)) {
      return callback({'code': 400, 'msg': 'An empty board cannot be exported'});
    } else if (!title && !whiteboard.title) {
      return callback({'code': 400, 'msg': '"title" is required'});
    }

    title = title || whiteboard.title;

    // Ensure that all provided categories exist
    CategoriesAPI.getCategoriesById(ctx, opts.categories, function(err, categories) {
      if (err) {
        return callback(err);
      }

      AssetsAPI.createWhiteboard(ctx, whiteboard, title, opts, function(err, asset) {
        if (err) {
          return callback(err);
        }

        // Pass the asset to the caller
        callback(null, asset);

        // Asynchronously create a thumbnail for the exported whiteboard asset. If the Embdr integration
        // has not been enabled, we can't generate a thumbnail and simply return
        if (!config.get('embdr.enabled')) {
          return;
        }
        generateThumbnail(whiteboard, function(err, whiteboard) {
          if (err) {
            return log.error({'err': err}, 'Could not generate a thumbnail for an exported whiteboard');
          }
          log.debug({'whiteboard': whiteboard.id}, 'Generated a thumbnail for an exported whiteboard');

          // Unfortunately we need to get a new asset as the one returned by `createWhiteboard` is a
          // serialized Asset instance
          AssetsAPI.getAsset(ctx, asset.id, {'incrementViews': false}, function(err, asset) {
            if (err) {
              return log.error({'err': err}, 'Could not retrieve a whiteboard asset so its thumbnail could be updated');
            }

            // Update the exported whiteboard asset's thumbnail
            var update = {
              'imageUrl': whiteboard.image_url,
              'thumbnailUrl': whiteboard.thumbnail_url
            };
            return AssetsAPI.updateAssetPreview(asset, update);
          });
        });
      });
    });
  });
};

/**
 * Export a whiteboard to a PNG image
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         id                              The id of the whiteboard
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Whiteboard}     callback.whiteboard             The whiteboard that is being exported
 * @param  {Buffer}         callback.data                   The PNG image
 */
var exportWhiteboardToPng = module.exports.exportWhiteboardToPng = function(ctx, id, callback) {
  // Get the whiteboard including its members and elements
  getFullWhiteboard(ctx, id, function(err, whiteboard) {
    if (err) {
      return callback(err);
    } else if (_.isEmpty(whiteboard.whiteboardElements)) {
      return callback({'code': 400, 'msg': 'An empty board cannot be exported'});
    }

    var start = Date.now();
    // Get an up-to-date PNG file for the whiteboard
    getWhiteboardAsPng(whiteboard, function(err, data) {
      if (err) {
        return callback(err);
      }

      return callback(err, whiteboard, data);
    });
  });
};

/**
 * Export the whiteboard to a PNG file on disk
 *
 * @param  {Whiteboard}     whiteboard                      The whiteboard to export
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {String}         callback.imagePath              The path on disk where the image is stored
 * @api private
 */
var getWhiteboardAsPngFile = function(whiteboard, callback) {
  // Get a PNG representation of the whiteboard
  getWhiteboardAsPng(whiteboard, function(err, data) {
    if (err) {
      return callback(err);
    }

    // Flush the PNG to disk
    var date = moment().tz('America/Los_Angeles').format('YYYY_MM_DD_HH_mm_ss');
    var filename = util.format('whiteboard-%d-%s.png', whiteboard.id, date);
    var imagePath = path.join(os.tmpdir(), filename);
    fs.writeFile(imagePath, data, {'encoding': 'binary'}, function(err) {
      if (err) {
        log.error({
          'err': err,
          'whiteboard': whiteboard.id
        }, 'Could not write the PNG representation of the board to disk');
        return callback({'code': 500, 'msg': 'The board could not be exported'});
      }

      return callback(null, imagePath);
    });
  });
};

/**
 * Get the whiteboard as a PNG image
 *
 * @param  {Whiteboard}     whiteboard            The whiteboard to get the PNG image for
 * @param  {Function}       callback              Standard callback function
 * @param  {Object}         callback.err          An error that occurred, if any
 * @param  {Buffer}         callback.data         The PNG image
 * @api private
 **/
var getWhiteboardAsPng = function(whiteboard, callback) {
  // Generating a PNG version of a whiteboard is a very CPU intensive process that can hold up the
  // Node.JS event loop. On top of that, fabric.js and its dependency node-canvas suffer from memory
  // leaks when importing images onto a Cavas. To avoid running out of memory or blocking the event loop,
  // a PNG version of a whiteboard is generated in a child process
  var childProcess = null;
  try {
    childProcess = spawn('node', ['../data/whiteboardToPng.js'], {
      'cwd': __dirname,
      'env': process.env
    });
  } catch (err) {
    log.error({
      'err': err,
      'whiteboard': whiteboard.id
    }, 'Could not spawn the whiteboardToPng child process');
    return callback({'code': 500, 'msg': 'Failed to convert the whiteboard to PNG'});
  }

  // Feed the process the whiteboard elements
  var elements = _.pluck(whiteboard.whiteboardElements, 'element');
  elements = JSON.stringify(elements);
  childProcess.stdin.setEncoding = 'utf-8';
  childProcess.stdin.write(elements);
  childProcess.stdin.write('\n');

  // Buffer the PNG stream in memory
  var pngChunks = [];
  childProcess.stdout.on('data', function(chunk) {
    pngChunks.push(chunk);
  });

  // Log the error message the child process generates
  childProcess.stderr.on('data', function(data) {
    log.error({
        'data': data.toString('utf-8'),
        'whiteboard': whiteboard.id
      }, 'Error output when converting a whiteboard to PNG');
  });

  // Once the PNG has been generated (or the script fails), return to the caller
  childProcess.on('close', function(code) {
    if (code !== 0) {
      log.error({
        'code': code,
        'whiteboard': whiteboard.id
      }, 'The whiteboardToPng script exited with an unexpected error code');
      return callback({'code': 500, 'msg': 'Failed to convert the whiteboard to PNG'});
    }

    return callback(null, Buffer.concat(pngChunks));
  });
};

/**
 * Generate the thumbnails for the scheduled whiteboards
 *
 * @api private
 */
var generateScheduledThumbnails = function(callback) {
  var whiteboardIds = _.keys(scheduledThumbnails);
  if (_.isEmpty(whiteboardIds)) {
    log.debug('There were no scheduled whiteboards to generate thumbnails for');
    return callback();
  }

  async.eachSeries(whiteboardIds, function(whiteboardId, callback) {
    log.debug({
      'whiteboard': whiteboardId
    }, 'Generating a thumbnail');

    // Get all the required information to generate an image for the whiteboard
    var options = {
      'where': {
        'id': whiteboardId
      },
      'include': [
        {'model': DB.Course, 'include': [
          {'model': DB.Canvas, 'as': 'canvas'}
        ]},
        {'model': DB.WhiteboardElement, 'as': 'WhiteboardElements'}
      ]
    };
    DB.Whiteboard.findOne(options).complete(function(err, whiteboard) {
      if (err) {
        log.error({
          'err': err,
          'whiteboard': whiteboardId
        }, 'Could not retrieve a whiteboard when generating a thumbnail for it. The thumbnail will now be out of sync');

        // Do not propagate the error as that would stop any further thumbnails from being generated
        return callback();
      }

      whiteboard.whiteboardElements = whiteboard.WhiteboardElements;

      // Generate a thumbnail for the whiteboard
      generateThumbnail(whiteboard, function(err) {
        if (!err) {
          // Take the whiteboard out of the set of scheduled whiteboards for thumbnailing
          delete scheduledThumbnails[whiteboardId];
        }

        // Do not propagate the error as that would stop any further thumbnails from being generated
        return callback();
      });
    });
  }, callback);
};

/**
 * Generate a thumbnail for a whiteboard
 *
 * @param  {Whiteboard}     whiteboard      The whiteboard to generate a thumbnail for
 * @param  {Function}       callback        Standard callback function
 * @param  {Object}         callback.err    An error that occurred, if any
 * @api private
 */
var generateThumbnail = function(whiteboard, callback) {
  log.debug({'whiteboard': whiteboard.id}, 'Getting the PNG data for a whiteboard');
  getWhiteboardAsPngFile(whiteboard, function(err, imagePath) {
    if (err) {
      log.error({
        'err': err,
        'whiteboard': whiteboard.id
      }, 'Could not generate a PNG image for a whiteboard');
      return callback(err);
    }
    log.debug({'whiteboard': whiteboard.id}, 'Got the PNG data for a whiteboard');

    // Remove the image file when called
    var cleanupFile = function(err, whiteboard) {
      fs.unlink(imagePath, function(unlinkError) {
        if (unlinkError) {
          log.error({
            'err': unlinkError,
            'whiteboard': whiteboard.id
          }, 'Could not remove a whiteboard\'s exported PNG file');
        }

        return callback(err, whiteboard);
      });
    };

    var embdr = new Embdr(config.get('embdr.apiKey'));
    embdr.process(imagePath, {
      'thumbnails': {
        'sizes': [CollabosphereConstants.THUMBNAIL_SIZE]
      },
      'images': {
        'sizes': [CollabosphereConstants.IMAGE_SIZE]
      },
      'complete': function(data) {
        var update = {};
        if (data.thumbnails && data.thumbnails[CollabosphereConstants.THUMBNAIL_SIZE] && data.thumbnails[CollabosphereConstants.THUMBNAIL_SIZE].url) {
          update.thumbnailUrl = data.thumbnails[CollabosphereConstants.THUMBNAIL_SIZE].url;
        }
        if (data.images && data.images[CollabosphereConstants.IMAGE_SIZE] && data.images[CollabosphereConstants.IMAGE_SIZE].url) {
          update.imageUrl = data.images[CollabosphereConstants.IMAGE_SIZE].url;
        }
        updateWhiteboardPreview(whiteboard, update, cleanupFile);
      },
      'error': function(err) {
        log.error({
          'err': err,
          'whiteboard': whiteboard.id
        }, 'Could not create a thumbnail for an exported whiteboard');
        cleanupFile({'code': 500, 'msg': 'Could not create a thumbnail for an exported whiteboard'});
      }
    });
  });
};

/**
 * Update the preview metadata for a whiteboard
 *
 * @param  {Whiteboard}     whiteboard                      The whiteboard for which the preview metadata is being updated
 * @param  {Object}         [opts]                          The preview metadata updates that need to be applied
 * @param  {Object}         [opts.thumbnailUrl]             The updated thumbnail URL of the whiteboard
 * @param  {Object}         [opts.imageUrl]                 The updated image URL of the whiteboard
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @api private
 */
var updateWhiteboardPreview = function(whiteboard, opts, callback) {
  opts = opts || {};

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'whiteboard': Joi.object().type(Sequelize.Instance, 'Whiteboard'),
    'opts': Joi.object().keys({
      'thumbnailUrl': Joi.string().optional(),
      'imageUrl': Joi.string().optional()
    })
  });

  var validationResult = Joi.validate({
    'whiteboard': whiteboard,
    'opts': opts
  }, validationSchema);

  if (validationResult.error) {
    log.error({
      'err': validationResult.error.details[0].message,
      'opts': opts,
      'whiteboard': whiteboard.id
    }, 'Validation error when updating the preview metadata for a whiteboard');
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Update the whiteboard preview metadata in the DB
  var update = {};
  if (opts.thumbnailUrl) {
    update.thumbnail_url = opts.thumbnailUrl;
  }
  if (opts.imageUrl) {
    update.image_url = opts.imageUrl;
  }
  whiteboard.updateAttributes(update).complete(function(err) {
    if (err) {
      log.error({
        'err': err,
        'update': update,
        'whiteboard': whiteboard.id
      }, 'Failed to update the preview metadata for a whiteboard');
      return callback({'code': 500, 'msg': 'Failed to update the preview metadata for a whiteboard'});
    }

    log.debug({
      'update': update,
      'whiteboard': whiteboard.id
    }, 'Successfully updated the preview metadata for a whiteboard');
    return callback(null, whiteboard);
  });
};

/**
 * Schedule the thumbnail generator
 *
 * @api private
 */
var scheduleThumbnails = function() {
  // Generate thumbnails for the scheduled whiteboards
  generateScheduledThumbnails(function() {

    // Schedule the next run
    setTimeout(scheduleThumbnails, THUMBNAIL_INTERVAL * 1000);
  });
};

// Thumbnails can only be generated if the Embdr integration has been enabled
if (config.get('embdr.enabled')) {
  scheduleThumbnails();
}
