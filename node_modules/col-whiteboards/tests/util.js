/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');

var CollabosphereUtil = require('col-core/lib/util');
var UsersTestUtil = require('col-users/tests/util');

/**
 * Assert that a whiteboard has all expected properties
 *
 * @param  {Whiteboard}         whiteboard                    The whiteboard to assert the properties for
 * @param  {Object}             [opts]                        Optional parameters to verify the whiteboard with
 * @param  {Whiteboard}         [opts.expectedWhiteboard]     The whiteboard to which the provided whiteboard should be compared
 * @param  {Boolean}            [opts.expectFullWhiteboard]   Whether the full whiteboard details are expected, including the list of members, online members and whiteboard elements
 * @param  {Number}             [opts.expectedMemberCount]    The total number of members that are expected on the whiteboard
 * @throws {AssertionError}                                   Error thrown when an assertion failed
 */
var assertWhiteboard = module.exports.assertWhiteboard = function(whiteboard, opts) {
  opts = opts || {};

  // Ensure that all expected properties are present
  assert.ok(whiteboard);
  assert.ok(whiteboard.id);
  assert.ok(whiteboard.course_id);
  assert.ok(whiteboard.title);
  assert.ok(whiteboard.created_at);
  assert.ok(whiteboard.updated_at);

  if (opts.expectFullWhiteboard) {
    assert.ok(_.isArray(whiteboard.whiteboard_elements));
    assert.ok(_.isArray(whiteboard.members));
    if (opts.expectedWhiteboard) {
      assert.strictEqual(whiteboard.members.length, opts.expectedWhiteboard.members.length);
      _.each(whiteboard.members, function(member) {
        UsersTestUtil.assertUser(_.findWhere(opts.expectedWhiteboard.members, {'id': member.id}));
        assert.ok(_.isBoolean(member.online));
      });
    }
    if (opts.expectedMemberCount) {
      assert.strictEqual(whiteboard.members.length, opts.expectedMemberCount);
    }
  } else {
    assert.ok(_.isFinite(whiteboard.online_count));
  }

  if (opts.expectedWhiteboard) {
    assert.strictEqual(whiteboard.id, opts.expectedWhiteboard.id);
    assert.strictEqual(whiteboard.course_id, opts.expectedWhiteboard.course_id);
    assert.strictEqual(whiteboard.title, opts.expectedWhiteboard.title);
    assert.strictEqual(whiteboard.created_at, opts.expectedWhiteboard.created_at);
  }
};

/**
 * Assert that a new whiteboard can be created
 *
 * @param  {RestClient}         client                        The REST client to make the request with
 * @param  {Course}             course                        The Canvas course in which the user is interacting with the API
 * @param  {String}             title                         The title of the whiteboard
 * @param  {Number[]}           [members]                     The ids of the users that should be added to the whiteboard as members. The current user will automatically be added as a member
 * @param  {Function}           callback                      Standard callback function
 * @param  {Object}             callback.err                  An error that occurred, if any
 * @param  {Whiteboard}         callback.whiteboard           The created whiteboard
 * @throws {AssertionError}                                   Error thrown when an assertion failed
 */
var assertCreateWhiteboard = module.exports.assertCreateWhiteboard = function(client, course, title, members, callback) {
  UsersTestUtil.assertGetMe(client, course, null, function(me) {

    client.whiteboards.createWhiteboard(course, title, members, function(err, whiteboard) {
      assert.ok(!err);
      assert.ok(whiteboard);
      assertWhiteboard(whiteboard, {'expectFullWhiteboard': true});
      assert.strictEqual(whiteboard.title, title);

      // Verify that the expected members are present
      var expectedMembers = CollabosphereUtil.toArray(members);
      expectedMembers.push(me.id);
      expectedMembers = _.uniq(expectedMembers);

      assert.strictEqual(whiteboard.members.length, expectedMembers.length);
      _.each(expectedMembers, function(member) {
        UsersTestUtil.assertUser(_.findWhere(whiteboard.members, {'id': member}));
      });

      return callback(whiteboard);
    });
  });
};

/**
 * Assert that a new whiteboard can not be created
 *
 * @param  {RestClient}         client                        The REST client to make the request with
 * @param  {Course}             course                        The Canvas course in which the user is interacting with the API
 * @param  {String}             title                         The title of the whiteboard
 * @param  {Number[]}           [members]                     The ids of the users that should be added to the whiteboard as members. The current user will automatically be added as a member
 * @param  {Number}             code                          The expected HTTP error code
 * @param  {Function}           callback                      Standard callback function
 * @param  {Object}             callback.err                  An error that occurred, if any
 * @throws {AssertionError}                                   Error thrown when an assertion failed
 */
var assertCreateWhiteboardFails = module.exports.assertCreateWhiteboardFails = function(client, course, title, members, code, callback) {
  client.whiteboards.createWhiteboard(course, title, members, function(err, whiteboard) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!whiteboard);

    return callback();
  });
};

/**
 * Assert that a whiteboard can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the whiteboard
 * @param  {Whiteboard}         [expectedWhiteboard]            The expected whiteboard to be retrieved
 * @param  {Number}             [expectedMemberCount]           The total number of members that are expected on the whiteboard
 * @param  {Function}           callback                        Standard callback function
 * @param  {Whiteboard}         callback.whiteboard             The retrieved whiteboard
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetWhiteboard = module.exports.assertGetWhiteboard = function(client, course, id, expectedWhiteboard, expectedMemberCount, callback) {
  client.whiteboards.getWhiteboard(course, id, function(err, whiteboard) {
    assert.ok(!err);
    assert.ok(whiteboard);
    assert.strictEqual(whiteboard.id, id);
    assertWhiteboard(whiteboard, {'expectFullWhiteboard': true, 'expectedWhiteboard': expectedWhiteboard, 'expectedMemberCount': expectedMemberCount});

    return callback(whiteboard);
  });
};

/**
 * Assert that a whiteboard can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the whiteboard
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetWhiteboardFails = module.exports.assertGetWhiteboardFails = function(client, course, id, code, callback) {
  client.whiteboards.getWhiteboard(course, id, function(err, whiteboard) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!whiteboard);

    return callback();
  });
};

/**
 * Assert that the whiteboards for a course can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}             [offset]                        The number to start paging from. Defaults to 0
 * @param  {Number}             expectedTotal                   The expected total number of assets in the current course
 * @param  {Function}           callback                        Standard callback function
 * @param  {Object}             callback.whiteboards            The retrieved whiteboards
 * @param  {Number}             callback.whiteboards.total      The total number of whiteboards to which the current user has access in the current course
 * @param  {Whiteboard[]}       callback.whiteboards.results    The paged whiteboard to which the current user has access in the current course
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetWhiteboards = module.exports.assertGetWhiteboards = function(client, course, limit, offset, expectedTotal, callback) {
  client.whiteboards.getWhiteboards(course, limit, offset, function(err, whiteboards) {
    assert.ok(!err);
    assert.ok(whiteboards);
    assert.ok(whiteboards.results);
    assert.ok(whiteboards.results.length <= whiteboards.total);
    assert.strictEqual(whiteboards.total, expectedTotal);

    _.each(whiteboards.results, function(whiteboard) {
      assertWhiteboard(whiteboard);
    });

    return callback(whiteboards);
  });
};

/**
 * Assert that the whiteboards for a course can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}             [offset]                        The number to start paging from. Defaults to 0
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetWhiteboardsFails = module.exports.assertGetWhiteboardsFails = function(client, course, limit, offset, code, callback) {
  client.whiteboards.getWhiteboards(course, filters, limit, offset, function(err, whiteboards) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!whiteboards);

    return callback();
  });
};

/**
 * Assert that a whiteboard can be edited
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the whiteboard that is being edited
 * @param  {String}             title                           The updated title of the whiteboard
 * @param  {Number[]}           members                         The ids of the users that should be a member of the whiteboard
 * @param  {Function}           callback                        Standard callback function
 * @param  {Whieboard}          callback.whiteboard             The updated whiteboard
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertEditWhiteboard = module.exports.assertEditWhiteboard = function(client, course, id, title, members, callback) {
  client.whiteboards.editWhiteboard(course, id, title, members, function(err, whiteboard) {
    assert.ok(!err);
    assert.ok(whiteboard);
    assertWhiteboard(whiteboard, {'expectFullWhiteboard': true});
    assert.strictEqual(whiteboard.title, title);

    // Verify that the expected members are present
    var expectedMembers = CollabosphereUtil.toArray(members);
    expectedMembers = _.uniq(expectedMembers);

    assert.strictEqual(whiteboard.members.length, expectedMembers.length);
    _.each(expectedMembers, function(member) {
      UsersTestUtil.assertUser(_.findWhere(whiteboard.members, {'id': member}));
    });

    return callback(whiteboard);
  });
};

/**
 * Assert that a whiteboard can not be edited
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the whiteboard that is being edited
 * @param  {String}             title                           The updated title of the whiteboard
 * @param  {Number[]}           members                         The ids of the users that should be a member of the whiteboard
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertEditWhiteboardFails = module.exports.assertEditWhiteboardFails = function(client, course, id, title, members, code, callback) {
  client.whiteboards.editWhiteboard(course, id, title, members, function(err, whiteboard) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!whiteboard);

    return callback();
  });
};
