/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Joi = require('joi');
var randomstring = require('randomstring');

var DB = require('col-core/lib/db');
var log = require('col-core/lib/logger')('col-users');

/**
 * Get a user by its id
 *
 * @param  {Number}       id                  The id of the user
 * @param  {Function}     callback            Standard callback function
 * @param  {Object}       callback.err        An error object, if any
 * @param  {User}         callback.user       The retrieved user
 */
var getUser = module.exports.getUser = function(id, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'id': id
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the user from the DB
  var options = {
    'where': {
      'id': id
    },
    'include': [{
      'model': DB.Course,
      'include': [{
        'model': DB.Canvas,
        'as': 'canvas',
        'attributes': ['use_https']
      }]
    }]
  };
  DB.User.findOne(options).complete(function(err, user) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to get a user');
      return callback({'code': 500, 'msg': err.message});
    } else if (!user) {
      log.debug({'err': err, 'id': id}, 'A user with the specified id could not be found');
      return callback({'code': 404, 'msg': 'A user with the specified id could not be found'});
    }

    return callback(null, user);
  });
};

/**
 * Get a user by its bookmarklet token
 *
 * @param  {Number}       id                  The id of the user
 * @param  {String}       bookmarkletToken    The bookmarklet token for the user
 * @param  {Function}     callback            Standard callback function
 * @param  {Object}       callback.err        An error object, if any
 * @param  {User}         callback.user       The retrieved user
 */
var getUserByBookmarkletToken = module.exports.getUserByBookmarkletToken = function(id, bookmarkletToken, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required(),
    'bookmarkletToken': Joi.string().required()
  });

  var validationResult = Joi.validate({
    'id': id,
    'bookmarkletToken': bookmarkletToken
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the user from the DB
  var options = {
    'where': {
      'id': id,
      'bookmarklet_token': bookmarkletToken
    },
    'include': [{
      'model': DB.Course,
      'include': [{
        'model': DB.Canvas,
        'as': 'canvas',
        'attributes': ['use_https']
      }]
    }]
  };
  DB.User.findOne(options).complete(function(err, user) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to get a user by its bookmarklet token');
      return callback({'code': 500, 'msg': err.message});
    } else if (!user) {
      log.debug({'err': err, 'id': id}, 'A user with the specified bookmarklet token could not be found');
      return callback({'code': 404, 'msg': 'A user with the specified bookmarklet token could not be found'});
    }

    return callback(null, user);
  });
};

/**
 * Get or create a user
 *
 * @param  {Number}     canvasUserId                    The id of the user in Canvas
 * @param  {Course}     course                          The course the user belongs to
 * @param  {Object}     defaults                        A set of properties to create the user object with
 * @param  {String}     defaults.canvas_course_role     The role of the user in the course
 * @param  {String}     defaults.canvas_full_name       The full name of the user
 * @param  {String}     defaults.canvas_image           A URL that points to an image for the user
 * @param  {Function}   callback                        Standard callback function
 * @param  {Object}     callback.err                    An error object, if any
 * @param  {User}       callback.user                   The retrieved or created user
 */
var getOrCreateUser = module.exports.getOrCreateUser = function(canvasUserId, course, defaults, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'canvasUserId': Joi.number().required(),
    'course': Joi.object().required(),
    'defaults': Joi.object().keys({
      'canvas_course_role': Joi.string().required(),
      'canvas_full_name': Joi.string().required(),
      'canvas_image': Joi.string().allow('').optional()
    })
  });

  var validationResult = Joi.validate({
    'canvasUserId': canvasUserId,
    'course': course,
    'defaults': defaults
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Generate the bookmarklet token
  defaults.bookmarklet_token = randomstring.generate();

  // Get the user from the DB or create it if it doesn't exist yet
  options = {
    'where': {
      'canvas_user_id': canvasUserId,
      'course_id': course.id
    },
    'defaults': defaults
  };
  DB.User.findOrCreate(options).complete(function(err, data) {
    if (err) {
      log.error({'err': err}, 'Failed to get or create a user');
      return callback({'code': 500, 'msg': err.message});
    }

    var user = data[0];
    var wasCreated = data[1];
    if (wasCreated) {
      log.info({'id': user.id}, 'Created a new user');
    }

    return callback(null, user);
  });
};
