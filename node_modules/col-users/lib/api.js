/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var Joi = require('joi');
var randomstring = require('randomstring');

var CollabosphereConstants = require('col-core/lib/constants');
var DB = require('col-core/lib/db');
var log = require('col-core/lib/logger')('col-users');

var UserConstants = require('./constants');

/**
 * Get a user by its id
 *
 * @param  {Number}       id                  The id of the user
 * @param  {Function}     callback            Standard callback function
 * @param  {Object}       callback.err        An error object, if any
 * @param  {User}         callback.user       The retrieved user
 */
var getUser = module.exports.getUser = function(id, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'id': id
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the user from the DB
  var options = {
    'where': {
      'id': id
    },
    'include': [{
      'model': DB.Course,
      'include': [{
        'model': DB.Canvas,
        'as': 'canvas',
        'attributes': ['canvas_api_domain', 'use_https']
      }]
    }]
  };
  DB.User.findOne(options).complete(function(err, user) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to get a user');
      return callback({'code': 500, 'msg': err.message});
    } else if (!user) {
      log.debug({'err': err, 'id': id}, 'A user with the specified id could not be found');
      return callback({'code': 404, 'msg': 'A user with the specified id could not be found'});
    }

    return callback(null, user);
  });
};

/**
 * Get a user by its bookmarklet token
 *
 * @param  {Number}       id                  The id of the user
 * @param  {String}       bookmarkletToken    The bookmarklet token for the user
 * @param  {Function}     callback            Standard callback function
 * @param  {Object}       callback.err        An error object, if any
 * @param  {User}         callback.user       The retrieved user
 */
var getUserByBookmarkletToken = module.exports.getUserByBookmarkletToken = function(id, bookmarkletToken, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required(),
    'bookmarkletToken': Joi.string().required()
  });

  var validationResult = Joi.validate({
    'id': id,
    'bookmarkletToken': bookmarkletToken
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the user from the DB
  var options = {
    'where': {
      'id': id,
      'bookmarklet_token': bookmarkletToken
    },
    'include': [{
      'model': DB.Course,
      'include': [{
        'model': DB.Canvas,
        'as': 'canvas',
        'attributes': ['use_https']
      }]
    }]
  };
  DB.User.findOne(options).complete(function(err, user) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to get a user by its bookmarklet token');
      return callback({'code': 500, 'msg': err.message});
    } else if (!user) {
      log.debug({'err': err, 'id': id}, 'A user with the specified bookmarklet token could not be found');
      return callback({'code': 404, 'msg': 'A user with the specified bookmarklet token could not be found'});
    }

    return callback(null, user);
  });
};

/**
 * Get a user. If the user doesn't exist, it will be created
 *
 * @param  {Number}     canvasUserId                            The id of the user in Canvas
 * @param  {Course}     course                                  The course the user belongs to
 * @param  {Object}     profileInfo                             A set of properties to create the user object with. If the user already exist, it will be updated using these properties
 * @param  {String}     profileInfo.canvas_course_role          The role of the user in the course
 * @param  {String}     [profileInfo.canvas_enrollment_state]   The enrollment state of the user in the course. Should be one of @{link CollabosphereConstants.ENROLLMENT_STATE}, defaults to CollabosphereConstants.ENROLLMENT_STATE.ACTIVE
 * @param  {String}     profileInfo.canvas_full_name            The full name of the user
 * @param  {String}     profileInfo.canvas_image                A URL that points to an image for the user
 * @param  {Function}   callback                                Standard callback function
 * @param  {Object}     callback.err                            An error object, if any
 * @param  {User}       callback.user                           The retrieved or created user
 */
var getOrCreateUser = module.exports.getOrCreateUser = function(canvasUserId, course, profileInfo, callback) {
  profileInfo = profileInfo || {};
  profileInfo.canvas_enrollment_state = profileInfo.canvas_enrollment_state || CollabosphereConstants.ENROLLMENT_STATE.ACTIVE;

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'canvasUserId': Joi.number().required(),
    'course': Joi.object().required(),
    'profileInfo': Joi.object().keys({
      'canvas_course_role': Joi.string().required(),
      'canvas_enrollment_state': Joi.string().valid(_.values(CollabosphereConstants.ENROLLMENT_STATE)).required(),
      'canvas_full_name': Joi.string().required(),
      'canvas_image': Joi.string().optional()
    })
  });

  var validationResult = Joi.validate({
    'canvasUserId': canvasUserId,
    'course': course,
    'profileInfo': profileInfo
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Generate a bookmarklet token in case the user doesn't exist yet
  var newUser = _.cloneDeep(profileInfo);
  newUser.bookmarklet_token = randomstring.generate();

  // Get the user from the DB or create it if it doesn't exist yet
  options = {
    'where': {
      'canvas_user_id': canvasUserId,
      'course_id': course.id
    },
    'defaults': newUser
  };
  DB.User.findOrCreate(options).complete(function(err, data) {
    if (err) {
      log.error({'err': err}, 'Failed to get or create a user');
      return callback({'code': 500, 'msg': err.message});
    }

    var user = data[0];
    var wasCreated = data[1];

    if (wasCreated) {
      log.info({'id': user.id}, 'Created a new user');
      return callback(null, user);

    // If the user already exists, we update its profile values with the
    // values supplied by Canvas
    } else {
      user.updateAttributes(profileInfo).complete(function(err, user) {
        if (err) {
          log.error({'err': err}, 'Failed to update a user');
          return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, user);
      });
    }
  });
};

/**
 * Get users in the current course by their id
 *
 * @param  {Context}        ctx                         Standard context containing the current user and the current course
 * @param  {Number[]}       ids                         The ids of the users that should be retrieved
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error that occurred, if any
 * @param  {User[]}         callback.users              The retrieved users
 */
var getUsers = module.exports.getUsers = function(ctx, ids, callback) {
  // Return immediately if no user ids have been provided
  if (_.isEmpty(ids)) {
    return callback(null, []);
  }

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'ids': Joi.array().unique().items(Joi.number()).required()
  });

  var validationResult = Joi.validate({
    'ids': ids
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the users from the DB
  var options = {
    'where': {
      'course_id': ctx.course.id,
      'id': ids
    }
  };

  DB.User.findAll(options).complete(function(err, users) {
    if (err) {
      log.error({'err': err, 'ids': ids}, 'Failed to get a set of users');
      return callback({'code': 500, 'msg': err.message});
    } else if (users.length !== ids.length) {
      log.error({'err': err, 'ids': ids}, 'Could not retrieve all requested users');
      return callback({'code': 404, 'msg': 'Could not retrieve all requested users'});
    }

    return callback(null, users);
  });
};

/**
 * Get all the users in the current course
 *
 * @param  {Context}    ctx                             Standard context containing the current user and the current course
 * @param  {String[]}   [enrollmentStates]              The enrollment states of the users in the course. One of {@link CollabosphereConstants.ENROLLMENT_STATE}. Defaults to `active` and `invited`
 * @param  {Function}   callback                        Standard callback function
 * @param  {Object}     callback.err                    An error that occurred, if any
 * @param  {User[]}     callback.users                  All users in the current course
 */
var getAllUsers = module.exports.getAllUsers = function(ctx, enrollmentStates, callback) {
  enrollmentStates = enrollmentStates || [
    CollabosphereConstants.ENROLLMENT_STATE.ACTIVE,
    CollabosphereConstants.ENROLLMENT_STATE.INVITED
  ];

  // Get the users from the DB
  var options = {
    'where': {
      'course_id': ctx.course.id,
      'canvas_enrollment_state': enrollmentStates
    },
    'attributes': UserConstants.BASIC_USER_FIELDS,
    'order': 'canvas_full_name ASC'
  };
  DB.User.findAll(options).complete(function(err, users) {
    if (err) {
      log.error({'err': err, 'course': ctx.course}, 'Failed to get the users in the current course');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, users);
  });
};

/**
 * Get the users in the current course and their points
 *
 * @param  {Context}    ctx                             Standard context containing the current user and the current course
 * @param  {Function}   callback                        Standard callback function
 * @param  {Object}     callback.err                    An error that occurred, if any
 * @param  {User[]}     callback.users                  The users in the current course and their points
 */
var getLeaderboard = module.exports.getLeaderboard = function(ctx, callback) {
  // Only instructors and users that have opted into sharing their points with
  // the course are able to retrieve the list of users for the course
  if (!ctx.user.share_points && !ctx.user.is_admin) {
    log.error({'id': ctx.user.id}, 'Unauthorized to get the list of users for the course');
    return callback({'code': 401, 'msg': 'Unauthorized to get the list of users for the course'});
  }

  // Get the users from the DB
  var options = {
    'where': {
      'course_id': ctx.course.id,
      'canvas_enrollment_state': ['active', 'invited']
    },
    'attributes': UserConstants.POINTS_USER_FIELDS,
    'order': 'points DESC, id ASC'
  };

  // Only instructors are able to see all users in the course. Non-administrators
  // are only able to see the users that have opted into sharing their points with the course
  if (!ctx.user.is_admin) {
    options.where.share_points = true;
  }

  DB.User.findAll(options).complete(function(err, users) {
    if (err) {
      log.error({'err': err, 'course': ctx.course}, 'Failed to get the users in the current course');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, users);
  });
};

/**
 * Update the points share status for a user. This will determine whether the user's
 * points are shared with the course
 *
 * @param  {Context}    ctx                             Standard context containing the current user and the current course
 * @param  {Boolean}    share                           Whether the user's points should be shared with the course
 * @param  {Function}   callback                        Standard callback function
 * @param  {Object}     callback.err                    An error that occurred, if any
 * @param  {User}       callback.user                   The updated user
 */
var updateSharePoints = module.exports.updateSharePoints = function(ctx, share, callback) {
  var update = {
    'share_points': share
  };

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'share_points': Joi.boolean().required()
  });

  var validationResult = Joi.validate(update, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Update the share status in the DB
  ctx.user.updateAttributes(update).complete(function(err, user) {
    if (err) {
      log.error({'err': err}, 'Failed to update the share status');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, user);
  });
};

/**
 * Update one or more users
 *
 * @param  {Number}         userIds                             The id of the users to update
 * @param  {Object}         update                              The updates to persist
 * @param  {Object}         [update.canvas_course_role]         The updated role. One of {@link CollabosphereConstants.ADMIN_ROLES} or  {@link CollabosphereConstants.TEACHER_ROLES}
 * @param  {Object}         [update.canvas_enrollment_state]    The updated enrollment state. One of {@link CollabosphereConstants.ENROLLMENT_STATE}
 * @param  {Object}         [update.canvas_full_name]           The updated name
 * @param  {Object}         [update.canvas_image]               The updated image
 * @param  {Function}       callback                            Standard callback function
 * @param  {Object}         callback.err                        An error that occurred, if any
 */
var updateUsers = module.exports.updateUsers = function(userIds, update, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'userIds': Joi.array().unique().min(1).items(Joi.number()),
    'update': Joi.object().min(1).keys({
      'canvas_course_role': Joi.string().optional(),
      'canvas_enrollment_state': Joi.string().optional(),
      'canvas_full_name': Joi.string().optional(),
      'canvas_image': Joi.string().optional()
    })
  });

  var validationResult = Joi.validate({
    'userIds': userIds,
    'update': update
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Update the users in the DB
  var options = {
    'where': {
      'id': userIds
    }
  };
  DB.User.update(update, options).complete(function(err) {
    if (err) {
      log.error({'err': err, 'users': userIds}, 'Failed to update one or more users');
      return callback({'code': 500, 'msg': 'Failed to update one or more users'});
    }

    return callback();
  });
};
