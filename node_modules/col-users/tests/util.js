/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');

var CollabosphereConstants = require('col-core/lib/constants');
var TestsUtil = require('col-tests/lib/util');

/**
 * Assert that a me object has all expected properties
 *
 * @param  {Me}                 me                  The me object to assert the properties for
 * @param  {Me}                 [expectedMe]        The me object to which the provided me object should be compared
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertMe = module.exports.assertMe = function(me, expectedMe) {
  // Ensure that all expected properties are present
  assert.ok(me);
  assert.ok(me.id);
  assert.ok(me.canvas_user_id);
  assert.ok(me.course_id);
  assert.ok(me.canvas_course_role);
  assert.ok(me.canvas_full_name);
  assert.ok(me.bookmarklet_token);
  assert.ok(me.created_at);
  assert.ok(me.updated_at);
  assert(typeof me.points === 'number');
  assert(typeof me.is_admin === 'boolean');
  assert(me.share_points === null || typeof me.share_points === 'boolean');

  // Ensure that all expected properties are present on the course property
  var course = me.course;
  assert.ok(course);
  assert.ok(course.id);
  assert.strictEqual(course.id, me.course_id);
  assert.ok(course.canvas_course_id);
  assert.ok(course.canvas_api_domain);
  assert.ok(course.created_at);
  assert.ok(course.updated_at);
  assert(typeof course.enable_upload === 'boolean');
  assert(typeof course.active === 'boolean');

  // Ensure that all expected properties are present on the canvas property
  var canvas = course.canvas;
  assert.ok(canvas);
  assert(typeof canvas.use_https === 'boolean');
  // Ensure that none of the private properties return
  assert.ok(!canvas.api_key);
  assert.ok(!canvas.lti_key);
  assert.ok(!canvas.lti_secret);

  // Ensure that the user is correctly recognised as a (non-)admin
  if (_.contains(CollabosphereConstants.ADMIN_ROLES, me.canvas_course_role)) {
    assert.strictEqual(me.is_admin, true);
  } else {
    assert.strictEqual(me.is_admin, false);
  }

  // Ensure that all the expected properties are the same as the ones for
  // the expected me object
  if (expectedMe) {
    assert.strictEqual(me.id, expectedMe.id);
    assert.strictEqual(me.canvas_user_id, expectedMe.canvas_user_id);
    assert.strictEqual(me.course_id, expectedMe.course_id);
    assert.strictEqual(me.canvas_course_role, expectedMe.canvas_course_role);
    assert.strictEqual(me.canvas_full_name, expectedMe.canvas_full_name);
    assert.strictEqual(me.bookmarklet_token, expectedMe.bookmarklet_token);
    assert.strictEqual(me.created_at, expectedMe.created_at);
    assert.strictEqual(me.updated_at, expectedMe.updated_at);
    assert.strictEqual(me.points, expectedMe.points);
    assert.strictEqual(me.share_points, expectedMe.share_points);
    assert.strictEqual(me.is_admin, expectedMe.is_admin);

    // Ensure that all the expected properties on the course property are the same
    assert.strictEqual(me.course.id, expectedMe.course.id);
    assert.strictEqual(me.course.canvas_course_id, expectedMe.course.id);
    assert.strictEqual(me.course.canvas_api_domain, expectedMe.course.canvas_api_domain);
    assert.strictEqual(me.course.created_at, expectedMe.course.created_at);
    assert.strictEqual(me.course.updated_at, expectedMe.course.updated_at);
    assert.strictEqual(me.course.enable_upload, expectedMe.course.enable_upload);
    assert.strictEqual(me.course.active, expectedMe.course.active);

    // Ensure that all the expected properties on the canvas property are the same
    assert.strictEqual(me.course.canvas.use_https, expectedMe.canvas.use_https);

    // Ensure that all optional properties are the same as the ones for the
    // expected asset
    if (me.canvas_image || expectedMe.canvas_image) {
      assert.strictEqual(me.canvas_image, expectedMe.canvas_image);
    }
  }
};

/**
 * Assert that the me feed for a client can be retrieved
 *
 * @param  {Client}             client              The REST client to make the request with
 * @param  {Course}             course              The Canvas course the user is launched in
 * @param  {Me}                 [expectedMe]        The expected Collabosphere user that should be returned
 * @param  {Function}           callback            Standard callback function
 * @param  {Me}                 callback.me         The me data as returned by the API
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertGetMe = module.exports.assertGetMe = function(client, course, expectedMe, callback) {
  client.users.getMe(course, function(err, me) {
    assert.ok(!err);
    assert.ok(me);
    assertMe(me, expectedMe);
    assert.strictEqual(me.course.canvas_course_id, course.id);

    return callback(me);
  });
};

/**
 * Assert that the me feed for a client can be retrieved
 *
 * @param  {Client}             client          The REST client to make the request with
 * @param  {Course}             course          The Canvas course the user is launched in
 * @param  {Number}             code            The HTTP response code
 * @param  {Function}           callback        Standard callback function
 * @param  {Object}             callback.me     The me data as returned by the API
 * @throws {AssertionError}                     Error thrown when an assertion failed
 */
var assertGetMeFails = module.exports.assertGetMeFails = function(client, course, code, callback) {
  client.users.getMe(course, function(err, me) {
    assert.strictEqual(err.code, code);
    assert.ok(!me);

    return callback();
  });
};
