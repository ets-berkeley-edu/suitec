/**
 * Copyright Â©2016. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var _ = require('lodash');
var assert = require('assert');

var TestsUtil = require('col-tests');
var UsersTestUtil = require('col-users/tests/util');

describe('Users', function() {

  describe('Me', function() {

    /**
     * Test that verifies that the me feed can be retrieved
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        UsersTestUtil.assertGetMe(client, course, null, function(me) {

          return callback();
        });
      });
    });

    /**
     * Test that verifies that administrators and non-administrators are
     * correctly identified
     */
    it('correctly identifies admins', function(callback) {
      // Verify that all admin roles are correctly returned as admins
      var admin1 = TestsUtil.generateUser(null, null, 'Instructor');
      TestsUtil.getAssetLibraryClient(null, null, admin1, function(client, course, user) {
        UsersTestUtil.assertGetMe(client, course, null, function(me) {
          assert.strictEqual(me.is_admin, true);

          var admin2 = TestsUtil.generateUser(null, null, 'ContentDeveloper');
          TestsUtil.getAssetLibraryClient(null, null, admin2, function(client, course, user) {
            UsersTestUtil.assertGetMe(client, course, null, function(me) {
              assert.strictEqual(me.is_admin, true);

              var admin3 = TestsUtil.generateUser(null, null, 'urn:lti:role:ims/lis/TeachingAssistant');
              TestsUtil.getAssetLibraryClient(null, null, admin3, function(client, course, user) {
                UsersTestUtil.assertGetMe(client, course, null, function(me) {
                  assert.strictEqual(me.is_admin, true);

                  var admin4 = TestsUtil.generateUser(null, null, 'Instructor,urn:lti:role:ims/lis/TeachingAssistant');
                  TestsUtil.getAssetLibraryClient(null, null, admin4, function(client, course, user) {
                    UsersTestUtil.assertGetMe(client, course, null, function(me) {
                      assert.strictEqual(me.is_admin, true);

                      var admin5 = TestsUtil.generateUser(null, null, 'Instructor,FooBar');
                      TestsUtil.getAssetLibraryClient(null, null, admin5, function(client, course, user) {
                        UsersTestUtil.assertGetMe(client, course, null, function(me) {
                          assert.strictEqual(me.is_admin, true);

                          // Verify that other roles are not returned as admins
                          var nonAdmin1 = TestsUtil.generateUser(null, null, 'Student');
                          TestsUtil.getAssetLibraryClient(null, null, nonAdmin1, function(client, course, user) {
                            UsersTestUtil.assertGetMe(client, course, null, function(me) {
                              assert.strictEqual(me.is_admin, false);

                              var nonAdmin2 = TestsUtil.generateUser(null, null, 'FooBar');
                              TestsUtil.getAssetLibraryClient(null, null, nonAdmin2, function(client, course, user) {
                                UsersTestUtil.assertGetMe(client, course, null, function(me) {
                                  assert.strictEqual(me.is_admin, false);

                                  return callback();
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Get users', function() {

    /**
     * Test that verifies that the users for the current course can be listed
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
          TestsUtil.getAssetLibraryClient(null, course, null, function(client3, course, user3) {

            UsersTestUtil.assertGetAllUsers(client1, course, 3, function(users) {
              var expectedUserNames = _.map([user1, user2, user3], 'fullName').sort();
              var retrievedUserNames = _.map(users, 'canvas_full_name').sort();
              assert.deepEqual(retrievedUserNames, expectedUserNames);
              return callback();
            });
          });
        });
      });
    });

    // TODO: Users synchronized through the Canvas poller but who haven't launched into the tool should appear as well
  });
});
