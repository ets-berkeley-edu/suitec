/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var config = require('config');
var Sequelize = require('sequelize');

var CollabosphereConstants = require('./constants');
var log = require('./logger')('col-core/db');

// A sequelize instance that will be connected to the database
var sequelize = null;

/**
 * Initialize the database and the Collabosphere models
 *
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var init = module.exports.init = function(callback) {
  var sequelizeConfig = {
    'dialect': 'postgres',
    'logging': function(msg) {
      log.debug(msg);
    }
  };

  // Set up a connection to the database
  sequelize = new Sequelize(config.get('db.database'), config.get('db.username'), config.get('db.password'), sequelizeConfig);

  sequelize.authenticate().done(function(err) {
    if (err) {
      log.error({'err': err}, 'Unable to set up a connection to the database');
      return callback({'code': 500, 'msg': 'Unable to set up a connection to the database'});
    }

    log.debug('Connected to the database');

    // Set up the model
    setUpModel(sequelize);

    // By setting `force` to `true` we will drop each table and recreate it. This is useful
    // during development/testing when models tend to change. We NEVER do this in production though
    var force = false;
    if (process.env.NODE_ENV !== 'production' && config.get('db.dropOnStartup') === true) {
      force = true;
    }

    sequelize.sync({'force': force}).done(function(err) {
      if (err) {
        log.error({'err': err}, 'Unable to sync the model to the database');
        return callback({'code': 500, 'msg': 'Unable to sync the model to the database'});
      }

      log.debug('Synced model to database');

      return callback();
    });
  });
};

/**
 * Set up the DB model
 *
 * @param  {Sequelize}        sequelize               A sequelize instance that is connected to the database
 * @api private
 */
var setUpModel = function(sequelize) {

  /**
   * The `canvas` table keeps track of the Canvas instances that Collabosphere should
   * communicate with. It holds all the information that's needed to interact with the
   * Canvas API and to embed the Collabosphere tools into Canvas
   *
   * @property  {String}      canvas_api_domain       The domain on which canvas is running
   * @property  {String}      api_key                 The key that can be used to interact with the Canvas API
   * @property  {String}      lti_key                 The basic LTI key that will be used to embed the tools into Canvas
   * @property  {String}      lti_secret              The basic LTI secret that will be used to embed the tools into Canvas
   * @property  {Boolean}     use_https               Whether the Canvas API is running on https
   */
  var Canvas = module.exports.Canvas = sequelize.define('canvas', {
    'canvas_api_domain': {
      'type': Sequelize.STRING,
      'allowNull': false,
      'primaryKey': true
    },
    'api_key': {
      'type': Sequelize.STRING,
      'allowNull': false
    },
    'lti_key': {
      'type': Sequelize.STRING,
      'allowNull': false,
      'unique': true
    },
    'lti_secret': {
      'type': Sequelize.STRING,
      'allowNull': false,
      'unique': true
    },
    'use_https': {
      'type': Sequelize.BOOLEAN,
      'defaultValue': true
    }
  }, {
    'underscored': true
  });

  /**
   * The `course` table keeps track of each course in which one of the tools has been embedded
   *
   * @property  {Number}      canvas_course_id        The id of the course in Canvas
   * @property  {Boolean}     enable_upload           Whether students are allowed to upload to the Asset Library directly
   * @property  {Boolean}     active                  Whether this course's data should be synced with Canvas
   */
  var Course = module.exports.Course = sequelize.define('course', {
    'canvas_course_id': {
      'type': Sequelize.INTEGER,
      'allowNull': false
    },
    'enable_upload': {
      'type': Sequelize.BOOLEAN,
      'allowNull': false,
      'defaultValue': true
    },
    'active': {
      'type': Sequelize.BOOLEAN,
      'allowNull': false,
      'defaultValue': true
    }
  }, {
    'underscored': true
  });

  // Each course belongs to a specific Canvas instance
  Course.belongsTo(Canvas, {
    'onDelete': 'CASCADE',
    'as': 'canvas',
    'foreignKey': {
      'name': 'canvas_api_domain',
      'allowNull': false
    }
  });

  /**
   * The `user` table keeps track of each user that is enrolled in a course. This means that
   * the same physical student might end up with two student records within Collabosphere. As
   * there's no overlap between courses, this is acceptable.
   *
   * @property  {Number}      canvas_user_id          The id of the user in Canvas
   * @property  {String}      canvas_course_role      The role of the user in the course
   * @property  {String}      canvas_full_name        The full name of the student
   * @property  {String}      [canvas_image]          The URL that points to a profile picture for the user
   * @property  {Number}      points                  The total Engagement Index points that the user has accumulated in the course
   * @property  {Boolean}     share_points            Whether the user wants to share their point total with the other students in the course
   * @property  {String}      bookmarklet_token       The bookmarklet access token for the user
   */
  var User = module.exports.User = sequelize.define('user', {
    'canvas_user_id': {
      'type': Sequelize.INTEGER,
      'allowNull': false
    },
    'canvas_course_role': {
      'type': Sequelize.STRING,
      'allowNull': false
    },
    'canvas_full_name': {
      'type': Sequelize.STRING,
      'allowNull': false
    },
    'canvas_image': {
      'type': Sequelize.STRING,
      'allowNull': true
    },
    'points': {
      'type': Sequelize.INTEGER,
      'allowNull': false,
      'defaultValue': 0
    },
    'share_points': {
      'type': Sequelize.BOOLEAN,
      'allowNull': true,
      'defaultValue': null
    },
    'bookmarklet_token': {
      'type': Sequelize.STRING(32),
      'allowNull': false
    }
  }, {
    'underscored': true,
    'instanceMethods': {
      'isAdmin': function() {
        return _.contains(CollabosphereConstants.ADMIN_ROLES, this.canvas_course_role);
      }
    }
  });

  // Each user belongs to a specific course
  User.belongsTo(Course, {
    'onDelete': 'CASCADE',
    'foreignKey': {
      'name': 'course_id',
      'allowNull': false
    }
  });

  /**
   * The `activity` table will keep track of actions that users make in the system. This can
   * include things such as:
   *  - liking or disliking assets
   *  - commenting on assets
   *  - submitting an assignment
   *  - posting to a Canvas discussion
   *  - creating a whiteboard
   *  - ...
   *
   * As an activity can be related to different things, it's hard to enforce referential integrity without
   * adding lots of unused foreign keys to the table. That's why a more general approach has been taken:
   *  - `object_id` will be an identifier (e.g., canvas assignment id)
   *  - `object_type` will hold information about the type the id points to (e.g., a canvas assignment)
   *
   * @property  {String}      type                    The type of the activity
   * @property  {Number}      object_id               The id of the object that was involved in the activity. This can be a Canvas assignment id, a comment id, an asset id, etc
   * @property  {String}      object_type             The type of object that was involved in the activity
   */
  var Activity = module.exports.Activity = sequelize.define('activity', {
    'type': {
      'type': Sequelize.ENUM(CollabosphereConstants.ACTIVITY.ACTIVITY_TYPES),
      'allowNull': false
    },
    'object_id': {
      'type': Sequelize.INTEGER,
      'allowNull': false
    },
    'object_type': {
      'type': Sequelize.ENUM(CollabosphereConstants.ACTIVITY.OBJECT_TYPES),
      'allowNull': false
    }
  }, {
    'underscored': true
  });

  // Each activity happens within a course
  Activity.belongsTo(Course, {
    'onDelete': 'CASCADE',
    'foreignKey': {
      'name': 'course_id',
      'allowNull': false
    }
  });

  // The user who triggered the activity
  Activity.belongsTo(User, {
    'onDelete': 'CASCADE',
    'foreignKey': {
      'name': 'actor',
      'allowNull': false
    }
  });

  // The target is the user who was indirectly involved in the activity. For example,
  // when John likes a comment from Bella, John will be the actor and Bella will be the target.
  // When users drop out of a course, they will be removed from Collabosphere. However, the users that
  // received points through likes and comments from these users should not lose points in the Engagement
  // Index. Therefore, the target ids will be set to null when such a user is removed from Collabosphere
  Activity.belongsTo(User, {'as': 'target', 'onDelete': 'SET NULL'});

  /**
   * The `activity_type` table will keep track of the different activities that can occur
   * and the weights that are associated with them.
   *
   * @property  {String}      type                    The type of activity. For example `like`, `comment`, ..
   * @property  {Number}      points                  The number of points this activity contributes towards a user's engagement index score
   * @property  {Boolean}     enabled                 Whether activities of this type should contributed towards a user's engagement index score
   */
  var ActivityType = module.exports.ActivityType = sequelize.define('activity_type', {
    'type': {
      'type': Sequelize.ENUM(CollabosphereConstants.ACTIVITY.ACTIVITY_TYPES),
      'allowNull': false
    },
    'points': {
      'type': Sequelize.INTEGER,
      'allowNull': false
    },
    'enabled': {
      'type': Sequelize.BOOLEAN,
      'defaultValue': true,
      'allowNull': false
    }
  }, {
    'underscored': true
  });

  // Each activity type belongs to a specific course
  ActivityType.belongsTo(Course, {
    'onDelete': 'CASCADE',
    'foreignKey': {
      'name': 'course_id',
      'allowNull': false
    }
  });

  // Each activity has one activity type
  Activity.belongsTo(ActivityType, {
    'onDelete': 'CASCADE',
    'foreignKey': {
      'name': 'activitytype_id',
      'allowNull': false
    }
  });

  /**
   * The `asset` table will keep track of each asset that needs to be displayed in the asset library
   *
   * @property {String}       type                    The type of asset
   * @property {String}       title                   The title of the asset
   * @property {Number}       [canvas_assignment_id]  The id of the assignment if the asset was submitted as part of an assignment in canvas
   * @property {String}       [description]           The description of the asset
   * @property {String}       [thumbnail_url]         The thumbnail url of the asset
   * @property {String}       [large_url]             The large url of the asset
   * @property {String}       [url]                   The url of the asset
   * @property {String}       [source]                The source of the asset
   * @property {String}       [body]                  The body of the asset
   * @property {Number}       likes                   The number of likes on the asset
   * @property {Number}       dislikes                The number of of dislikes on the asset
   * @property {Number}       views                   The number of times the asset has been viewed
   * @property {Number}       comment_count           The number of comments on the asset
   */
  var Asset = module.exports.Asset = sequelize.define('asset', {
    'type': {
      'type': Sequelize.ENUM(CollabosphereConstants.ASSET.ASSET_TYPES),
      'allowNull': false
    },
    'title': {
      'type': Sequelize.STRING,
      'allowNull': true
    },
    'canvas_assignment_id': {
      'type': Sequelize.INTEGER,
      'allowNull': true
    },
    'description': {
      'type': Sequelize.TEXT,
      'allowNull': true
    },
    'thumbnail_url': {
      'type': Sequelize.STRING,
      'allowNull': true
    },
    'large_url': {
      'type': Sequelize.STRING,
      'allowNull': true
    },
    'url': {
      'type': Sequelize.STRING,
      'allowNull': true
    },
    'mime': {
      'type': Sequelize.STRING,
      'allowNull': true
    },
    'source': {
      'type': Sequelize.STRING,
      'allowNull': true
    },
    'body': {
      'type': Sequelize.TEXT,
      'allowNull': true
    },
    'likes': {
      'type': Sequelize.INTEGER,
      'defaultValue': 0
    },
    'dislikes': {
      'type': Sequelize.INTEGER,
      'defaultValue': 0
    },
    'views': {
      'type': Sequelize.INTEGER,
      'defaultValue': 0
    },
    'comments': {
      'type': Sequelize.INTEGER,
      'defaultValue': 0
    }
  }, {
    'underscored': true
  });

  // Each asset belongs to a specific course
  Asset.belongsTo(Course, {
    'onDelete': 'CASCADE',
    'foreignKey': {
      'name': 'course_id',
      'allowNull': false
    }
  });

  // Each asset is created by a specific user
  Asset.belongsTo(User, {
    'onDelete': 'CASCADE',
    'foreignKey': {
      'name': 'user_id',
      'allowNull': false
    }
  });

  /**
   * The `comment` table keeps track of comments that were made on assets
   *
   * @property  {String}      body                    The body of the comment
   */
  var Comment = module.exports.Comment = sequelize.define('comment', {
    'body': {
      'type': Sequelize.TEXT,
      'allowNull': false
    }
  }, {
    'underscored': true
  });

  // Each comment is made on an asset
  Comment.belongsTo(Asset, {
    'onDelete': 'CASCADE',
    'foreignKey': {
      'name': 'asset_id',
      'allowNull': false
    }
  });

  // Each comment is made by a user. We do not remove comments if a user is removed from the system
  Comment.belongsTo(User);

  // A comment can have a parent, technically this could allow for multi-level nesting
  // but we will only use this for 1-level nesting
  Comment.hasOne(Comment, {'as': 'parent_id'});

  /**
   * The `category` table keeps track of which categories assets can be tagged with
   *
   * @property  (String)      display_name            The name of the category
   */
  var Category = module.exports.Category = sequelize.define('category', {
    'display_name': {
      'type': Sequelize.STRING,
      'allowNull': false
    }
  }, {
    'underscored': true
  });

  // A course can have multiple categories
  Course.hasMany(Category);

  // An asset can have multiple categories
  Asset.belongsToMany(Category, {'through': 'assets_categories'});
};
