/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var config = require('config');
var express = require('express');
var fs = require('fs');
var path = require('path');
var util = require('util');

var UsersAPI = require('col-users');

var DB = require('./db');
var log = require('./logger')('col-core');
var Modules = require('./modules');
var Server = require('./server');

/**
 * Initialize the Collabosphere LTI tools
 *
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var init = module.exports.init = function(callback) {
  // All unexpected or uncaught errors will be caught and logged here
  process.on('uncaughtException', function(err) {
    log.error({'err': err}, 'An uncaught exception was raised');
  });

  // Initialize the database
  DB.init(function() {
    // Initialize the modules
    Modules.init(function() {
      // Initialize the Express server
      initializeServer(callback);
    });
  });
};

/**
 * Initialize the Collabosphere app server and initialize the REST API endpoints
 *
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @api private
 */
var initializeServer = function(callback) {
  // Initialize the Express server
  var appServer = module.exports.appServer = Server.setUpServer();

  // A router for all routes on /lti
  var ltiRouter = module.exports.ltiRouter = express.Router();
  appServer.use('/lti', ltiRouter);

  // A router for all routes on /api/:api_domain/:course_id
  var apiRouter = module.exports.apiRouter = express.Router();

  // Set up the authorization middleware
  initializeAuthorizationMiddleware(apiRouter);

  // Add the api router
  appServer.use('/api/:apidomain/:course', apiRouter);

  // Check if a `rest.js` file exists in the `lib` folder in each
  // module. If such a file exists, we require it. This allows other
  // modules to add in their own REST apis
  var collabosphereModules = Modules.getAvailableModules();
  _.each(collabosphereModules, function(module) {
    var restFile = path.join(__dirname, '../..', module, '/lib/rest.js');
    if (fs.existsSync(restFile)) {
      log.debug({'module': module}, util.format('Registering REST APIs for %s', module));
      require(module + '/lib/rest');
    }
  });
  log.info('Finished initializing REST APIs');

  return callback();
};

/**
 * Authorization for Collabosphere can happen in 2 different ways. First of all, the user
 * can be authorized to interact with a course through a valid LTI launch of a Collabosphere
 * tool in that course. When a successful LTI launch has taken place, a cookie will be
 * set to authorize the user to use the REST APIs for that course.
 * However, Collabosphere also provides a Bookmarklet that allows the user to interact
 * with the Collabosphere APIs through a browser bookmarklet. As this is not preceded by
 * a successful LTI launch, we provide a way in which a user can be authorized to interact
 * with a course by passing in a personal course-bound bookmarklet access token.
 *
 * @param  {Object}         apiRouter       The router for all routes on /api/:api_domain/:course_id
 * @api private
 */
var initializeAuthorizationMiddleware = function(apiRouter) {
  // 1. Check if the user is authorized by passing in a valid Bookmarklet token. This requires
  // two custom headers to be sent along with the REST API request:
  //  - `x-collabosphere-user`: the user id of the user using the Bookmarklet
  //  - `x-collabosphere-token`: the bookmarklet access token of the user using the Bookmarklet
  apiRouter.use(function(req, res, next) {
    // Extract the user id and bookmarklet token from the request headers
    var userId = req.headers['x-collabosphere-user'];
    var bookmarkletToken = req.headers['x-collabosphere-token'];

    // If the custom headers are not present, move on through the middleware chain
    if (!userId || !bookmarkletToken) {
      return next();
    }

    // Get the user for the provided bookmarklet token
    UsersAPI.getUserByBookmarkletToken(userId, bookmarkletToken, function(err, user) {
      if (err) {
        log.error({'err': err}, 'Unauthorized bookmarklet authentication attempt');
        return next();
      }

      // Add the current user and course to the request
      setRequestContext(req, user);
      return next();
    });
  });

  // 2. Check if the user is authorized to interact with the given course through a cookie that
  //    was set when launching the LTI tool
  apiRouter.use(function(req, res, next) {
    // If the request already has a context object, a successful bookmarklet token has taken
    // place and we can continue moving through the middleware
    if (req.ctx) {
      return next();
    }

    // Extract the API domain and course id from the API URL. The expected format for all API urls
    // is `/api/ucberkeley.canvas.com/21312`
    var apiDomain = req.baseUrl.split('/')[2];
    var courseId = req.baseUrl.split('/')[3];

    // Get the user id from the client's cookies. As a user can have multiple tools open
    // in multiple courses, we have a cookie per domain/course tuple
    var cookieName = apiDomain + '_' + courseId;
    var userId = req.signedCookies[cookieName];

    // If no user id could be found, we bail out immediately
    if (!userId) {
      return res.status(401).send('Incorrect cookie information present');
    }

    // Get the user
    UsersAPI.getUser(userId, function(err, user) {
      if (err) {
        return callback(err);
      }

      // Add the current user and course to the request object
      setRequestContext(req, user);

      return next();
    });
  });
};

/**
 * Set a context on the request that contains information about the current user
 * and the current course
 *
 * @param  {Object}         req             The express request object to set the context on
 * @param  {User}           user            The current user
 * @api private
 */
var setRequestContext = function(req, user, apiDomain) {
  req.ctx = {
    'user': user,
    'course': user.course
  };
};
