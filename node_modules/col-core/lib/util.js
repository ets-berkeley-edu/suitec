/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * Get a numeric parameter as specified by `value`. If `value` is not a valid number,
 * `defaultValue` will be returned instead. If a minimum is specified and `value` is
 * smaller than the minimum, the minimum will be returned. If a maximum is specified
 * and `value` is larger than the maximum, the maximum will be returned
 *
 * @param  {String|Number}      value           The value to try and convert to an integer
 * @param  {Number}             defaultValue    The value to return if `value` is not a valid integer
 * @param  {Number}             [minimum]       A lower bound for `value`. If this is not provided, no bounding will be applied
 * @param  {Number}             [maximum]       An upper bound for `value`. If this is not provided, no bounding will be applied
 * @return {Number}                             `value` converted to an integer without the specified bounds. Otherwise, `defaultValue` is returned
 */
var getNumberParam = module.exports.getNumberParam = function(value, defaultValue, minimum, maximum) {
  value = parseInt(value, 10);
  value = (isNaN(value)) ? defaultValue : value;
  if ((minimum || minimum === 0) && value < minimum) {
    value = minimum;
  }
  if ((maximum || maximum === 0) && value > maximum) {
    value = maximum;
  }
  return value;
};
