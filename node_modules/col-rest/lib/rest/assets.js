/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

module.exports = function(client) {
  client.assets = {};
  client.assets.bookmarklet = {};

  /**
   * Get an asset
   *
   * @param  {Course}         course                          The Canvas course in which the user is interacting with the API
   * @param  {Number}         id                              The id of the asset
   * @param  {Boolean}        [incrementViews]                Whether the total number of views for the asset should be incremented by 1
   * @param  {Function}       callback                        Standard callback function
   * @param  {Object}         callback.err                    An error that occurred, if any
   * @param  {Object}         callback.body                   The JSON response from the REST API
   * @param  {Response}       callback.response               The response object as returned by requestjs
   * @see col-assets/lib/rest.js for more information
   */
  client.assets.getAsset = function(course, id, incrementViews, callback) {
    var requestUrl = client.util.apiPrefix(course) + '/assets/' + client.util.encodeURIComponent(id);
    var data = {
      'incrementViews': incrementViews
    };
    client.request(requestUrl, 'GET', data, null, callback);
  };

  /**
   * Get the assets for the current course
   *
   * @param  {Course}         course                          The Canvas course in which the user is interacting with the API
   * @param  {Number}         [limit]                         The maximum number of results to retrieve. Defaults to 10
   * @param  {Number}         [offset]                        The number to start paging from. Defaults to 0
   * @param  {Function}       callback                        Standard callback function
   * @param  {Object}         callback.err                    An error that occurred, if any
   * @param  {Object}         callback.body                   The JSON response from the REST API
   * @param  {Response}       callback.response               The response object as returned by requestjs
   * @see col-assets/lib/rest.js for more information
   */
  client.assets.getAssets = function(course, limit, offset, callback) {
    var requestUrl = client.util.apiPrefix(course) + '/assets';
    var data = {
      'limit': limit,
      'offset': offset
    };
    client.request(requestUrl, 'GET', data, null, callback);
  };

  /**
   * Create a new link asset
   *
   * @param  {Course}         course                          The Canvas course in which the user is interacting with the API
   * @param  {String}         title                           The title of the link
   * @param  {String}         url                             The url of the link
   * @param  {Object}         [opts]                          A set of optional parameters
   * @param  {Number[]}       [opts.categories]               The ids of the categories to which the link should be associated
   * @param  {String}         [opts.description]              The description of the link
   * @param  {String}         [opts.source]                   The source of the link
   * @param  {Function}       callback                        Standard callback function
   * @param  {Object}         callback.err                    An error that occurred, if any
   * @param  {Object}         callback.body                   The JSON response from the REST API
   * @param  {Response}       callback.response               The response object as returned by requestjs
   * @see col-assets/lib/rest.js for more information
   */
  client.assets.createLink = function(course, title, url, opts, callback) {
    opts = opts || {};

    var requestUrl = client.util.apiPrefix(course) + '/assets';
    var data = {
      'type': 'link',
      'title': title,
      'url': url,
      'categories': opts.categories,
      'description': opts.description,
      'source': opts.source
    };
    client.request(requestUrl, 'POST', data, null, callback);
  };

  /**
   * Create a new link asset using a bookmarklet token
   *
   * @param  {Course}         course                          The Canvas course in which the user is interacting with the API
   * @param  {String}         userId                          The id of the user creating the link
   * @param  {String}         bookmarkletToken                The bookmarklet access token for the user
   * @param  {String}         title                           The title of the link
   * @param  {String}         url                             The url of the link
   * @param  {Object}         [opts]                          A set of optional parameters
   * @param  {Number[]}       [opts.categories]               The ids of the categories to which the link should be associated
   * @param  {String}         [opts.description]              The description of the link
   * @param  {String}         [opts.source]                   The source of the link
   * @param  {Function}       callback                        Standard callback function
   * @param  {Object}         callback.err                    An error that occurred, if any
   * @param  {Object}         callback.body                   The JSON response from the REST API
   * @param  {Response}       callback.response               The response object as returned by requestjs
   * @see col-assets/lib/rest.js for more information
   */
  client.assets.bookmarklet.createLink = function(course, userId, bookmarkletToken, title, url, opts, callback) {
    opts = opts || {};

    var requestUrl = client.util.apiPrefix(course) + '/assets';
    var data = {
      'type': 'link',
      'title': title,
      'url': url,
      'categories': opts.categories,
      'description': opts.description,
      'source': opts.source
    };
    var headers = {
      'x-collabosphere-user': userId,
      'x-collabosphere-token': bookmarkletToken
    };
    client.request(requestUrl, 'POST', data, headers, callback);
  };

  /**
   * Create a new file asset
   *
   * @param  {Course}         course                          The Canvas course in which the user is interacting with the API
   * @param  {String}         title                           The title of the file
   * @param  {Stream}         file                            The file to upload
   * @param  {Object}         [opts]                          A set of optional parameters
   * @param  {Number[]}       [opts.categories]               The ids of the categories to which the file should be associated
   * @param  {String}         [opts.description]              The description of the file
   * @param  {String}         [opts.source]                   The source of the file
   * @param  {Function}       callback                        Standard callback function
   * @param  {Object}         callback.err                    An error that occurred, if any
   * @param  {Object}         callback.body                   The JSON response from the REST API
   * @param  {Response}       callback.response               The response object as returned by requestjs
   * @see col-assets/lib/rest.js for more information
   */
  client.assets.createFile = function(course, title, file, opts, callback) {
    opts = opts || {};

    var requestUrl = client.util.apiPrefix(course) + '/assets';
    var data = {
      'type': 'file',
      'title': title,
      'file': file,
      'categories': opts.categories,
      'description': opts.description,
      'source': opts.source
    };
    client.request(requestUrl, 'POST', data, null, callback);
  };

  /**
   * Edit an asset
   *
   * @param  {Course}         course                          The Canvas course in which the user is interacting with the API
   * @param  {Number}         id                              The id of the asset that is being edited
   * @param  {String}         title                           The updated title of the asset
   * @param  {Object}         [opts]                          A set of optional parameters
   * @param  {Number[]}       [opts.categories]               The updated ids of the categories to which the asset should be associated
   * @param  {String}         [opts.description]              The updated description of the asset
   * @param  {Function}       callback                        Standard callback function
   * @param  {Object}         callback.err                    An error that occurred, if any
   * @param  {Object}         callback.body                   The JSON response from the REST API
   * @param  {Response}       callback.response               The response object as returned by requestjs
   * @see col-assets/lib/rest.js for more information
   */
  client.assets.editAsset = function(course, id, title, opts, callback) {
    opts = opts || {};

    var requestUrl = client.util.apiPrefix(course) + '/assets/' + client.util.encodeURIComponent(id);
    var data = {
      'title': title,
      'categories': opts.categories,
      'description': opts.description
    };
    client.request(requestUrl, 'POST', data, null, callback);
  };

  /**
   * Create a new comment on an asset
   *
   * @param  {Course}         course                          The Canvas course in which the user is interacting with the API
   * @param  {Number}         assetId                         The id of the asset to which the comment is added
   * @param  {String}         body                            The body of the comment
   * @param  {Number}         [parent]                        The id of the comment to which the comment is a reply
   * @param  {Function}       callback                        Standard callback function
   * @param  {Object}         callback.err                    An error that occurred, if any
   * @param  {Object}         callback.body                   The JSON response from the REST API
   * @param  {Response}       callback.response               The response object as returned by requestjs
   * @see col-assets/lib/rest.js for more information
   */
  client.assets.createComment = function(course, assetId, body, parent, callback) {
    var requestUrl = client.util.apiPrefix(course) + '/assets/' + client.util.encodeURIComponent(assetId) + '/comments';
    var data = {
      'body': body,
      'parent': parent
    };
    client.request(requestUrl, 'POST', data, null, callback);
  };

  /**
   * Edit a comment on an asset
   *
   * @param  {Course}         course                          The Canvas course in which the user is interacting with the API
   * @param  {Number}         assetId                         The id of the asset to which the comment belongs
   * @param  {Number}         id                              The id of the comment that is being edited
   * @param  {String}         body                            The updated comment body
   * @param  {Function}       callback                        Standard callback function
   * @param  {Object}         callback.err                    An error that occurred, if any
   * @param  {Object}         callback.body                   The JSON response from the REST API
   * @param  {Response}       callback.response               The response object as returned by requestjs
   * @see col-assets/lib/rest.js for more information
   */
  client.assets.editComment = function(course, assetId, id, body, callback) {
    var requestUrl = client.util.apiPrefix(course) + '/assets/' + client.util.encodeURIComponent(assetId) + '/comments/' + client.util.encodeURIComponent(id);
    var data = {
      'body': body
    };
    client.request(requestUrl, 'POST', data, null, callback);
  };

  /**
   * Delete a comment on an asset
   *
   * @param  {Course}         course                          The Canvas course in which the user is interacting with the API
   * @param  {Number}         assetId                         The id of the asset to which the comment belongs
   * @param  {Number}         id                              The id of the comment that is being deleted
   * @param  {Function}       callback                        Standard callback function
   * @param  {Object}         callback.err                    An error that occurred, if any
   * @param  {Object}         callback.body                   The JSON response from the REST API
   * @param  {Response}       callback.response               The response object as returned by requestjs
   * @see col-assets/lib/rest.js for more information
   */
  client.assets.deleteComment = function(course, assetId, id, callback) {
    var requestUrl = client.util.apiPrefix(course) + '/assets/' + client.util.encodeURIComponent(assetId) + '/comments/' + client.util.encodeURIComponent(id);
    client.request(requestUrl, 'DELETE', null, null, callback);
  };

  /**
   * Like or dislike an asset
   *
   * @param  {Course}         course                          The Canvas course in which the user is interacting with the API
   * @param  {Number}         assetId                         The id of the asset that is liked or disliked
   * @param  {Boolean}        like                            `true` when the asset should be liked, `false` when the asset should be disliked. When `null` is provided, the previous like or dislike will be undone
   * @param  {Function}       callback                        Standard callback function
   * @param  {Object}         callback.err                    An error that occurred, if any
   * @param  {Object}         callback.body                   The JSON response from the REST API
   * @param  {Response}       callback.response               The response object as returned by requestjs
   * @see col-assets/lib/rest.js for more information
   */
  client.assets.like = function(course, assetId, like, callback) {
    var requestUrl = client.util.apiPrefix(course) + '/assets/' + client.util.encodeURIComponent(assetId) + '/like';
    var data = {
      'like': like
    };
    client.request(requestUrl, 'POST', data, null, callback);
  };
};
