/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');
var csv = require('fast-csv');

var AssetsTestUtil = require('col-assets/tests/util');
var TestsUtil = require('col-tests');
var UsersTestUtil = require('col-users/tests/util');

var ActivitiesDefaults = require('col-activities/lib/default');

/* Activities */

/**
 * Assert that the activities for a course can be exported as a CSV file
 *
 * @param  {RestClient}         client                            The REST client to make the request with
 * @param  {Course}             course                            The Canvas course in which the user is interacting with the API
 * @param  {Number}             expectedRows                      The expected number of rows in the CSV export
 * @param  {Function}           callback                          Standard callback function
 * @param  {String}             callback.activities               A CSV export of the activities for the course
 */
var assertExportActivities = module.exports.assertExportActivities = function(client, course, expectedRows, callback) {
  // Get the activity type configuration for the course
  assertGetActivityTypeConfiguration(client, course, function(configuration) {

    client.activities.exportActivities(course, function(err, activities, response) {
      assert.ok(!err);

      // Assert the correct filename is returned
      assert.ok(response.headers['content-disposition']);
      var headerRegex = /attachment; filename="engagement_index_activities_[0-9]+_[0-9]{4}_[0-9]{2}_[0-9]{2}_[0-9]{2}_[0-9]{2}.csv/;
      assert.ok(headerRegex.test(response.headers['content-disposition']));

      // If no rows are expected to be returned, the response should be empty
      if (expectedRows === 0) {
        assert.ok(!activities);
        return callback();
      } else {
        // Parse the CSV file
        var rows = [];
        csv.fromString(activities, {'headers': true})
        .on('data', function(exportActivity) {

          // Ensure that all expected properties are present
          assert.ok(exportActivity.user_id);
          assert.ok(exportActivity.user_name);
          assert.ok(exportActivity.action);
          assert.ok(exportActivity.date);
          assert.ok(exportActivity.score);
          assert.ok(exportActivity.running_total);

          // Ensure that the score has the expected value
          var expectedScore = _.findWhere(configuration, {'type': exportActivity.action}).points;
          assert.strictEqual(parseInt(exportActivity.score, 10), expectedScore);

          rows.push(exportActivity);
        }).on('end', function() {
          assert.strictEqual(rows.length, expectedRows);
          return callback(rows);
        });
      }
    });
  });
};

/**
 * Assert that the activities for a course can not be exported as a CSV file
 *
 * @param  {RestClient}         client                            The REST client to make the request with
 * @param  {Course}             course                            The Canvas course in which the user is interacting with the API
 * @param  {Number}             code                              The expected HTTP error code
 * @param  {Function}           callback                          Standard callback function
 */
var assertExportActivitiesFails = module.exports.assertExportActivitiesFails = function(client, course, code, callback) {
  client.activities.exportActivities(course, function(err, activities) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!activities);

    return callback();
  });
};

/**
 * Assert that an activity has increased the points for a user by the expected amount
 *
 * @param  {RestClient}         client                            The REST client to make the request with
 * @param  {Course}             course                            The Canvas course in which the user is interacting with the API
 * @param  {Me}                 originalMe                        The me object before the activity took place
 * @param  {Number}             expectedIncrease                  The expected increase in points for the user
 * @param  {Boolean}            expectLastActivityUpdate          Whether the last activity timestamp is expected to be updated
 * @param  {Function}           callback                          Standard callback function
 * @api private
 */
var assertPoints = function(client, course, originalMe, expectedIncrease, expectLastActivityUpdate, callback) {
  // Verify that the points for the user have increased as expected
  UsersTestUtil.assertGetMe(client, course, null, function(me) {
    var expectedPoints = originalMe.points + expectedIncrease;
    assert.strictEqual(me.points, expectedPoints);
    if (expectLastActivityUpdate) {
      assert.ok(me.last_activity);
      if (!_.isNull(originalMe.last_activity)) {
        assert.ok(me.last_activity > originalMe.last_activity);
      }
    } else {
      assert.strictEqual(me.last_activity, originalMe.last_activity);
    }

    // Ensure that the user is sharing their points with the course
    UsersTestUtil.assertUpdateSharePoints(client, course, true, function(me) {
      assert.strictEqual(me.points, expectedPoints);
      if (expectLastActivityUpdate) {
        assert.ok(me.last_activity);
        if (!_.isNull(originalMe.last_activity)) {
          assert.ok(me.last_activity > originalMe.last_activity);
        }
      } else {
        assert.strictEqual(me.last_activity, originalMe.last_activity);
      }

      // Verify that the points are reflected in the list of users
      UsersTestUtil.assertGetLeaderboard(client, course, null, false, function(users) {
        var user = _.findWhere(users, {'id': me.id});
        assert.strictEqual(user.points, expectedPoints);
        if (expectLastActivityUpdate) {
          assert.ok(user.last_activity);
          if (!_.isNull(originalMe.last_activity)) {
            assert.ok(user.last_activity > originalMe.last_activity);
          }
        } else {
          assert.strictEqual(user.last_activity, originalMe.last_activity);
        }

        return callback();
      });
    });
  });
};

/**
 * Assert that a new link asset can be created and activity points are earned
 *
 * @param  {RestClient}         client                            The REST client to make the request with
 * @param  {Course}             course                            The Canvas course in which the user is interacting with the API
 * @param  {String}             title                             The title of the link
 * @param  {String}             url                               The url of the link
 * @param  {Object}             [opts]                            A set of optional parameters
 * @param  {Number[]}           [opts.categories]                 The ids of the categories to which the link should be associated
 * @param  {String}             [opts.description]                The description of the link
 * @param  {String}             [opts.source]                     The source of the link
 * @param  {Function}           callback                          Standard callback function
 * @param  {Asset}              callback.asset                    The created link asset
 * @throws {AssertionError}                                       Error thrown when an assertion failed
 */
var assertCreateLinkActivity = module.exports.assertCreateLinkActivity = function(client, course, title, url, opts, callback) {
  // Get the points that are earned when creating a new link asset
  assertGetActivityTypeConfiguration(client, course, function(configuration) {
    var activityPoints = _.findWhere(configuration, {'type': 'add_asset'}).points;

    // Get the me object for the current user
    UsersTestUtil.assertGetMe(client, course, null, function(me) {
      // Create the link asset
      AssetsTestUtil.assertCreateLink(client, course, title, url, opts, function(asset) {
        // Verify that the points for the user have increased
        assertPoints(client, course, me, activityPoints, true, function() {

          return callback(asset);
        });
      });
    });
  });
};

// Comment

/**
 * Assert that an asset can be liked or disliked and activity points are earned
 *
 * @param  {RestClient}         likerClient                     The REST client representing the user liking or disliking the asset
 * @param  {RestClient}         creatorClient                   The REST client representing the user that created the asset
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset that is liked or disliked
 * @param  {Boolean}            [like]                          `true` when the asset should be liked, `false` when the asset should be disliked. When `null` is provided, the previous like or dislike will be undone
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertLikeActivity = module.exports.assertLikeActivity = function(likerClient, creatorClient, course, assetId, like, callback) {
  // Get the points that are earned when liking or disliking an asset
  assertGetActivityTypeConfiguration(likerClient, course, function(configuration) {
    var likePoints = _.findWhere(configuration, {'type': 'like'}).points;
    var dislikePoints = _.findWhere(configuration, {'type': 'dislike'}).points;
    var getLikePoints = _.findWhere(configuration, {'type': 'get_like'}).points;
    var getDislikePoints = _.findWhere(configuration, {'type': 'get_dislike'}).points;

    // Get the me object for the user liking or disliking the asset
    UsersTestUtil.assertGetMe(likerClient, course, null, function(likerMe) {
      // Get the me object for the user that created the asset
      UsersTestUtil.assertGetMe(creatorClient, course, null, function(creatorMe) {

        // Get the asset that is being liked or disliked
        AssetsTestUtil.assertGetAsset(likerClient, course, assetId, null, null, function(asset) {
          // Like or dislike the asset
          AssetsTestUtil.assertLike(likerClient, course, asset.id, like, function() {

            // The asset was not liked or disliked before
            if (asset.liked === null) {
              // No point changes are expected
              if (like === null) {
                assertPoints(likerClient, course, likerMe, 0, false, function() {
                  assertPoints(creatorClient, course, creatorMe, 0, false, callback);
                });
              // Points for liking are expected to be rewarded to the user liking and the user receiving the like
              } else if (like === true) {
                assertPoints(likerClient, course, likerMe, likePoints, true, function() {
                  assertPoints(creatorClient, course, creatorMe, getLikePoints, false, callback);
                });
              // Points for disliking are expected to be rewarded to the user disliking and the user receiving the dislike
              } else if (like === false) {
                assertPoints(likerClient, course, likerMe, dislikePoints, true, function() {
                  assertPoints(creatorClient, course, creatorMe, getDislikePoints, false, callback);
                });
              }
            // The asset was liked before
            } else if (asset.liked === true) {
              // Points for liking are expected to be removed from the user that liked and the user that received the like
              if (like === null) {
                assertPoints(likerClient, course, likerMe, -likePoints, false, function() {
                  assertPoints(creatorClient, course, creatorMe, -getLikePoints, false, callback);
                });
              // No point changes are expected
              } else if (like === true) {
                assertPoints(likerClient, course, likerMe, 0, true, function() {
                  assertPoints(creatorClient, course, creatorMe, 0, false, callback);
                });
              // Points for liking are expected to be removed from the user that liked and the user that received the like
              // and points for disliking are expected to be rewarded to the user disliking and the user receiving the dislike
              } else if (like === false) {
                assertPoints(likerClient, course, likerMe, dislikePoints - likePoints, true, function() {
                  assertPoints(creatorClient, course, creatorMe, getDislikePoints - getLikePoints, false, callback);
                });
              }
            // The asset was disliked before
            } else if (asset.liked === false) {
              // Points for disliking are expected to be removed from the user that disliked and the user that received the dislike
              if (like === null) {
                assertPoints(likerClient, course, likerMe, -dislikePoints, false, function() {
                  assertPoints(creatorClient, course, creatorMe, -getDislikePoints, false, callback);
                });
              // Points for disliking are expected to be removed from the user that disliked and the user that received the dislike
              // and points for liking are expected to be rewarded to the user liking and the user receiving the like
              } else if (like === true) {
                assertPoints(likerClient, course, likerMe, likePoints - dislikePoints, true, function() {
                  assertPoints(creatorClient, course, creatorMe, getLikePoints - getDislikePoints, false, callback);
                });
              // No point changes are expected
              } else if (like === false) {
                assertPoints(likerClient, course, likerMe, 0, true, function() {
                  assertPoints(creatorClient, course, creatorMe, 0, false, callback);
                });
              }
            }
          });
        });
      });
    });
  });
};

/* Points configuration */

/**
 * Assert that an activity type configuration has all expected properties
 *
 * @param  {ActivityType}       activityType                      The activity type to assert the properties for
 * @param  {Object}             [opts]                            Optional parameters to verify the activity type with
 * @param  {Category}           [opts.expectedActivityType]       The activity type to which the provided activity type should be compared
 * @throws {AssertionError}                                       Error thrown when an assertion failed
 */
var assertActivityType = module.exports.assertActivityType = function(activityType, opts) {
  opts = opts || {};

  // Ensure that all expected properties are present
  assert.ok(activityType);
  assert.ok(activityType.type);
  assert.ok(_.findWhere(ActivitiesDefaults, {'type': activityType.type}));
  assert.ok(activityType.title);
  assert.ok(_.isFinite(activityType.points));
  assert.ok(_.isBoolean(activityType.enabled));

  // Ensure that all the activity type configuration properties are the same as the ones for
  // the expected activity type configuration
  if (opts.expectedActivityType) {
    assert.strictEqual(activityType.type, opts.expectedActivityType.type);
    assert.strictEqual(activityType.title, opts.expectedActivityType.title);
    assert.strictEqual(activityType.points, opts.expectedActivityType.points);
    assert.strictEqual(activityType.enabled, opts.expectedActivityType.enabled);
  }
};

/**
 * Assert that the activity type configration for a course can be retrieved
 *
 * @param  {RestClient}         client                            The REST client to make the request with
 * @param  {Course}             course                            The Canvas course in which the user is interacting with the API
 * @param  {Function}           callback                          Standard callback function
 * @param  {Object}             callback.configuration            The activity type configuration for the course
 * @throws {AssertionError}                                       Error thrown when an assertion failed
 */
var assertGetActivityTypeConfiguration = module.exports.assertGetActivityTypeConfiguration = function(client, course, callback) {
  client.activities.getActivityTypeConfiguration(course, function(err, configuration) {
    assert.ok(!err);
    assert.ok(configuration);
    // Verify that a configuration for all activity types is present
    assert.strictEqual(configuration.length, ActivitiesDefaults.length);
    _.each(ActivitiesDefaults, function(activityTypeDefault) {
      assertActivityType(_.findWhere(configuration, {'type': activityTypeDefault.type}));
    });

    return callback(configuration);
  });
};

/**
 * Assert that the activity type configration for a course can not be retrieved
 *
 * @param  {RestClient}         client                            The REST client to make the request with
 * @param  {Course}             course                            The Canvas course in which the user is interacting with the API
 * @param  {Number}             code                              The expected HTTP error code
 * @param  {Function}           callback                          Standard callback function
 * @param  {Object}             callback.configuration            The activity type configuration for the course
 * @throws {AssertionError}                                       Error thrown when an assertion failed
 */
var assertGetActivityTypeConfigurationFails = module.exports.assertGetActivityTypeConfigurationFails = function(client, course, code, callback) {
  client.activities.getActivityTypeConfiguration(course, function(err, configuration) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!configuration);

    return callback();
  });
};

/**
 * Assert that the configuration for an activity type in a course can be edited
 *
 * @param  {RestClient}         client                            The REST client to make the request with
 * @param  {Course}             course                            The Canvas course in which the user is interacting with the API
 * @param  {Object[]}           activityTypeUpdates               Activity type configuration overrides that should be aplied to the activity type configuration for the course
 * @param  {String}             activityTypeUpdates.type          The type of the activity type configuration override. One of the types in `col-activities/lib/constants.js`
 * @param  {Number}             [activityTypeUpdates.points]      The number of points this activity type should contribute towards a user's points
 * @param  {Boolean}            [activityTypeUpdates.enabled]     Whether activities of this type should contribute towards a user's points
 * @param  {Function}           callback                          Standard callback function
 * @throws {AssertionError}                                       Error thrown when an assertion failed
 */
var assertEditActivityTypeConfiguration = module.exports.assertEditActivityTypeConfiguration = function(client, course, activityTypeUpdates, callback) {
  client.activities.editActivityTypeConfiguration(course, activityTypeUpdates, function(err) {
    assert.ok(!err);

    // Verify that the activity type configuration overrides have been applied
    assertGetActivityTypeConfiguration(client, course, function(configuration) {
      _.each(activityTypeUpdates, function(activityTypeUpdate) {
        var activityType = _.findWhere(configuration, {'type': activityTypeUpdate.type});
        if (!_.isUndefined(activityTypeUpdate.points)) {
          assert.strictEqual(activityType.points, activityTypeUpdate.points);
        }
        if (!_.isUndefined(activityTypeUpdate.enabled)) {
          assert.strictEqual(activityType.enabled, activityTypeUpdate.enabled);
        }
      });

      return callback();
    });
  });
};

/**
 * Assert that the configuration for an activity type in a course can be edited
 *
 * @param  {RestClient}         client                            The REST client to make the request with
 * @param  {Course}             course                            The Canvas course in which the user is interacting with the API
 * @param  {Object[]}           activityTypeUpdates               Activity type configuration overrides that should be aplied to the activity type configuration for the course
 * @param  {String}             activityTypeUpdates.type          The type of the activity type configuration override. One of the types in `col-activities/lib/constants.js`
 * @param  {Number}             [activityTypeUpdates.points]      The number of points this activity type should contribute towards a user's points
 * @param  {Boolean}            [activityTypeUpdates.enabled]     Whether activities of this type should contribute towards a user's points
 * @param  {Number}             code                              The expected HTTP error code
 * @param  {Function}           callback                          Standard callback function
 * @throws {AssertionError}                                       Error thrown when an assertion failed
 */
var assertEditActivityTypeConfigurationFails = module.exports.assertEditActivityTypeConfigurationFails = function(client, course, activityTypeUpdates, code, callback) {
  client.activities.editActivityTypeConfiguration(course, activityTypeUpdates, function(err) {
    assert.ok(err);
    assert.strictEqual(err.code, code);

    return callback();
  });
};
