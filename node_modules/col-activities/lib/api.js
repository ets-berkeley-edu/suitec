/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var Joi = require('joi');

var DB = require('col-core/lib/db');
var log = require('col-core/lib/logger')('col-activities');

var ActivitiesDefaults = require('./default');

/* Activities */

/**
 * Create an activity that contributes points to the engagement index
 *
 * @param  {Course}           course                          The course to which the activity should be associated
 * @param  {User}             user                            The user earning activity points for the activity
 * @param  {String}           type                            The type of the activity. One of the types in `col-activities/lib/constants.js`
 * @param  {Number}           objectId                        The id of the object on which the activity is taking place (e.g., the asset id, the comment id, etc.)
 * @param  {String}           objectType                      The type of the object on which the activity is taking place. One of `CollabosphereConstants.ACTIVITY.OBJECT_TYPES`
 * @param  {User}             [actor]                         The user performing the activity when different than the user earning activity points
 * @param  {Function}         callback                        Standard callback function
 * @param  {Object}           callback.err                    An error that occurred, if any
 * @param  {Activity}         callback.activity               The created activity
 */
var createActivity = module.exports.createActivity = function(course, user, type, objectId, objectType, actor, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'type': Joi.any().valid(_.pluck(ActivitiesDefaults, 'type')).required()
  });

  var validationResult = Joi.validate({
    'type': type
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Create the activity in the DB
  var activity = {
    'course_id': course.id,
    'user_id': user.id,
    'type': type,
    'object_type': objectType
  };
  if (objectType === 'asset') {
    activity.asset_id = objectId;
  } else {
    activity.object_id = objectId;
  }
  if (actor) {
    activity.actor = actor.id;
  }

  DB.Activity.create(activity).complete(function(err, activity) {
    if (err) {
      log.error({'err': err}, 'Failed to create a new activity');
      return callback({'code': 500, 'msg': err.message});
    }

    // Retrieve the number of points that should be earned for
    // the current activity in the current course
    getActivityTypeConfiguration(course.id, function(err, configuration) {
      if (err) {
        return callback(err);
      }

      // Increase the points of the user
      var points = _.findWhere(configuration, {'type': type}).points;
      user.increment('points', {'by': points}).complete(function(err) {
        if (err) {
          log.error({'err': err}, 'Failed to increment the points for a user');
          return callback({'code': 500, 'msg': err.message});
        }

        // If the current user is the user triggering the activity, update the timestamp
        // at which the last activity took place for that user
        if (!actor) {
          user.update({'last_activity': new Date()}).complete(function(err) {
            if (err) {
              log.error({'err': err}, 'Failed to last activity timestamp for a user');
              return callback({'code': 500, 'msg': err.message});
            }

            return callback();
          });
        } else {
          return callback();
        }
      });
    });
  });
};

/**
 * Remove an activity and undo the points it contributed to the engagement index
 *
 * @param  {Course}           course                          The course to which the activity to remove is associated
 * @param  {User}             user                            The user that earned activity points for the activity to remove
 * @param  {String|String[]}  [type]                          The type of the activity to remove. One of the types in `col-activities/lib/constants.js`
 * @param  {Number}           objectId                        The id of the object on which the activity took place (e.g., the asset id, the comment id, etc.)
 * @param  {String}           objectType                      The type of the object on which the activity took place. One of `CollabosphereConstants.ACTIVITY.OBJECT_TYPES`
 * @param  {User}             [actor]                         The user that performed the activity when different than the user earning activity points
 * @param  {Function}         callback                        Standard callback function
 * @param  {Object}           callback.err                    An error that occurred, if any
 * @param  {Activity}         callback.activity               The deleted activity
 */
var deleteActivity = module.exports.deleteActivity = function(course, user, type, objectId, objectType, actor, callback) {
  // Verify if the user has already liked or disliked the asset
  var options = {
    'where': {
      'course_id': course.id,
      'user_id': user.id,
      'type': type,
      'object_type': objectType
    }
  };
  if (objectType === 'asset') {
    options.where.asset_id = objectId;
  } else {
    options.where.object_id = objectId;
  }
  DB.Activity.find(options).complete(function(err, activity) {
    if (err) {
      log.error({'err': err}, 'Failed to retrieve the previous like or dislike');
      return callback({'code': 500, 'msg': err.message});
    }

    // Return immediately if no activity has been provided
    if (!activity) {
      return callback();
    }

    // Retrieve the number of points that should be deducted to undo the provided activity
    getActivityTypeConfiguration(activity.course_id, function(err, configuration) {
      if (err) {
        return callback(err);
      }

      // Decrease the points of the user
      var points = _.findWhere(configuration, {'type': activity.type}).points;
      user.decrement('points', {'by': points}).complete(function(err) {
        if (err) {
          log.error({'err': err}, 'Failed to decrement the points for a user');
          return callback({'code': 500, 'msg': err.message});
        }

        // Remove the activity
        var activityToDelete = activity.toJSON();
        activity.destroy().complete(function(err) {
          if (err) {
            log.error({'err': err, 'activity': activity}, 'Failed to delete an activity');
            return callback({'code': 500, 'msg': err.message});
          }

          return callback(null, activityToDelete);
        });
      });
    });
  });
};

/* Points configuration */

/**
 * Get the activity type configration for a course. This will consist of the default activity
 * type configuration overlayed with the activity type configuration overrides for that course
 *
 * @param  {Number}           courseId                        The id of the course for which the activity type configuration should be retrieved
 * @param  {Function}         callback                        Standard callback function
 * @param  {Object}           callback.err                    An error that occurred, if any
 * @param  {ActivityType[]}   callback.configuration          The activity type configuration for the course
 */
var getActivityTypeConfiguration = module.exports.getActivityTypeConfiguration = function(courseId, callback) {
  // Get the activity type configraton overrides from the DB
  var options = {
    'where': {
      'course_id': courseId
    }
  };

  DB.ActivityType.findAll(options).complete(function(err, activityTypeOverrides) {
    if (err) {
      log.error({'err': err, 'course': courseId}, 'Failed to get the activity type configuration overrides');
      return callback({'code': 500, 'msg': err.message});
    }

    // Overlay the overrides on top of the activity type configuration defaults
    var configuration = _.cloneDeep(ActivitiesDefaults);
    _.each(configuration, function(typeConfiguration) {
      var override = _.findWhere(activityTypeOverrides, {'type': typeConfiguration.type});
      if (override) {
        if (!_.isNull(override.points)) {
          typeConfiguration.points = override.points;
        }
        if (!_.isNull(override.enabled)) {
          typeConfiguration.enabled = override.enabled;
        }
      }
    });

    return callback(null, configuration);
  });
};

/**
 * Edit the configuration for an activity type in a course. This will override the
 * default configuration for that activity type
 *
 * @param  {Context}          ctx                             Standard context containing the current user and the current course
 * @param  {String}           type                            The activity type for which the configuration should be updated. One of the types in `col-activities/lib/constants.js`
 * @param  {Number}           [points]                        The number of points this activity type should contribute towards a user's points
 * @param  {Boolean}          [enabled]                       Whether activities of this type should contributed towards a user's points
 * @param  {Function}         callback                        Standard callback function
 * @param  {Object}           callback.err                    An error that occurred, if any
 */
var editActivityTypeConfiguration = module.exports.editActivityTypeConfiguration = function(ctx, type, points, enabled, callback) {
  // Only administrators are able to edit the configuration for an activity type
  if (!ctx.user.is_admin) {
    log.error({'id': ctx.user.id}, 'Unauthorized to edit the configuration for an activity type');
    return callback({'code': 401, 'msg': 'Unauthorized to edit the configuration for an activity type'});
  }

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'type': Joi.any().valid(_.pluck(ActivitiesDefaults, 'type')).required(),
    'points': Joi.number().optional(),
    'enabled': Joi.boolean().optional()
  });

  var validationResult = Joi.validate({
    'type': type,
    'points': points,
    'enabled': enabled
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  } else if (!_.isFinite(points) && !_.isBoolean(enabled)) {
    return callback({'code': 400, 'msg': 'Either a points value or an enabled value needs to be provided'});
  }

  // Store the activity type configuration override in the DB.
  // If an activity type configuration already exists, it will
  // be overwritten
  var activityTypeOverride = {
    'course_id': ctx.course.id,
    'type': type,
    'points': points,
    'enabled': enabled
  };

  DB.ActivityType.upsert(activityTypeOverride).complete(function(err) {
    if (err) {
      log.error({'type': err}, 'Failed to edit the configuration for an activity type');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback();
  });
};
