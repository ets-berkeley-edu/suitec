/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');
var OAuth = require('oauth').OAuth;
var xml2js = require('xml2js');
var url = require('url');

var TestsUtil = require('col-tests/lib/util');

/**
 * Assert that the Asset Library's cartridge can be retrieved
 *
 * @param  {Client}         client        The REST client to make the request with
 * @param  {Function}       callback      Standard callback function
 * @throws {AssertionError}               Error thrown when an assertion failed
 */
var assertAssetLibraryCartridgeSucceeds = module.exports.assertAssetLibraryCartridgeSucceeds = function(client, callback) {
  client.lti.assetLibraryCartridge(function(err, body, response) {
    assert.ok(!err);

    // Assert XML was returned
    assert.strictEqual(response.headers['content-type'], 'application/xml; charset=utf-8');

    // Assert a valid cartridge file was returned
    xml2js.parseString(body, function(err, result) {
      assert.ok(!err);

      assert.ok(_.isObject(result));
      assert.ok(_.isObject(result.cartridge_basiclti_link));

      // Assert the correct title is present
      assert.strictEqual(result.cartridge_basiclti_link['blti:title'][0], 'Asset Library');

      // Assert the correct description is present
      assert.strictEqual(result.cartridge_basiclti_link['blti:description'][0], 'The Asset Library is a place where students and instructors can collect relevant materials for the course. The materials can  be seen by the other students in the class and can be discussed, liked, disliked, etc.');

      // Assert the correct launch URL is present
      assert.strictEqual(result.cartridge_basiclti_link['blti:launch_url'][0], 'http://localhost:2000/lti/assetlibrary');

      // Assert we've added some Canvas specific properties such as disabling the tool by default
      assert.ok(result.cartridge_basiclti_link['blti:extensions']);
      var extension = result.cartridge_basiclti_link['blti:extensions'][0];
      assert.ok(extension);
      assert.strictEqual(extension.$.platform, 'canvas.instructure.com');

      // Assert we've given it a unique tool id
      var toolIdProp = getImsPropertyByName(extension['lticm:property'], 'tool_id');
      assert.strictEqual(toolIdProp._, 'collabosphere_assetlibrary');

      // All data within the tool is public
      var privacyLevelProp = getImsPropertyByName(extension['lticm:property'], 'privacy_level');
      assert.strictEqual(privacyLevelProp._, 'public');

      // Assert the correct name for the tool is present in the Canvas menu
      var nameProp = getImsPropertyByName(extension['lticm:options'][0]['lticm:property'], 'text');
      assert.strictEqual(nameProp._, 'Asset Library');

      return callback();
    });
  });
};

/**
 * Find an LTI property in a set of properties. If the property could
 * not be found, `null` will be returned
 *
 * @param  {Object[]}     properties          The set of LTI properties to search through
 * @param  {String}       name                The name of the property to find
 * @return {Object}                           The matching property or `null` if no property could be found
 * @api private
 */
var getImsPropertyByName = function(properties, name) {
  return _.find(properties, function(prop) {
    return (prop.$.name === name);
  });
};

/**
 * Assert that the Asset Library can be launched
 *
 * @param  {Client}         client        The REST client to make the request with
 * @param  {Course}         course        The Canvas course in which to launch the Asset Library
 * @param  {User}           user          The user in Canvas
 * @param  {Function}       callback      Standard callback function
 * @throws {AssertionError}               Error thrown when an assertion failed
 */
var assertAssetLibraryLaunchSucceeds = module.exports.assertAssetLibraryLaunchSucceeds = function(client, course, user, callback) {
  // Get the LTI parameters which are signed with OAuth
  var parameters = getLaunchParameters(course, user, 'assetlibrary');

  // Launch the tool
  client.lti.assetLibraryLaunch(parameters, function(err, body, response) {
    assert.ok(!err);

    // We should be redirected to the HTML
    assert.strictEqual(response.statusCode, 302);

    // The API domain and course id should be included in the location header
    var location = response.headers.location;
    assert.ok(location);

    var parsedUrl = url.parse(location, true);
    assert.strictEqual(parsedUrl.pathname, '/assetlibrary');
    assert.ok(parsedUrl.query);
    assert.strictEqual(parsedUrl.query.api_domain, course.canvas.canvas_api_domain);
    assert.strictEqual(parseInt(parsedUrl.query.course_id, 10), course.id);

    return callback();
  });
};

/**
 * Assert that the Asset Library cannot be launched
 *
 * @param  {Client}         client        The REST client to make the request with
 * @param  {Course}         course        The Canvas course the Asset Library will be launched in
 * @param  {User}           user          The user in Canvas
 * @param  {Number}         code          The expected HTTP error code
 * @param  {Function}       callback      Standard callback function
 * @throws {AssertionError}               Error thrown when an assertion failed
 */
var assertAssetLibraryLaunchFails = module.exports.assertAssetLibraryLaunchFails = function(client, course, user, code, callback) {
  // Get the LTI parameters which are signed with OAuth
  var parameters = getLaunchParameters(course, user, 'assetlibrary');

  // Launch the tool
  client.lti.assetLibraryLaunch(parameters, function(err) {
    assert.strictEqual(err.code, code);
    return callback();
  });
};

/**
 * Get the parameters that can be sent to the LTI Launch URL. These will
 * be signed with OAuth
 *
 * @param  {Course}         course        The Canvas course the tool will be launched in
 * @param  {User}           user          The user in Canvas
 * @param  {String}         tool          The tool that will be launched
 * @return {Object}                       A set of parameters that can be sent to the launch URL
 * @api private
 */
var getLaunchParameters = function(course, user, tool) {
  // Build up the parameter hash that Canvas would send us
  var parameters = {
    'context_id': 'b166e25b17e0b4fec9e5092b85ba717821f42628',
    'context_label': course.label,
    'context_title': course.title,
    'custom_canvas_api_domain': course.canvas.canvas_api_domain,
    'custom_canvas_course_id': course.id,
    'custom_canvas_enrollment_state': 'active',
    'custom_canvas_user_id': user.id,
    'custom_canvas_user_login_id': user.loginId,
    'ext_roles': user.ext_roles,
    'launch_presentation_document_target': 'iframe',
    'launch_presentation_height': '400',
    'launch_presentation_locale': 'en',
    'launch_presentation_return_url': 'http://localhost:3000/external_content/success/external_tool_redirect',
    'launch_presentation_width': '800',
    'lis_person_contact_email_primary': user.loginId,
    'lis_person_name_family': user.familyName,
    'lis_person_name_full': user.fullName,
    'lis_person_name_given': user.givenName,
    'lti_message_type': 'basic-lti-launch-request',
    'lti_version': 'LTI-1p0',
    'oauth_callback': 'about:blank',
    'resource_link_id': 'b166e25b17e0b4fec9e5092b85ba717821f42628',
    'resource_link_title': 'Collabosphere',
    'roles': user.roles,
    'tool_consumer_info_product_family_code': 'canvas',
    'tool_consumer_info_version': 'cloud',
    'tool_consumer_instance_contact_email': 'canvas@example.com',
    'tool_consumer_instance_guid': '9gfyVrsQjAPap3kyx6uzi4MUaVLTTSe1YTLwmlbw:canvas-lms',
    'tool_consumer_instance_name': 'Berkeley',
    'user_id': user.guid,
    'user_image': user.userImage
  };

  // Construct an OAuth client we can use to sign the launch request
  var oauth = new OAuth(null, null, course.canvas.lti_key, course.canvas.lti_secret, '1.0', null, 'HMAC-SHA1');

  // Although the OAuth library has HTTP capabilities built-in, we can't use them
  // as they are built for Oauth 1.0A which adds the signature in the header whereas
  // Basic LTI expects it as regular POST parameters
  var launchUrl = 'http://localhost:2000/lti/' + tool;
  var oauthParameters = oauth._prepareParameters(null, null, 'POST', launchUrl, parameters);

  // Add the OAuth parameters to our parameter set
  _.each(oauthParameters, function(param) {
    parameters[param[0]] = param[1];
  });

  return parameters;
};
