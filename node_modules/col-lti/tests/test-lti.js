/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');

var DB = require('col-core/lib/db');
var TestsUtil = require('col-tests');
var UsersTestsUtil = require('col-users/tests/util');

var LtiTestsUtil = require('./util');

describe('LTI', function() {

  // TODO: Engagement Index tests
  // TODO: Whiteboard tests

  describe('Asset Library', function() {

    describe('Cartridge', function() {

      /**
       * Test that verifies that the LTI cartridge can be retrieved and contains the correct information
       */
      it('can be retrieved', function(callback) {
        var client = TestsUtil.getAnonymousClient();
        LtiTestsUtil.assertAssetLibraryCartridgeSucceeds(client, function(cartridge) {
          return callback();
        });
      });
    });

    describe('Tool', function() {

      /**
       * Test that verifies that the Asset Library Tool can be launched
       */
      it('can be launched', function(callback) {
        var client = TestsUtil.getAnonymousClient();
        var course = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
        var user = TestsUtil.generateUser(global.tests.canvas.ucberkeley);
        LtiTestsUtil.assertAssetLibraryLaunchSucceeds(client, course, user, function() {
          return callback();
        });
      });

      /**
       * Test that verifies that the tool validates the LTI parameters
       */
      it('validates the lti parameters', function(callback) {
        var client = TestsUtil.getAnonymousClient();
        var course = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
        var user = TestsUtil.generateUser(global.tests.canvas.ucberkeley);

        // Missing api domain
        delete course.canvas.canvas_api_domain;
        delete user.canvas.canvas_api_domain;
        LtiTestsUtil.assertAssetLibraryLaunchFails(client, course, user, 400, function() {

          // Missing course id
          course = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
          delete course.id;
          LtiTestsUtil.assertAssetLibraryLaunchFails(client, course, user, 400, function() {
            return callback();
          });
        });
      });

      /**
       * Test that verifies that the LTI credentials need to be correct in order to do a succesful launch
       */
      it('needs the correct lti credentials', function(callback) {
        var client = TestsUtil.getAnonymousClient();
        var course = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
        var user = TestsUtil.generateUser(global.tests.canvas.ucberkeley);

        // The wrong LTI key will cause the Canvas instance to not be found
        course.canvas.lti_key = '12345678901234567890123456789012';
        LtiTestsUtil.assertAssetLibraryLaunchFails(client, course, user, 404, function() {

          // The wrong LTI secret will cause an authorization failure
          var course = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
          course.canvas.lti_secret = 'wrong';
          LtiTestsUtil.assertAssetLibraryLaunchFails(client, course, user, 401, function() {
            return callback();
          });
        });
      });

      /**
       * Test that verifies that the same client can interact with multiple courses concurrently. This test
       * will essentially ensure that the cookies that are generated by the system aren't overwriting each other
       */
      it('can support the same client in two courses concurrently', function(callback) {
        // Launch a user into a new course
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, courseA, user) {

          // Launch the same user into another course
          TestsUtil.getAssetLibraryClient(client, null, user, function(client, courseB, user) {

            // Getting the me feed in the context of course A should work
            UsersTestsUtil.assertGetMe(client, courseA, null, function(me) {
              assert.strictEqual(me.course.canvas_course_id, courseA.id);

              // Getting the me feed in the context of course B with the same client should work
              UsersTestsUtil.assertGetMe(client, courseB, null, function(me) {
                assert.strictEqual(me.course.canvas_course_id, courseB.id);
                return callback();
              });
            });
          });
        });
      });

      /**
       * Test that verifies that the same client can interact with multiple courses from multiple Canvas instances
       * concurrently. This test will essentially ensure that the cookies that are generated by the system aren't
       * overwriting each other
       */
      it('can support the same client in two courses concurrently', function(callback) {
        // Launch a client into a new course on the Berkeley Canvas instance
        var client = TestsUtil.getAnonymousClient();
        var courseBerkeley = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
        TestsUtil.getAssetLibraryClient(client, courseBerkeley, null, function() {

          // Launch the same client in a UC Davis course
          var courseDavis = TestsUtil.generateCourse(global.tests.canvas.ucdavis);
          TestsUtil.getAssetLibraryClient(client, courseDavis, null, function() {

            // Getting the me feed in the UC Berkeley course should work
            UsersTestsUtil.assertGetMe(client, courseBerkeley, null, function(me) {
              assert.strictEqual(me.course.canvas_course_id, courseBerkeley.id);

              // Getting the me feed in the context of the UC Davis course with the same client should work
              UsersTestsUtil.assertGetMe(client, courseDavis, null, function(me) {
                assert.strictEqual(me.course.canvas_course_id, courseDavis.id);
                return callback();
              });
            });
          });
        });
      });

      /**
       * Test that verifies that new courses are created on the fly
       */
      it('creates courses on the fly', function(callback) {
        // Launch a user into a new course
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, courseA, userA) {

          // Get the user's information
          UsersTestsUtil.assertGetMe(client, courseA, null, function(me) {
            assert.strictEqual(me.canvas_user_id, userA.id);
            assert.strictEqual(me.course.canvas_course_id, courseA.id);

            // Launching the tool for the same user in the same course should
            // not result in a new course
            TestsUtil.getAssetLibraryClient(null, courseA, userA, function(client) {
              UsersTestsUtil.assertGetMe(client, courseA, null, function(meReload) {
                assert.strictEqual(meReload.course.id, me.course.id);

                // Launching the tool for a new user in the same course should
                // not result in a new Collabosphere course
                TestsUtil.getAssetLibraryClient(null, courseA, null, function(client, courseA, userB) {
                  UsersTestsUtil.assertGetMe(client, courseA, null, function(meNewUser) {
                    assert.strictEqual(meNewUser.course.id, me.course.id);

                    // Launching the tool for the same user in another course
                    // should result in a new Collabosphere course
                    TestsUtil.getAssetLibraryClient(null, null, userA, function(client, courseB, userA) {
                      UsersTestsUtil.assertGetMe(client, courseB, null, function(meNewCourse) {
                        assert.notEqual(meNewCourse.course.id, me.course.id);
                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });

      /**
       * Test that verifies that new users are created on the fly
       */
      it('creates users on the fly', function(callback) {
        // Launch a user into a new course
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, courseA, userA) {

          // Get the user's information
          UsersTestsUtil.assertGetMe(client, courseA, null, function(me) {
            assert.strictEqual(me.canvas_user_id, userA.id);
            assert.strictEqual(me.course.canvas_course_id, courseA.id);

            // Launching the tool for the same user in the same course should
            // authenticate the client to the same Collabosphere user
            TestsUtil.getAssetLibraryClient(null, courseA, userA, function(client) {
              UsersTestsUtil.assertGetMe(client, courseA, null, function(meReload) {
                assert.strictEqual(meReload.id, me.id);

                // Launching the tool for a new user in the same course should
                // result in a new Collabosphere user
                TestsUtil.getAssetLibraryClient(null, courseA, null, function(client, courseA, userB) {
                  UsersTestsUtil.assertGetMe(client, courseA, null, function(meNewUser) {
                    assert.notEqual(meNewUser.id, me.id);

                    // Launching the tool for the same user in another course
                    // should result in a new Collabosphere user
                    TestsUtil.getAssetLibraryClient(null, null, userA, function(client, courseB, userA) {
                      UsersTestsUtil.assertGetMe(client, courseB, null, function(meNewUser) {
                        assert.notEqual(meNewUser.id, me.id);
                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
