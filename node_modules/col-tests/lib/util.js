/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var config = require('config');
var randomstring = require('randomstring');
var util = require('util');

var AssetsTestUtil = require('col-assets/tests/util');
var LtiTestUtil = require('col-lti/tests/util');
var RestAPI = require('col-rest');

/**
 * Get an anonymous REST client
 *
 * @return {RestClient}                     An anonymous app user REST client
 */
var getAnonymousClient = module.exports.getAnonymousClient = function() {
  var options = {
    'host': util.format('localhost:%s', config.get('app.port'))
  };
  return RestAPI.createClient(options);
};

/**
 * Generate a number of assets in a course
 *
 * @param  {Client}           [client]                The REST client to make the request with
 * @param  {Course}           course                  The Canvas course in which the user is interacting with the API
 * @param  {Number}           total                   The total number of assets tht should be created
 * @param  {Function}         callback                Standard callback function
 * @param  {Asset}            callback.asset1         The first asset that was created
 * @param  {Asset}            callback.asset2         The second asset that was created
 * @param  {Asset}            [callback.asset]        Each asset that was created as new callback arguments
 */
var generateTestAssets = module.exports.generateTestAssets = function(client, course, total, callback) {
  // Keep track of the assets that have been successfully created
  var createdAssets = [];

  var returnAssets = _.after(total, function() {
    return callback(createdAssets);
  });

  // Create the requested number of assets
  _.times(total, function() {
    var title = randomstring.generate(10);
    var url = util.format('http://www.%s.com/', randomstring.generate(10));
    AssetsTestUtil.assertCreateLink(client, course, title, url, null, function(asset) {
      createdAssets.push(asset);
      returnAssets();
    });
  });
};

/**
 * Get an authenticated Asset Library client for a given Canvas course and user.
 * This is a utility method that allows for more streamlined testing by defaulting all its parameters.
 *
 * @param  {Client}           [client]                The REST client to make the request with. Defaults to an anonymous client
 * @param  {Course}           [course]                The Canvas course the Asset Library will be launched in. Defaults to a new course in the `ucberkeley` Canvas instance
 * @param  {User}             [user]                  The user in Canvas. Defaults to a new user in the `ucberkeley` Canvas instance
 * @param  {Function}         callback                Standard callback function
 * @param  {Client}           callback.client         The REST client that was used
 * @param  {Course}           callback.course         The Canvas course that was used
 * @param  {User}             callback.user           The Canvas user that was used
 * @throws {AssertionError}                           Error thrown when an assertion failed
 */
var getAssetLibraryClient = module.exports.getAssetLibraryClient = function(client, course, user, callback) {
  client = client || getAnonymousClient();
  course = course || generateCourse(global.tests.canvas.ucberkeley);
  user = user || generateUser(global.tests.canvas.ucberkeley);
  LtiTestUtil.assertAssetLibraryLaunchSucceeds(client, course, user, function() {
    return callback(client, course, user);
  });
};

/**
 * Generate a fake Canvas Course that can be used to launch a tool. All of the inputs
 * are optional and will be generated if omitted.
 *
 * @param  {Canvas}           canvas                  The canvas instance in which the course lives
 * @param  {Number}           [id]                    The id of the course in Canvas
 * @param  {String}           [label]                 The label of the course in Canvas
 * @param  {String}           [title]                 The title of the course in Canvas
 * @return {Course}                                   An object that contains the information about the course
 */
var generateCourse = module.exports.generateCourse = function(canvas, id, label, title) {
  return {
    'canvas': _.extend({}, canvas),
    'id': id || _.random(10000000),
    'label': label || randomstring.generate(10),
    'title': title || randomstring.generate(25)
  };
};

/**
 * Generate a fake Canvas User that can be used to launch a tool. All of the inputs
 * are optional and will be generated if omitted.

 * @param  {Canvas}           canvas                  The canvas instance in which the user lives
 * @param  {Number}           [id]                    The id of the user in Canvas
 * @param  {String}           [roles]                 The role of the user in the course, defaults to `Student`
 * @param  {String}           [givenName]             The given name of the user
 * @param  {String}           [familyName]            The family name of the user
 * @param  {String}           [loginId]               The login id for the user
 * @param  {String}           [userImage]             The url that points to a profile picture for the user
 * @return {User}                                     An object that contains the information about the user
 */
var generateUser = module.exports.generateUser = function(canvas, id, roles, givenName, familyName, loginId, userImage) {
  givenName = givenName || randomstring.generate(10);
  familyName = familyName || randomstring.generate(15);
  return {
    'canvas': _.extend({}, canvas),
    'id': id || _.random(10000000),
    'givenName': givenName,
    'familyName': familyName,
    'fullName': givenName + ' ' + familyName,
    'roles': roles || 'Student',
    'ext_roles': roles || 'Student',
    'loginId': loginId || (_.random(1000000) + '@berkeley.edu'),
    'guid': _.random(100000),
    'userImage': userImage || 'http://url.to/an/image.jpg'
  };
};
