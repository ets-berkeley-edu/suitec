/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var busboy = require('express-busboy');
var express = require('express');
var randomstring = require('randomstring');
var util = require('util');

var Collabosphere = require('col-core');
var DB = require('col-core/lib/db');

var TestsUtil = require('./util');

// Bootstrap the application server before the tests begin
before(function(callback) {
  // Start up the Collabosphere server
  Collabosphere.init(function(err) {
    assert.ok(!err);

    // Create 2 Canvas instances that can be used in the tests
    createCanvas(function(ucberkeleyCanvas) {
      createCanvas(function(ucdavisCanvas) {

        // Expose the Canvas instances on the global object
        global.tests = {
          'canvas': {
            'ucberkeley': ucberkeleyCanvas,
            'ucdavis': ucdavisCanvas
          }
        };
        return callback();
      });
    });
  });
});

after(function(callback) {
  Collabosphere.appServer.httpServer.close();
  return callback();
});

/**
 * Create a dummy canvas object
 *
 * @param  {Function}     callback              Standard callback function
 * @param  {Object}       callback.canvas       The created canvas object
 */
var createCanvas = function(callback) {
  // Mock a canvas instance
  mockCanvasAPI(function(api_domain) {
    DB.Canvas.build({
      'canvas_api_domain': api_domain,
      'api_key': randomstring.generate(),
      'lti_key': randomstring.generate(),
      'lti_secret': randomstring.generate(),
      'use_https': false
    }).save().complete(function(err, canvas) {
      assert.ok(!err);
      return callback(canvas.toJSON());
    });
  });
};

var canvasPort = 3001;

/**
 * Mock the Canvas REST API by spinning up an express web server
 *
 * @param  {Function} callback                Standard callback function
 * @param  {String}   callback.apiDomain      The api domain on which the mocked REST api is available
 */
var mockCanvasAPI = function(callback) {
  var app = express();

  var server = app.listen(canvasPort, function() {
    canvasPort++;

    var host = server.address().address;
    var port = server.address().port;
    var apiDomain = util.format('%s:%d', host, port);

    // Parse the incoming HTTP requests
    busboy.extend(app, {'upload': true});

    var uploadedFiles = 0;
    var fileInfo = {
      'id': uploadedFiles,
      'url': util.format('http://%s/files/%d/download', apiDomain, uploadedFiles),
      'content-type': 'text/plain'
    };

    // The "notify canvas of upload" endpoint
    app.post('/api/v1/courses/:courseId/files', function(req, res) {
      // Assert all required parameters are present
      assert.ok(req.body.name);
      assert.ok(req.body.filesize);
      assert.ok(req.body.content_type);
      assert.ok(req.body.parent_folder_path);
      assert.ok(req.body.on_duplicate);

      fileInfo['content-type'] = req.body.content_type;

      // Return some information that can be used in the "upload" step
      var uploadInfo = {
        'upload_url': util.format('http://%s/upload', apiDomain)
      };
      return res.status(200).send(uploadInfo);
    });

    // The "upload" endpoint to which the file is submitted
    app.post('/upload', function(req, res) {
      assert.ok(req.files.file);
      uploadedFiles++;
      return res.redirect(util.format('http://%s/confirm', apiDomain));
    });

    // The "confirm" endpoint
    app.post('/confirm', function(req, res) {
      return res.status(200).send(fileInfo);
    });

    // The "hide" endpoint
    app.put('/api/v1/files/:fileId', function(req, res) {
      return res.status(200).send(fileInfo);
    });

    return callback(apiDomain);
  });
};
