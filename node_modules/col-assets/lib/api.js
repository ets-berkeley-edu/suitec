/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Joi = require('joi');

var DB = require('col-core/lib/db');
var CollabosphereUtil = require('col-core/lib/util');
var log = require('col-core/lib/logger')('col-assets');

/**
 * Get an asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         id                              The id of the asset
 * @param  {Boolean}        [incrementViews]                Whether the total number of views for the asset should be incremented by 1
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Asset}          callback.asset                  The requested asset
 */
var getAsset = module.exports.getAsset = function(ctx, id, incrementViews, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required(),
    'incrementViews': Joi.boolean().optional()
  });

  var validationResult = Joi.validate({
    'id': id,
    'incrementViews': incrementViews
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the asset from the DB
  // TODO: Include comments
  // TODO: Include liked
  var options = {
    'where': {
      'id': id,
      'course_id': ctx.course.id
    }
  };
  DB.Asset.find(options).complete(function(err, asset) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to get an asset');
      return callback({'code': 500, 'msg': err.message});
    } else if (!asset) {
      log.debug({'err': err, 'id': id}, 'An asset with the specified id could not be found');
      return callback({'code': 404, 'msg': 'An asset with the specified id could not be found'});
    }

    // Increment the number of views for the asset if specified
    if (incrementViews) {
      asset.increment('views');
    }

    return callback(null, asset);
  });
};

/**
 * Get the assets for the current course
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}         [offset]                        The number to start paging from. Defaults to 0
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Object}         callback.assets                 The retrieved assets
 * @param  {Number}         callback.assets.total           The total number of assets in the current course
 * @param  {Asset[]}        callback.assets.results         The paged assets in the current course
 */
var getAssets = module.exports.getAssets = function(ctx, limit, offset, callback) {
  // Default some parameters
  limit = CollabosphereUtil.getNumberParam(limit, 10, 1, 25);
  offset = CollabosphereUtil.getNumberParam(offset, 0, 0);

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'limit': Joi.number().required(),
    'offset': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'limit': limit,
    'offset': offset
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the assets from the DB
  // TODO: Include liked
  var options = {
    'where': {
      'course_id': ctx.course.id
    },
    'order': 'created_at DESC',
    'limit': limit,
    'offset': offset
  };
  DB.Asset.findAndCountAll(options).complete(function(err, result) {
    if (err) {
      log.error({'err': err, 'app': app}, 'Failed to get the assets in the current course');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, {
      'total': result.count,
      'results': result.rows
    });
  });
};

/**
 * Create a new link asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {String}         title                           The title of the link
 * @param  {String}         url                             The url of the link
 * @param  {Object}         [opts]                          A set of optional parameters
 * @param  {String}         [opts.description]              The description of the link
 * @param  {String}         [opts.source]                   The source of the link
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Asset}          callback.asset                  The created link asset
 */
var createLink = module.exports.createLink = function(ctx, title, url, opts, callback) {
  // Default the title to the provided url
  title = title || url;

  // Default the optional values
  opts = opts || {};

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'title': Joi.string().required(),
    'url': Joi.string().uri().required(),
    'opts': Joi.object().keys({
      'description': Joi.string().allow('').optional(),
      'source': Joi.string().uri().allow('').optional()
    })
  });

  var validationResult = Joi.validate({
    'title': title,
    'url': url,
    'opts': opts
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Create the link asset in the database
  var asset = {
    'course_id': ctx.course.id,
    'user_id': ctx.user.id,
    'type': 'link',
    'title': title,
    'url': url,
    'description': opts.description,
    'source': opts.source
  };

  DB.Asset.create(asset).complete(function(err, asset) {
    if (err) {
      log.error({'err': err}, 'Failed to create a new link asset');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, asset);
  });
};
