/**
 * Copyright Â©2016. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var _ = require('lodash');
var assert = require('assert');
var Joi = require('joi');
var path = require('path');

var CanvasTestsUtil = require('col-canvas/tests/util');
var CategoriesTestUtil = require('col-categories/tests/util');
var CollabosphereConstants = require('col-core/lib/constants');
var UsersTestsUtil = require('col-users/tests/util');

/**
 * Assert that an asset has all expected properties
 *
 * @param  {Asset}              asset                                 The asset to assert the properties for
 * @param  {Object}             [opts]                                Optional parameters to verify the asset with
 * @param  {Asset}              [opts.expectedAsset]                  The asset to which the provided asset should be compared
 * @param  {Number}             [opts.expectedCommentCount]           The total number of comments that are expected on the asset
 * @param  {Boolean}            [opts.expectComments]                 Whether the comments on the asset are expected to be included
 * @param  {Boolean}            [opts.expectCategories]               Whether the categories on the asset are expected to be included
 * @param  {Boolean}            [opts.expectThumbnail]                Whether the asset is expected to have a thumbnail
 * @param  {Boolean}            [opts.expectWhiteboardElements]       Whether the whiteboard elements on the asset are expected to be included
 * @param  {Boolean}            [opts.incrementViews]                 Whether the total number of views for the asset was increased when retrieving the asset
 * @param  {Boolean}            [opts.expectVisible]                  Whether the asset is expected to be visible in the assets library list
 * @throws {AssertionError}                                           Error thrown when an assertion failed
 */
var assertAsset = module.exports.assertAsset = function(asset, opts) {
  opts = opts || {};

  // Ensure that all expected properties are present
  assert.ok(asset);
  assert.ok(asset.id);
  assert.ok(asset.type);
  assert(CollabosphereConstants.ASSET.ASSET_TYPES.indexOf(asset.type) !== -1);
  assert.ok(asset.course_id);
  assert.ok(asset.title);
  assert.ok(asset.created_at);
  assert.ok(asset.updated_at);
  assert.ok(_.isFinite(asset.likes));
  assert.ok(_.isFinite(asset.dislikes));
  assert.ok(_.isFinite(asset.views));
  assert.ok(_.isFinite(asset.comment_count));
  assert.ok(!_.isUndefined(asset.liked));
  assert.ok(_.isBoolean(asset.visible));

  assert.ok(_.isArray(asset.users));
  assert.ok(!_.isEmpty(asset.users));
  _.each(asset.users, function(user) {
    UsersTestsUtil.assertUser(user, {'expectPoints': false, 'expectEmail': false});
  });

  // Ensure that valid categories are present
  if (opts.expectCategories) {
    assert.ok(_.isArray(asset.categories));
    _.each(asset.categories, function(category) {
      CategoriesTestUtil.assertCategory(category);
    });
  }

  // Ensure that a thumbnail is present
  if (opts.expectThumbnail) {
    assert.ok(asset.thumbnail_url);
  }

  // Ensure that the comment count is correct
  if (_.isFinite(opts.expectedCommentCount)) {
    assert.strictEqual(asset.comment_count, opts.expectedCommentCount);
  }

  // Ensure that all expected comments are present
  if (opts.expectComments) {
    assert.ok(_.isArray(asset.comments));
    assert.strictEqual(asset.comments.length, asset.comment_count);
    _.each(asset.comments, function(comment) {
      assertComment(comment);
    });
  } else {
    assert.ok(_.isUndefined(asset.comments));
  }

  // Ensure that the expected visibility setting is present
  if (!_.isUndefined(opts.expectVisible)) {
    assert.strictEqual(asset.visible, opts.expectVisible);
  }

  // Ensure that all the asset properties are the same as the ones for
  // the expected asset
  if (opts.expectedAsset) {
    assert.strictEqual(asset.id, opts.expectedAsset.id);
    assert.strictEqual(asset.type, opts.expectedAsset.type);
    assert.strictEqual(asset.course_id, opts.expectedAsset.course_id);
    assert.strictEqual(asset.title, opts.expectedAsset.title);
    assert.strictEqual(asset.created_at, opts.expectedAsset.created_at);
    assert.strictEqual(asset.likes, opts.expectedAsset.likes);
    assert.strictEqual(asset.dislikes, opts.expectedAsset.dislikes);
    assert.strictEqual(asset.liked, opts.expectedAsset.liked);
    assert.strictEqual(asset.visible, opts.expectedAsset.visible);

    // Ensure that the expected asset creators are present
    asset.users = _.sortBy(asset.users, 'id');
    opts.expectedAsset.users = _.sortBy(opts.expectedAsset.users, 'id');
    assert.deepEqual(asset.users, opts.expectedAsset.users);

    // Ensure that the last modified timestamp has been updated when incrementing the views.
    // Also ensure that the number of views has the expected value
    if (opts.incrementViews) {
      assert(asset.updated_at >= opts.expectedAsset.updated_at);
      assert.strictEqual(asset.views, opts.expectedAsset.views + 1);
    } else {
      assert.strictEqual(asset.updated_at, opts.expectedAsset.updated_at);
      assert.strictEqual(asset.views, opts.expectedAsset.views);
    }

    // Ensure that the expected categories are present
    if (opts.expectCategories) {
      assert.strictEqual(asset.categories.length, opts.expectedAsset.categories.length);
      _.each(asset.categories, function(category) {
        var correspondingCategory = _.find(opts.expectedAsset.categories, {'id': category.id});
        CategoriesTestUtil.assertCategory(correspondingCategory);
        CategoriesTestUtil.assertCategory(category, {'expectedCategory': correspondingCategory});
      });
    }

    // Ensure that all optional properties are the same as the ones for the
    // expected asset
    if (asset.canvas_assignment_id || opts.expectedAsset.canvas_assignment_id) {
      assert.strictEqual(asset.canvas_assignment_id, opts.expectedAsset.canvas_assignment_id);
    }
    if (asset.description || opts.expectedAsset.description) {
      assert.strictEqual(asset.description, opts.expectedAsset.description);
    }
    if (asset.thumbnail_url || opts.expectedAsset.thumbnail_url) {
      assert.strictEqual(asset.thumbnail_url, opts.expectedAsset.thumbnail_url);
    }
    if (asset.large_url || opts.expectedAsset.large_url) {
      assert.strictEqual(asset.large_url, opts.expectedAsset.large_url);
    }
    if (asset.mime || opts.expectedAsset.mime) {
      assert.strictEqual(asset.mime, opts.expectedAsset.mime);
    }
    if (asset.source || opts.expectedAsset.source) {
      assert.strictEqual(asset.source, opts.expectedAsset.source);
    }
  }

  // Ensure that all link specific properties are present
  if (asset.type === 'link') {
    assert.ok(asset.url);
    if (opts.expectedAsset) {
      assert.strictEqual(asset.url, opts.expectedAsset.url);
    }
  }

  // Ensure that all file specific properties are present
  if (asset.type === 'file') {
    assert.ok(asset.mime);

    // Ensure a correct download URL has been provided
    assert.ok(asset.download_url);
    var validationResult = Joi.validate(asset.download_url, Joi.string().uri().required());
    assert.ok(!validationResult.error);

    if (opts.expectedAsset) {
      assert.strictEqual(asset.download_url, opts.expectedAsset.download_url);
      assert.strictEqual(asset.mime, opts.expectedAsset.mime);
    }
  }

  // Ensure that all whiteboard specific properties are present
  if (asset.type === 'whiteboard' && opts.expectWhiteboardElements) {
    assert.ok(_.isArray(asset.whiteboard_elements));
  }
};

/**
 * Assert that a comment has all expected properties
 *
 * @param  {Comment}            comment                       The asset to assert the properties for
 * @param  {Object}             [opts]                        Optional parameters to verify the comment with
 * @param  {Comment}            [opts.expectedComment]        The comment to which the provided comment should be compared
 * @throws {AssertionError}                                   Error thrown when an assertion failed
 */
var assertComment = module.exports.assertComment = function(comment, opts) {
  opts = opts || {};

  // Ensure that all expected properties are present
  assert.ok(comment);
  assert.ok(comment.id);
  assert.ok(comment.user_id);
  assert.ok(comment.asset_id);
  assert.ok(comment.body);

  assert.ok(comment.user);
  assert.ok(comment.user.id);
  assert.strictEqual(comment.user_id, comment.user.id);
  assert.ok(comment.user.canvas_course_role);
  assert.ok(comment.user.canvas_full_name);
  assert.ok(!comment.user.bookmarklet_token);
  assert.ok(!comment.user.points);
  assert.ok(!comment.user.share_points);

  // Ensure that all the comment properties are the same as the ones for
  // the expected comment
  if (opts.expectedComment) {
    assert.strictEqual(comment.id, opts.expectedComment.id);
    assert.strictEqual(comment.user_id, opts.expectedComment.user_id);
    assert.strictEqual(comment.asset_id, opts.expectedComment.asset_id);
    assert.strictEqual(comment.body, opts.expectedComment.body);

    assert.strictEqual(comment.user.id, opts.expectedComment.user.id);
    assert.strictEqual(comment.user.canvas_course_role, opts.expectedComment.user.canvas_course_role);
    assert.strictEqual(comment.user.canvas_full_name, opts.expectedComment.user.canvas_full_name);

    // Ensure that all optional properties are the same as the ones for the
    // expected comment
    if (comment.parent_id || opts.expectedComment.parent_id) {
      assert.strictEqual(comment.parent_id, opts.expectedComment.parent_id);
    }
    if (comment.user.canvas_image || opts.expectedComment.user.canvas_image) {
      assert.strictEqual(comment.user.canvas_image, opts.expectedComment.user.canvas_image);
    }
  }
};

/**
 * Assert that a new link asset can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             title                           The title of the link
 * @param  {String}             url                             The url of the link
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number[]}           [opts.categories]               The ids of the categories to which the link should be associated
 * @param  {String}             [opts.description]              The description of the link
 * @param  {String}             [opts.source]                   The source of the link
 * @param  {String}             [opts.visible]                  Whether the link will be visible in the assets library list
 * @param  {Function}           callback                        Standard callback function
 * @param  {Asset}              callback.asset                  The created link asset
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateLink = module.exports.assertCreateLink = function(client, course, title, url, opts, callback) {
  opts = opts || {};

  client.assets.createLink(course, title, url, opts, function(err, asset) {
    assert.ok(!err);
    assert.ok(asset);
    assertAsset(asset, {
      'expectedCommentCount': 0,
      'expectComments': true,
      'expectCategories': true,
      'expectVisible': opts.visible !== false
    });
    assert.strictEqual(asset.type, 'link');
    assert.strictEqual(asset.url, url);
    if (title) {
      assert.strictEqual(asset.title, title);
    } else {
      assert.strictEqual(asset.title, url);
    }

    if (opts.categories) {
      var categories = _.isArray(opts.categories) ? opts.categories : [opts.categories];
      assert.strictEqual(asset.categories.length, categories.length);
      _.each(asset.categories, function(category) {
        assert.ok(_.includes(categories, category.id));
      });
    }

    if (opts.description) {
      assert.strictEqual(asset.description, opts.description);
    }
    if (opts.source) {
      assert.strictEqual(asset.source, opts.source);
    }

    return callback(asset);
  });
};

/**
 * Assert that a new link asset can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             title                           The title of the link
 * @param  {String}             url                             The url of the link
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {String}             [opts.description]              The description of the link
 * @param  {String}             [opts.source]                   The source of the link
 * @param  {String}             [opts.visible]                  Whether the link will be visible in the assets library list
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateLinkFails = module.exports.assertCreateLinkFails = function(client, course, title, url, opts, code, callback) {
  client.assets.createLink(course, title, url, opts, function(err, asset) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!asset);

    return callback();
  });
};

/**
 * Assert that a new link asset can be created through the Bookmarklet
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             userId                          The id of the user creating the link
 * @param  {String}             bookmarkletToken                The bookmarklet access token for the user
 * @param  {String}             title                           The title of the link
 * @param  {String}             url                             The url of the link
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number[]}           [opts.categories]               The ids of the categories to which the link should be associated
 * @param  {String}             [opts.description]              The description of the link
 * @param  {String}             [opts.source]                   The source of the link
 * @param  {Function}           callback                        Standard callback function
 * @param  {Asset}              callback.asset                  The created link asset
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateLinkBookmarklet = module.exports.assertCreateLinkBookmarklet = function(client, course, userId, bookmarkletToken, title, url, opts, callback) {
  opts = opts || {};

  client.assets.bookmarklet.createLink(course, userId, bookmarkletToken, title, url, opts, function(err, asset) {
    assert.ok(!err);
    assert.ok(asset);
    assertAsset(asset, {'expectedCommentCount': 0, 'expectComments': true, 'expectCategories': true});
    assert.strictEqual(asset.type, 'link');
    assert.strictEqual(asset.users[0].id, userId);
    assert.strictEqual(asset.url, url);
    if (title) {
      assert.strictEqual(asset.title, title);
    } else {
      assert.strictEqual(asset.title, url);
    }

    if (opts.categories) {
      var categories = _.isArray(opts.categories) ? opts.categories : [opts.categories];
      assert.strictEqual(asset.categories.length, categories.length);
      _.each(asset.categories, function(category) {
        assert.ok(_.includes(categories, category.id));
      });
    }

    if (opts.description) {
      assert.strictEqual(asset.description, opts.description);
    }
    if (opts.source) {
      assert.strictEqual(asset.source, opts.source);
    }

    return callback(asset);
  });
};

/**
 * Assert that a new link asset can not be created through the Bookmarklet
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             userId                          The id of the user creating the link
 * @param  {String}             bookmarkletToken                The bookmarklet access token for the user
 * @param  {String}             title                           The title of the link
 * @param  {String}             url                             The url of the link
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {String}             [opts.description]              The description of the link
 * @param  {String}             [opts.source]                   The source of the link
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateLinkBookmarkletFails = module.exports.assertCreateLinkBookmarkletFails = function(client, course, userId, bookmarkletToken, title, url, opts, code, callback) {
  client.assets.bookmarklet.createLink(course, userId, bookmarkletToken, title, url, opts, function(err, asset) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!asset);

    return callback();
  });
};

/**
 * Assert that a new file asset can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             title                           The title of the file
 * @param  {Stream}             file                            The file to upload
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number[]}           [opts.categories]               The ids of the categories to which the file should be associated
 * @param  {String}             [opts.description]              The description of the file
 * @param  {String}             [opts.source]                   The source of the file
 * @param  {String}             [opts.visible]                  Whether the file will be visible in the assets library list
 * @param  {Function}           callback                        Standard callback function
 * @param  {Asset}              callback.asset                  The created file asset
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateFile = module.exports.assertCreateFile = function(client, course, title, file, opts, callback) {
  opts = opts || {};

  // The file will be uploaded to Canvas
  CanvasTestsUtil.mockFileUpload(course);

  client.assets.createFile(course, title, file, opts, function(err, asset, response) {
    assert.ok(!err);
    assert.ok(asset);
    assertAsset(asset, {
      'expectedCommentCount': 0,
      'expectComments': true,
      'expectCategories': true,
      'expectVisible': opts.visible !== false
    });
    assert.strictEqual(asset.type, 'file');

    // If no title was provided, it should default to the file name
    if (title) {
      assert.strictEqual(asset.title, title);
    } else {
      assert.strictEqual(asset.title, path.basename(file.path));
    }

    if (opts.categories) {
      var categories = _.isArray(opts.categories) ? opts.categories : [opts.categories];
      assert.strictEqual(asset.categories.length, categories.length);
      _.each(asset.categories, function(category) {
        assert.ok(_.includes(categories, category.id));
      });
    }

    if (opts.description) {
      assert.strictEqual(asset.description, opts.description);
    }
    if (opts.source) {
      assert.strictEqual(asset.source, opts.source);
    }

    return callback(asset);
  });
};

/**
 * Assert that a new file asset can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             title                           The title of the file
 * @param  {Stream}             file                            The file to upload
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {String}             [opts.description]              The description of the file
 * @param  {String}             [opts.source]                   The source of the file
 * @param  {String}             [opts.visible]                  Whether the file will be visible in the assets library list
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateFileFails = module.exports.assertCreateFileFails = function(client, course, title, file, opts, code, callback) {
  client.assets.createFile(course, title, file, opts, function(err, asset, response) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!asset);

    return callback();
  });
};

/**
 * Assert that an asset can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the asset
 * @param  {Asset}              [expectedAsset]                 The expected asset to be retrieved
 * @param  {Number}             [expectedCommentCount]          The total number of comments that are expected on the asset
 * @param  {Function}           callback                        Standard callback function
 * @param  {Asset}              callback.asset                  The retrieved asset
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetAsset = module.exports.assertGetAsset = function(client, course, id, expectedAsset, expectedCommentCount, callback) {
  client.assets.getAsset(course, id, null, function(err, asset) {
    assert.ok(!err);
    assert.ok(asset);
    assert.strictEqual(asset.id, id);
    var expectations = {
      'expectedAsset': expectedAsset,
      'expectedCommentCount': expectedCommentCount,
      'expectComments': true,
      'expectCategories': true,
      'incrementViews': true
    };

    if (asset.type === 'whiteboard') {
      expectations.expectWhiteboardElements = true;
    }

    assertAsset(asset, expectations);

    return callback(asset);
  });
};

/**
 * Assert that an asset can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the asset
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetAssetFails = module.exports.assertGetAssetFails = function(client, course, id, code, callback) {
  client.assets.getAsset(course, id, null, function(err, asset) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!asset);

    return callback();
  });
};

/**
 * Assert that the assets for a course can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Object}             [filters]                       A set of options to filter the results by
 * @param  {String}             [filters.keywords]              A string to filter the assets by
 * @param  {Number}             [filters.category]              The id of the category to filter the assets by
 * @param  {Number}             [filters.user]                  The id of the user who created the assets
 * @param  {String[]}           [filters.types]                 The type of assets. One or more of `CollabosphereConstants.ASSET.ASSET_TYPES`
 * @param  {Number}             [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}             [offset]                        The number to start paging from. Defaults to 0
 * @param  {Number}             [expectedTotal]                 The expected total number of assets in the current course
 * @param  {Function}           callback                        Standard callback function
 * @param  {Object}             callback.assets                 The retrieved assets
 * @param  {Number}             callback.assets.offset          The number the assets are paged from
 * @param  {Number}             callback.assets.total           The total number of assets in the current course
 * @param  {Asset[]}            callback.assets.results         The paged assets in the current course
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetAssets = module.exports.assertGetAssets = function(client, course, filters, limit, offset, expectedTotal, callback) {
  filters = filters || {};
  client.assets.getAssets(course, filters, limit, offset, function(err, assets) {
    assert.ok(!err);
    assert.ok(assets);
    assert.ok(_.isNumber(assets.offset));
    if (_.isNumber(offset)) {
      assert.strictEqual(assets.offset, offset);
    }
    assert.ok(assets.results);
    assert.ok(assets.results.length <= assets.total);
    if (_.isNumber(expectedTotal)) {
      assert.strictEqual(assets.total, expectedTotal);
    }
    _.each(assets.results, function(asset) {
      assertAsset(asset);

      // Only visible assets should be returned when listing the assets
      assert.strictEqual(asset.visible, true);

      if (filters.keywords) {
        var keywords = filters.keywords.toLowerCase().split(' ');
        _.each(keywords, function(keyword) {
          var titleContainsKeyword = (asset.title.toLowerCase().indexOf(keyword) !== -1);
          var descriptionContainsKeyword = false;
          if (asset.description) {
            descriptionContainsKeyword = asset.description.toLowerCase().indexOf(keyword) !== -1;
          }
          assert.ok(titleContainsKeyword || descriptionContainsKeyword);
        });
      }
      if (filters.types) {
        assert.ok(_.includes(filters.types, asset.type));
      }
    });

    return callback(assets);
  });
};

/**
 * Assert that the assets for a course can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Object}             [filters]                       A set of options to filter the results by
 * @param  {String}             [filters.keywords]              A string to filter the assets by
 * @param  {Number}             [filters.category]              The id of the category to filter the assets by
 * @param  {Number}             [filters.user]                  The id of the user who created the assets
 * @param  {String[]}           [filters.types]                 The type of assets. One or more of `CollabosphereConstants.ASSET.ASSET_TYPES`
 * @param  {Number}             [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}             [offset]                        The number to start paging from. Defaults to 0
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetAssetsFails = module.exports.assertGetAssetsFails = function(client, course, filters, limit, offset, code, callback) {
  client.assets.getAssets(course, filters, limit, offset, function(err, assets) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!assets);

    return callback();
  });
};

/**
 * Assert that an asset can be edited
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the asset that is being edited
 * @param  {String}             title                           The updated title of the asset
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number[]}           [opts.categories]               The updated ids of the categories to which the asset should be associated
 * @param  {String}             [opts.description]              The updated description of the asset
 * @param  {Function}           callback                        Standard callback function
 * @param  {Asset}              callback.asset                  The updated asset
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertEditAsset = module.exports.assertEditAsset = function(client, course, id, title, opts, callback) {
  opts = opts || {};

  client.assets.editAsset(course, id, title, opts, function(err, asset) {
    assert.ok(!err);
    assert.ok(asset);
    assertAsset(asset, {'expectComments': true, 'expectCategories': true});
    assert.strictEqual(asset.title, title);

    opts.categories = opts.categories || [];
    opts.categories = _.isArray(opts.categories) ? opts.categories : [opts.categories];
    assert.strictEqual(asset.categories.length, opts.categories.length);
    _.each(asset.categories, function(category) {
      assert.ok(_.includes(opts.categories, category.id));
    });

    if (opts.description) {
      assert.strictEqual(asset.description, opts.description);
    } else {
      assert.ok(!asset.description);
    }

    return callback(asset);
  });
};

/**
 * Assert that an asset can not be edited
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the asset that is being edited
 * @param  {String}             title                           The updated title of the asset
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number[]}           [opts.categories]               The updated ids of the categories to which the asset should be associated
 * @param  {String}             [opts.description]              The updated description of the asset
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @param  {Asset}              callback.asset                  The updated asset
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertEditAssetFails = module.exports.assertEditAssetFails = function(client, course, id, title, opts, code, callback) {
  client.assets.editAsset(course, id, title, opts, function(err, asset) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!asset);

    return callback();
  });
};

/**
 * Assert that an asset can be deleted
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the asset that is being deleted
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteAsset = module.exports.assertDeleteAsset = function(client, course, id, callback) {
  client.assets.deleteAsset(course, id, function(err) {
    assert.ok(!err);

    // Verify that the asset no longer exists
    client.assets.getAsset(course, id, null, function(err, asset) {
      assert.ok(err);
      assert.strictEqual(err.code, 404);
      assert.ok(!asset);

      return callback();
    });
  });
};

/**
 * Assert that an asset can not be deleted
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the asset that is being deleted
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteAssetFails = module.exports.assertDeleteAssetFails = function(client, course, id, code, callback) {
  client.assets.deleteAsset(course, id, function(err) {
    assert.ok(err);
    assert.strictEqual(err.code, code);

    return callback();
  });
};

/**
 * Assert that a new comment can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset to which the comment is added
 * @param  {String}             body                            The body of the comment
 * @param  {Number}             [parent]                        The id of the comment to which the comment is a reply
 * @param  {Function}           callback                        Standard callback function
 * @param  {Comment}            callback.comment                The created comment
 * @param  {User}               callback.comment.user           The user that created the comment
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateComment = module.exports.assertCreateComment = function(client, course, assetId, body, parent, callback) {
  // Get the asset on which a comment is being made
  client.assets.getAsset(course, assetId, false, function(err, originalAsset) {
    assert.ok(!err);
    assert.ok(originalAsset);

    // Create the comment
    client.assets.createComment(course, assetId, body, parent, function(err, comment) {
      assert.ok(!err);
      assert.ok(comment);
      assertComment(comment);
      assert.strictEqual(comment.asset_id, assetId);
      assert.strictEqual(comment.body, body);
      if (parent) {
        assert.strictEqual(comment.parent_id, parent);
      }

      // Verify that the comment count has been increased
      client.assets.getAsset(course, assetId, false, function(err, asset) {
        assert.ok(!err);
        assert.ok(asset);
        assert.strictEqual(asset.comment_count, originalAsset.comment_count + 1);

        return callback(comment);
      });
    });
  });
};

/**
 * Assert that a new comment can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset to which the comment is added
 * @param  {String}             body                            The body of the comment
 * @param  {Number}             [parent]                        The id of the comment to which the comment is a reply
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateCommentFails = module.exports.assertCreateCommentFails = function(client, course, assetId, body, parent, code, callback) {
  client.assets.createComment(course, assetId, body, parent, function(err, comment) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!comment);

    return callback();
  });
};

/**
 * Assert that a comment can be edited
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset to which the comment belongs
 * @param  {Number}             id                              The id of the comment that is being edited
 * @param  {String}             body                            The updated comment body
 * @param  {Function}           callback                        Standard callback function
 * @param  {Comment}            callback.comment                The updated comment
 * @param  {User}               callback.comment.user           The user that created the comment
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertEditComment = module.exports.assertEditComment = function(client, course, assetId, id, body, callback) {
  client.assets.editComment(course, assetId, id, body, function(err, comment) {
    assert.ok(!err);
    assert.ok(comment);
    assertComment(comment);
    assert.strictEqual(comment.id, id);
    assert.strictEqual(comment.body, body);

    return callback(comment);
  });
};

/**
 * Assert that a comment can not be edited
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset to which the comment belongs
 * @param  {Number}             id                              The id of the comment that is being edited
 * @param  {String}             body                            The updated comment body
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertEditCommentFails = module.exports.assertEditCommentFails = function(client, course, assetId, id, body, code, callback) {
  client.assets.editComment(course, assetId, id, body, function(err, comment) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!comment);

    return callback();
  });
};

/**
 * Assert that a comment can be deleted
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset to which the comment belongs
 * @param  {Number}             id                              The id of the comment that is being deleted
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteComment = module.exports.assertDeleteComment = function(client, course, assetId, id, callback) {
  // Verify the comment is present before it is deleted
  client.assets.getAsset(course, assetId, false, function(err, originalAsset) {
    assert.ok(!err);
    assertComment(_.find(originalAsset.comments, {'id': id}));

    client.assets.deleteComment(course, assetId, id, function(err) {
      assert.ok(!err);

      // Verify the comment is no longer present
      client.assets.getAsset(course, assetId, false, function(err, asset) {
        assert.ok(!err);
        assert.strictEqual(asset.comment_count, originalAsset.comment_count - 1);
        assert.strictEqual(asset.comments.length, originalAsset.comments.length - 1);
        assert.ok(!_.find(asset.comments, {'id': id}));

        return callback();
      });
    });
  });
};

/**
 * Assert that a comment can not be deleted
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset to which the comment belongs
 * @param  {Number}             id                              The id of the comment that is being deleted
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteCommentFails = module.exports.assertDeleteCommentFails = function(client, course, assetId, id, code, callback) {
  client.assets.deleteComment(course, assetId, id, function(err) {
    assert.ok(err);
    assert.strictEqual(err.code, code);

    return callback();
  });
};

/**
 * Assert that an asset can be liked or disliked
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset that is liked or disliked
 * @param  {Boolean}            [like]                          `true` when the asset should be liked, `false` when the asset should be disliked. When `null` is provided, the previous like or dislike will be undone
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertLike = module.exports.assertLike = function(client, course, assetId, like, callback) {
  // Retrieve the asset before the like
  assertGetAsset(client, course, assetId, null, null, function(originalAsset) {

    client.assets.like(course, assetId, like, function(err) {
      assert.ok(!err);

      // Retrieve the asset after the like
      assertGetAsset(client, course, assetId, null, null, function(asset) {
        assert.strictEqual(asset.liked, like);
        // The asset was not liked or disliked before
        if (originalAsset.liked === null) {
          if (like === null) {
            assert.strictEqual(asset.likes, originalAsset.likes);
            assert.strictEqual(asset.dislikes, originalAsset.dislikes);
          } else if (like === true) {
            assert.strictEqual(asset.likes, originalAsset.likes + 1);
            assert.strictEqual(asset.dislikes, originalAsset.dislikes);
          } else if (like === false) {
            assert.strictEqual(asset.likes, originalAsset.likes);
            assert.strictEqual(asset.dislikes, originalAsset.dislikes + 1);
          }
        // The asset was liked before
        } else if (originalAsset.liked === true) {
          if (like === null) {
            assert.strictEqual(asset.likes, originalAsset.likes - 1);
            assert.strictEqual(asset.dislikes, originalAsset.dislikes);
          } else if (like === true) {
            assert.strictEqual(asset.likes, originalAsset.likes);
            assert.strictEqual(asset.dislikes, originalAsset.dislikes);
          } else if (like === false) {
            assert.strictEqual(asset.likes, originalAsset.likes - 1);
            assert.strictEqual(asset.dislikes, originalAsset.dislikes + 1);
          }
        // The asset was disliked before
        } else if (originalAsset.liked === false) {
          if (like === null) {
            assert.strictEqual(asset.likes, originalAsset.likes);
            assert.strictEqual(asset.dislikes, originalAsset.dislikes - 1);
          } else if (like === true) {
            assert.strictEqual(asset.likes, originalAsset.likes + 1);
            assert.strictEqual(asset.dislikes, originalAsset.dislikes - 1);
          } else if (like === false) {
            assert.strictEqual(asset.likes, originalAsset.likes);
            assert.strictEqual(asset.dislikes, originalAsset.dislikes);
          }
        }

        return callback();
      });
    });
  });
};

/**
 * Assert that an asset can not be liked or disliked
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset that is liked or disliked
 * @param  {Boolean}            [like]                          `true` when the asset should be liked, `false` when the asset should be disliked. When `null` is provided, the previous like or dislike will be undone
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertLikeFails = module.exports.assertLikeFails = function(client, course, assetId, like, code, callback) {
  client.assets.like(course, assetId, like, function(err) {
    assert.ok(err);
    assert.strictEqual(err.code, code);

    return callback();
  });
};
