/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');
var fs = require('fs');
var randomstring = require('randomstring');

var TestsUtil = require('col-tests');
var UsersTestUtil = require('col-users/tests/util');

var AssetsTestUtil = require('./util');

describe('Assets', function() {

  /**
   * Get a file stream
   *
   * @param  {String}   filename    The name of the file in the `data` directory
   * @return {Stream}               A readable stream to the file on disk
   */
  var getFileStream = function(filename) {
    return fs.createReadStream(__dirname + '/data/' + filename);
  };

  describe('Create new assets', function() {

    describe('Links', function() {

      /**
       * Test that verifies that a new link asset can be created
       */
      it('can be created', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          // Create a link asset with no optional metadata
          AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

            // Create a link asset with no title. This should default the title to the provided URL
            var url = 'http://uci.edu';
            AssetsTestUtil.assertCreateLink(client, course, null, url, null, function(asset) {
              assert.equal(asset.title, url);

              // Create a link asset with optional metadata
              var opts = {
                'description': 'University of California, Berkeley homepage',
                'source': 'http://www.universityofcalifornia.edu/uc-system'
              };
              AssetsTestUtil.assertCreateLink(client, course, 'UC Berkeley', 'http://www.berkeley.edu/', opts, function(asset) {

                return callback();
              });
            });
          });
        });
      });

      /**
       * Test that verifies validation when creating a new link asset
       */
      it('is validated', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          // Too long title
          AssetsTestUtil.assertCreateLinkFails(client, course, randomstring.generate(256), 'http://www.berkeley.edu/', null, 400, function() {

            // Missing URL
            AssetsTestUtil.assertCreateLinkFails(client, course, 'UC Berkeley', null, null, 400, function() {
              // Invalid URL
              AssetsTestUtil.assertCreateLinkFails(client, course, 'UC Berkeley', 'invalid url', null, 400, function() {
                AssetsTestUtil.assertCreateLinkFails(client, course, 'UC Berkeley', '/invalidurl', null, 400, function() {
                  // Too long URL
                  AssetsTestUtil.assertCreateLinkFails(client, course, 'UC Berkeley', 'http://www.berkeley.edu/?q=' + randomstring.generate(229), null, 400, function() {

                    // Invalid source
                    AssetsTestUtil.assertCreateLinkFails(client, course, 'UC Berkeley', 'http://www.berkeley.edu/', {'source': 'invalid url'}, 400, function() {
                      AssetsTestUtil.assertCreateLinkFails(client, course, 'UC Berkeley', 'http://www.berkeley.edu/', {'source': '/invalidurl'}, 400, function() {

                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    describe('File', function() {

      /**
       * Test that verifies that a new file asset can be created
       */
      it('can be created', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          // Create a file asset with no optional metadata
          AssetsTestUtil.assertCreateFile(client, course, 'UC Davis', getFileStream('logo-ucberkeley.png'), null, function(asset) {

            // Create a file asset with no title. This should default the title to the name of the file
            AssetsTestUtil.assertCreateFile(client, course, null, getFileStream('logo-ucberkeley.png'), null, function(asset) {
              assert.equal(asset.title, 'logo-ucberkeley.png');

              // Create a file asset with optional metadata
              var opts = {
                'description': 'University of California, Berkeley logo',
                'source': 'http://www.universityofcalifornia.edu/uc-system'
              };
              AssetsTestUtil.assertCreateFile(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), opts, function(asset) {

                return callback();
              });
            });
          });
        });
      });

      /**
       * Test that verifies validation when creating a new file asset
       */
      it('is validated', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          // Missing file
          AssetsTestUtil.assertCreateFileFails(client, course, 'UC Berkeley', null, null, 400, function() {
            // Invalid file
            AssetsTestUtil.assertCreateFileFails(client, course, 'UC Berkeley', 'invalid file', null, 400, function() {
              AssetsTestUtil.assertCreateFileFails(client, course, 'UC Berkeley', '42', null, 400, function() {

                // Invalid source
                AssetsTestUtil.assertCreateFileFails(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), {'source': 'invalid url'}, 400, function() {
                  AssetsTestUtil.assertCreateFileFails(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), {'source': '/invalidurl'}, 400, function() {

                    return callback();
                  });
                });
              });
            });
          });
        });
      });
    });

    describe('Bookmarklet', function() {

      /**
       * Test that verifies that a new link asset can be created through the Bookmarklet
       */
      it('can be created', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          UsersTestUtil.assertGetMe(client, course, null, function(me) {
            var bookmarkletClient = TestsUtil.getAnonymousClient();

            // Create a link asset with no optional metadata
            AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

              // Create a link asset with no title. This should default the title to the provided URL
              var url = 'http://uci.edu';
              AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, null, url, null, function(asset) {
                assert.equal(asset.title, url);

                // Create a link asset with optional metadata
                var opts = {
                  'description': 'University of California, Berkeley homepage',
                  'source': 'http://www.universityofcalifornia.edu/uc-system'
                };
                AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', opts, function(asset) {

                  return callback();
                });
              });
            });
          });
        });
      });

      /**
       * Test that verifies validation when creating a new link asset through the Bookmarklet
       */
      it('is validated', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          UsersTestUtil.assertGetMe(client, course, null, function(me) {
            var bookmarkletClient = TestsUtil.getAnonymousClient();

            // Too long title
            AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, randomstring.generate(256), 'http://www.berkeley.edu/', null, 400, function() {

              // Missing URL
              AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', null, null, 400, function() {
                // Invalid URL
                AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'invalid url', null, 400, function() {
                  AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', '/invalidurl', null, 400, function() {
                    // Too long URL
                    AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/?q=' + randomstring.generate(229), null, 400, function() {

                      // Invalid source
                      AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', {'source': 'invalid url'}, 400, function() {
                        AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', {'source': '/invalidurl'}, 400, function() {

                          return callback();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });

      /**
       * Test that verifies authorization when creating a new link asset through the Bookmarklet
       */
      it('verifies bookmarklet token authorization', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          UsersTestUtil.assertGetMe(client, course, null, function(me) {
            var bookmarkletClient = TestsUtil.getAnonymousClient();

            // Missing token and user id
            AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, null, null, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {
              // Missing token
              AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, null, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {
                // Missing user id
                AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, null, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {

                  // Incorrect token
                  TestsUtil.getAssetLibraryClient(null, course, null, function(otherClient, course, otherUser) {
                    UsersTestUtil.assertGetMe(otherClient, course, null, function(otherMe) {
                      AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, otherMe.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {
                        // Incorrect user id
                        AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, otherMe.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {

                          // Ensure that the second user can create a new link asset through the Bookmarklet as well
                          AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, otherMe.id, otherMe.bookmarklet_token, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

                            return callback();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Get asset', function() {

    /**
     * Test that verifies that an asset can be retrieved
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        // Create a link asset with no optional metadata
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {
          AssetsTestUtil.assertGetAsset(client, course, asset.id, asset, 0, function(asset) {

            // Create a link asset with optional metadata
            var opts = {
              'description': 'University of California, Berkeley homepage',
              'source': 'http://www.universityofcalifornia.edu/uc-system'
            };
            AssetsTestUtil.assertCreateLink(client, course, 'UC Berkeley', 'http://www.berkeley.edu/', opts, function(asset) {
              AssetsTestUtil.assertGetAsset(client, course, asset.id, asset, 0, function(asset) {

                // Create a file asset with no optional metadata
                AssetsTestUtil.assertCreateFile(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), null, function(asset) {
                  AssetsTestUtil.assertGetAsset(client, course, asset.id, asset, 0, function(asset) {

                    // Create a file asset with optional metadata
                    opts = {
                      'description': 'University of California, Berkeley logo',
                      'source': 'http://www.universityofcalifornia.edu/uc-system'
                    };
                    AssetsTestUtil.assertCreateFile(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), opts, function(asset) {
                      AssetsTestUtil.assertGetAsset(client, course, asset.id, asset, 0, function(asset) {

                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies validation when retrieving an asset
     */
    it('is validated', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Invalid asset id
          AssetsTestUtil.assertGetAssetFails(client, course, 'Not a number', 400, function() {
            AssetsTestUtil.assertGetAssetFails(client, course, -1, 404, function() {
              AssetsTestUtil.assertGetAssetFails(client, course, 234234233, 404, function() {

                return callback();
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies authorization when retrieving an asset
     */
    it('verifies asset retrieval authorization', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Verify that a user from a different course is not able to retrieve the created asset
          TestsUtil.getAssetLibraryClient(null, null, null, function(otherClient, otherCourse, otherUser) {
            AssetsTestUtil.assertGetAssetFails(otherClient, otherCourse, asset.id, 404, function(asset) {

              return callback();
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the total number of asset views is updated correctly
     */
    it('increments total number of views', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
          AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {
            assert.strictEqual(asset.views, 0);

            // Verify the total number of views is incremented
            AssetsTestUtil.assertGetAsset(client1, course, asset.id, asset, 0, function(asset) {
              assert.strictEqual(asset.views, 1);

              // Verify the total number of views is incremented again when requested by a different user
              AssetsTestUtil.assertGetAsset(client2, course, asset.id, asset, 0, function(asset) {
                assert.strictEqual(asset.views, 2);

                return callback();
              });
            });
          });
        });
      });
    });
  });

  describe('Get assets', function() {

    /**
     * Test that verifies that the assets in a course can be retrieved
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        // Retrieve the empty course asset list
        AssetsTestUtil.assertGetAssets(client1, course, null, null, 0, function(assets) {

          // Add a link and verify that is returned as part of the course asset list
          AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset1) {
            AssetsTestUtil.assertGetAssets(client1, course, null, null, 1, function(assets) {
              AssetsTestUtil.assertAsset(assets.results[0], {'expectedAsset': asset1});

              // Add another link as a second user and verify that is also returned as part of the course asset list
              TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
                AssetsTestUtil.assertCreateLink(client2, course, 'UC Berkeley', 'http://www.berkeley.edu/', null, function(asset2) {
                  AssetsTestUtil.assertGetAssets(client2, course, null, null, 2, function(assets) {
                    // The results are expected to return in descending creation date order
                    AssetsTestUtil.assertAsset(assets.results[0], {'expectedAsset': asset2});
                    AssetsTestUtil.assertAsset(assets.results[1], {'expectedAsset': asset1});

                    // Add a file and verify that it is returned as part of the course asset list
                    var opts = {
                      'description': 'University of California, Berkeley logo',
                      'source': 'http://www.universityofcalifornia.edu/uc-system'
                    };
                    AssetsTestUtil.assertCreateFile(client2, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), opts, function(asset3) {
                      AssetsTestUtil.assertGetAssets(client2, course, null, null, 3, function(assets) {
                        // The results are expected to return in descending creation date order
                        AssetsTestUtil.assertAsset(assets.results[0], {'expectedAsset': asset3});
                        AssetsTestUtil.assertAsset(assets.results[1], {'expectedAsset': asset2});
                        AssetsTestUtil.assertAsset(assets.results[2], {'expectedAsset': asset1});

                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the assets in a course can be paged
     */
    it('can be paged', function(callback) {
      // Generate a number of test assets for a course
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        TestsUtil.generateTestAssets(client, course, 12, function(assets) {

          // The results are expected to return in descending creation date order
          assets = _.sortBy(assets, 'created_at').reverse();

          // Verify that the page size defaults to 10 and the page defaults to the first page
          AssetsTestUtil.assertGetAssets(client, course, null, null, 12, function(pagedAssets) {
            assert.strictEqual(pagedAssets.results.length, 10);
            _.each(pagedAssets.results, function(pagedAsset, index) {
              AssetsTestUtil.assertAsset(pagedAsset, {'expectedAsset': assets[index]});
            });

            // Verify that the second page can be retrieved
            AssetsTestUtil.assertGetAssets(client, course, null, 10, 12, function(pagedAssets) {
              assert.strictEqual(pagedAssets.results.length, 2);
              _.each(pagedAssets.results, function(pagedAsset, index) {
                AssetsTestUtil.assertAsset(pagedAsset, {'expectedAsset': assets[10 + index]});
              });

              // Verify that a custom page size can be specified
              AssetsTestUtil.assertGetAssets(client, course, 5, 0, 12, function(pagedAssets) {
                assert.strictEqual(pagedAssets.results.length, 5);
                _.each(pagedAssets.results, function(pagedAsset, index) {
                  AssetsTestUtil.assertAsset(pagedAsset, {'expectedAsset': assets[index]});
                });
                // Get the second page using the custom page size
                AssetsTestUtil.assertGetAssets(client, course, 5, 5, 12, function(pagedAssets) {
                  assert.strictEqual(pagedAssets.results.length, 5);
                  _.each(pagedAssets.results, function(pagedAsset, index) {
                    AssetsTestUtil.assertAsset(pagedAsset, {'expectedAsset': assets[5 + index]});
                  });
                  // Get the last page using the custom page size
                  AssetsTestUtil.assertGetAssets(client, course, 5, 10, 12, function(pagedAssets) {
                    assert.strictEqual(pagedAssets.results.length, 2);
                    _.each(pagedAssets.results, function(pagedAsset, index) {
                      AssetsTestUtil.assertAsset(pagedAsset, {'expectedAsset': assets[10 + index]});
                    });
                    // Verify that further pages will be empty
                    AssetsTestUtil.assertGetAssets(client, course, 5, 15, 12, function(pagedAssets) {
                      assert.strictEqual(pagedAssets.results.length, 0);

                      return callback();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Edit asset', function() {

    /**
     * Test that verifies that an asset can be edited
     */
    it('can be edited', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Verify that the title and the description can be updated
          AssetsTestUtil.assertEditAsset(client, course, asset.id, 'UC Berkeley', {'description': 'University of California, Berkeley'}, function(asset) {

            // Verify that the title can be updated and the description can be cleared
            AssetsTestUtil.assertEditAsset(client, course, asset.id, 'UC Berkeley', null, function(asset) {

              return callback();
            });
          });
        });
      });
    });

    /**
     * Test that verifies validation when editing an asset
     */
    it('is validated', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Invalid asset id
          AssetsTestUtil.assertEditAssetFails(client, course, 'Not a number', 'UC Irvine', null, 400, function() {
            AssetsTestUtil.assertEditAssetFails(client, course, -1, 'UC Irvine', null, 404, function() {
              AssetsTestUtil.assertEditAssetFails(client, course, 234234233, 'UC Irvine', null, 404, function() {

                // Missing title
                AssetsTestUtil.assertEditAssetFails(client, course, asset.id, null, null, 400, function() {
                  AssetsTestUtil.assertEditAssetFails(client, course, asset.id, '', null, 400, function() {
                    // Too long title
                    AssetsTestUtil.assertEditAssetFails(client, course, asset.id, randomstring.generate(256), null, 400, function() {

                      return callback();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies authorization when editing an asset
     */
    it('verifies authorization', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course1, user1) {
        AssetsTestUtil.assertCreateLink(client1, course1, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Verify that the asset can be edited by the user that added the asset
          AssetsTestUtil.assertEditAsset(client1, course1, asset.id, 'UC Berkeley', null, function(asset) {

            // Verify that the asset can be edited by an administrator of the course
            var adminUser1 = TestsUtil.generateAdminUser();
            TestsUtil.getAssetLibraryClient(null, course1, adminUser1, function(client2, course1, adminUser1) {
              AssetsTestUtil.assertEditAsset(client1, course1, asset.id, 'UCLA', null, function(asset) {

                // Verify that an asset can not be edited by a different non-administrator
                TestsUtil.getAssetLibraryClient(null, course1, null, function(client3, course1, user2) {
                  AssetsTestUtil.assertEditAssetFails(client3, course1, asset.id, 'UC Irvine', null, 401, function() {

                    // Verify that an administrator in a different course can not edit the asset
                    var adminUser2 = TestsUtil.generateAdminUser();
                    TestsUtil.getAssetLibraryClient(null, null, adminUser2, function(client4, course2, adminUser2) {
                      AssetsTestUtil.assertEditAssetFails(client4, course2, asset.id, 'UC Irvine', null, 404, function() {

                        // Verify that the asset has not been updated
                        AssetsTestUtil.assertGetAsset(client1, course1, asset.id, asset, 0, function(asset) {

                          return callback();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
