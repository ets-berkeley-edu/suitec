/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var async = require('async');
var fs = require('fs');
var os = require('os');
var path = require('path');
var request = require('request');
var util = require('util');

var ActivitiesAPI = require('col-activities');
var AssetsAPI = require('col-assets');
var CategoriesAPI = require('col-categories');
var CollabosphereConstants = require('col-core/lib/constants');
var CourseAPI = require('col-course');
var log = require('col-core/lib/logger')('col-canvas/poller');
var UsersAPI = require('col-users');

var CanvasAPI = require('./api');

// The delay between two consecutive runs
var pollingDelay = null;

// The number of milliseconds there should be between processing two courses. This alleviates
// some of the throttling restrictions that Canvas imposes on their API
var MINIMUM_INTERVAL_BETWEEN_COURSES = 5000;

/**
 * Enable the Canvas poller
 *
 * @param  {Number}   delay    The number of seconds to wait between two consecutive polling operations
 */
var enable = module.exports.enable = function(delay) {
  log.info('Enabling Canvas poller, running every %d seconds', delay);
  pollingDelay = delay * 1000;

  // Start a new poller
  poll();
};

/**
 * Poll the Canvas REST API synchronizing users and activities
 *
 * @api private
 */
var poll = function() {
  log.debug('Polling the Canvas REST API for all courses');
  var start = Date.now();

  CourseAPI.getCourses(function(err, courses) {
    if (err) {
      log.error({'err': err}, 'Failed to get all the courses, aborting poller');
      setTimeout(poll, pollingDelay);
      return;
    }

    // Canvas enforces a strict throttling scheme that forces us to not send more
    // than 1 request at a time. (see https://canvas.instructure.com/doc/api/file.throttling.html)
    // We achieve this by polling resources sequentially and using lodash's throttle function
    var throttledCourseHandling = _.throttle(handleCourse, MINIMUM_INTERVAL_BETWEEN_COURSES);
    async.eachSeries(courses, throttledCourseHandling, function(err) {
      log.info('Polling completed for %d courses, took %d ms', courses.length, (Date.now() - start));
      setTimeout(poll, pollingDelay);
    });
  });
};

/**
 * Poll the Canvas REST API for a specific course. Activities will be created
 * for all new assignments, discussion topics and/or discussion entries.
 *
 * Note that this function will not pass on any errors it encounters
 *
 * @param  {Course}       course          The course to poll
 * @param  {Function}     callback        Invoked when the course has been polled
 */
var handleCourse = module.exports.handleCourse = function(course, callback) {
  log.info({
    'course': course.id,
    'canvas_course_id': course.canvas_course_id,
    'canvas_api_domain': course.canvas_api_domain
  }, 'Polling a canvas course');

  var ctx = {
    'course': course,

    // Fake an admin user. At this point we can't reliably retrieve an admin from
    // the database as there might not be any yet
    'user': {
      'is_admin': true
    }
  };
  getAllUsers(ctx, function(err, users) {
    if (err) {
      log.error({'err': err, 'course': course.id}, 'Unable to get the users of a course, skipping further syncing for this course and moving on to the next course');

      // Swallow the error as the next course should always be attempted
      return callback();
    }

    pollAssignments(ctx, users, function(err) {
      if (err) {
        log.error({'err': err, 'course': course.id}, 'Unable to poll the assignments for a course, skipping further syncing for this course and moving on to the next course');

        // Swallow the error as the next course should always be attempted
        return callback();
      }

      pollDiscussions(ctx, users, function(err) {
        if (err) {
          // Swallow the error as the next course should always be attempted
          log.error({'err': err, 'course': course.id}, 'Unable to poll the discussions for a course, skipping further syncing for this course and moving on to the next course');
        }

        return callback();
      });
    });
  });
};

/* Users */

/**
 * Get all the users for a course
 *
 * @param  {Context}    ctx                     Standard context containing the current user and the current course
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @param  {Object}     callback.users          The users in the course indexed by their `canvas_user_id` attribute. Only the `id` and `canvas_user_id` attributes are available
 * @api private
 */
var getAllUsers = function(ctx, callback) {
  // Get all the users in the course that have been persisted already
  var enrollmentStates = _.values(CollabosphereConstants.ENROLLMENT_STATE);
  UsersAPI.getAllUsers(ctx, enrollmentStates, function(err, users) {
    if (err) {
      log.error({'err': err, 'course': ctx.course.id}, 'Failed to retrieve the collabosphere users for a course');
      return callback({'code': 500, 'msg': 'Failed to retrieve the collabosphere users for a course'});
    }

    // Index the users by their Canvas user id. This allows for quicker lookups later on
    users = _.indexBy(users, 'canvas_user_id');

    // Some students might enroll in the course later on, so we have to fetch the full set
    // of users in the course each time
    return pollUsers(ctx, users, callback);
  });
};

/**
 * Get all the enrolled users from the Canvas REST API and ensure there are corresponding
 * user objects in the database
 *
 * @param  {Context}    ctx                     Standard context containing the current user and the current course
 * @param  {Object}     users                   The previously synchronized users in the course indexed by their `canvas_user_id` attribute
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @param  {Object}     callback.users          The users in the course indexed by their `canvas_user_id` attribute. Only the `id` and `canvas_user_id` attributes are available
 * @api private
 */
var pollUsers = function(ctx, users, callback) {
  var options = {
    'enrollment_state': [
      CollabosphereConstants.ENROLLMENT_STATE.ACTIVE,
      CollabosphereConstants.ENROLLMENT_STATE.COMPLETED
      // TODO: Add invited users?
    ]
  };
  CanvasAPI.getCourseUsers(ctx.course, options, function(err, canvasUsers) {
    if (err) {
      return callback(err);
    }

    // Ensure that we have a record for each Canvas user
    var userIterator = handleUser.bind(null, ctx, users);
    async.eachSeries(canvasUsers, userIterator, function(err) {
      if (err) {
        return callback(err);
      }

      // Mark the users that have been removed from the Canvas course as inactive
      var unseenUserIds = _.chain(users)
        .values()
        .filter(function(user) {
          return (user.canvas_enrollment_state !== 'inactive' && !user.seen);
        })
        .pluck('id')
        .value();

      if (_.isEmpty(unseenUserIds)) {
        return callback(null, users);
      }

      log.debug({
        'users': unseenUserIds,
        'course': ctx.course.id
      }, 'Marking one or more users as inactive');
      UsersAPI.updateUsers(unseenUserIds, {'canvas_enrollment_state': 'inactive'}, function(err) {
        if (err) {
          return callback(err);
        }

        return callback(null, users);
      });
    });
  });
};

/**
 * Create a user account for an enrolled user if they don't have one yet
 *
 * @param  {Context}    ctx                     Standard context containing the current user and the current course
 * @param  {Object}     users                   The users in the course indexed by their `canvas_user_id` attribute. Any new users will be auto-inserted
 * @param  {Object}     canvasUser              The Canvas user object to synchronize
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @api private
 */
var handleUser = function(ctx, users, canvasUser, callback) {
  var enrollment = _.find(canvasUser.enrollments, {'course_id': ctx.course.canvas_course_id});

  // Default the enrollment state to "active"
  var enrollmentState = CollabosphereConstants.ENROLLMENT_STATE.ACTIVE;

  // Default the course role to "Student"
  var courseRole = 'Student';

  // If Canvas did not provided an enrollment state, it means the user completed the course
  if (!enrollment) {
    enrollmentState = CollabosphereConstants.ENROLLMENT_STATE.COMPLETED;

  } else if (enrollment) {
    // Use the enrollment state from Canvas if one was provided and matches a known state
    if (_.contains(_.values(CollabosphereConstants.ENROLLMENT_STATE), enrollment.enrollment_state)) {
      enrollmentState = enrollment.enrollment_state;
    }

    // Map anything with a Canvas `Teacher` enrollment role to the `Instructor` LTI role
    if (enrollment.role.indexOf('Teacher') !== -1) {
      courseRole = 'Instructor';
    }
  }

  var image = null;
  if (canvasUser.avatar_url) {
    image = canvasUser.avatar_url;
  }

  // If we've already synced the user and their information hasn't changed, we can return early
  var user = users[canvasUser.id];
  if (user && user.canvas_course_role === courseRole &&
      user.canvas_enrollment_state === enrollmentState && user.canvas_full_name === canvasUser.name &&
      user.canvas_image === image) {
    // Mark the user as seen. This allows a second pass to remove any user that wasn't seen
    users[canvasUser.id].seen = true;
    return callback();
  }

  // Otherwise we create or update a record for the user
  var defaults = {
    'canvas_course_role': courseRole,
    'canvas_enrollment_state': enrollmentState,
    'canvas_full_name': canvasUser.name
  };
  if (image) {
    defaults.canvas_image = image;
  }
  UsersAPI.getOrCreateUser(canvasUser.id, ctx.course, defaults, function(err, user) {
    if (err) {
      return callback(err);
    }

    // Add the new user into the set of synchronized course users so it can be used later on
    users[canvasUser.id] = user;

    // Mark the user as seen. This allows a second pass to remove any user that wasn't seen
    users[canvasUser.id].seen = true;
    return callback();
  });
};

/* Assignments */

/**
 * Get the assignments in a course and create activities for any submissions that were made
 *
 * @param  {Context}    ctx                     Standard context containing the current user and the current course
 * @param  {Object}     users                   The users in the course indexed by their `canvas_user_id` attribute
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @api private
 */
var pollAssignments = function(ctx, users, callback) {
  CanvasAPI.getAssignments(ctx.course, function(err, assignments) {
    if (err) {
      return callback(err);
    }

    // Get the categories in the course
    CategoriesAPI.getCategories(ctx, true, function(err, categories) {
      if (err) {
        return callback(err);
      }

      // Get the submissions for the assignment
      var assignmentIterator = handleAssignment.bind(null, ctx, users, categories);
      async.eachSeries(assignments, assignmentIterator, callback);
    });
  });
};

/**
 * Handle an assignment
 *
 * @param  {Context}          ctx                     Standard context containing the current user and the current course
 * @param  {Object}           users                   The users in the course indexed by their `canvas_user_id` attribute
 * @param  {Categories[]}     categories              The categories in the course
 * @param  {Object}           assignment              The assignment to handle
 * @param  {Function}         callback                Standard callback function
 * @param  {Object}           callback.err            An error that occurred, if any
 * @api private
 */
var handleAssignment = function(ctx, users, categories, assignment, callback) {
  // Ignore unpublished assignments
  if (!assignment.published) {
    return callback();
  }

  handleAssignmentCategory(ctx, users, categories, assignment, function(err) {
    if (err) {
      return callback(err);
    }

    handleAssignmentSubmissions(ctx, users, assignment, callback);
  });
};

/**
 * Handle the category synchronisation for an assignment. If a new category
 * gets creates it will get added to the set of categories
 *
 * @param  {Context}          ctx                     Standard context containing the current user and the current course
 * @param  {Object}           users                   The users in the course indexed by their `canvas_user_id` attribute
 * @param  {Categories[]}     categories              The categories in the course
 * @param  {Object}           assignment              The assignment to handle
 * @param  {Function}         callback                Standard callback function
 * @param  {Object}           callback.err            An error that occurred, if any
 * @api private
 */
var handleAssignmentCategory = function(ctx, users, categories, assignment, callback) {
  var category = _.find(categories, {'canvas_assignment_id': assignment.id});

  // Return early if the category already exists
  if (category && category.title === assignment.name) {
    assignment.category = category;
    return callback();

  // Update the title of the category if the name of the assignment has changed
  } else if (category && category.title !== assignment.name) {
    CategoriesAPI.editCategory(ctx, category.id, assignment.name, function(err, updatedCategory) {
      if (err) {
        return callback(err);
      }

      var i = _.indexOf(categories, {'canvas_assignment_id': assignment.id});
      categories[i] = updatedCategory;
      assignment.category = updatedCategory;
      return callback();
    });

  // Create a category for an assignment if it doesn't exist yet
  } else {
    CategoriesAPI.createCategory(ctx, assignment.name, assignment.id, function(err, newCategory) {
      if (err) {
        return callback(err);
      }

      categories.push(newCategory);
      assignment.category = newCategory;
      return callback();
    });
  }
};

/**
 * Handle the submissions for an assignment
 *
 * @param  {Context}          ctx                     Standard context containing the current user and the current course
 * @param  {Object}           users                   The users in the course indexed by their `canvas_user_id` attribute
 * @param  {Object}           assignment              The assignment to handle
 * @param  {Function}         callback                Standard callback function
 * @param  {Object}           callback.err            An error that occurred, if any
 * @api private
 */
var handleAssignmentSubmissions = function(ctx, users, assignment, callback) {
  // Check submissions
  if (!assignment.has_submitted_submissions) {
    log.debug({
      'assignment': {
        'id': assignment.id,
        'name': assignment.name
      },
      'course': ctx.course.id
    }, 'Ignoring assignment as it has no submissions yet');
    return callback();
  }

  // Reduce database querying by getting all the activities
  // related to this assignment
  var objectType = CollabosphereConstants.ACTIVITY.OBJECT_TYPES.CANVAS_SUBMISSION;
  getActivities(ctx, 'submit_assignment', assignment.id, objectType, function(err, activities) {
    if (err) {
      return callback(err);
    }

    // Get all the submissions for the assignment
    CanvasAPI.getSubmissions(ctx.course, assignment, function(err, submissions) {
      if (err) {
        return callback(err);
      }

      // Handle each submission
      var submissionIterator = handleSubmission.bind(null, ctx, users, assignment, activities);
      async.eachSeries(submissions, submissionIterator, callback);
    });
  });
};

/**
 * Handle an assignment submission
 *
 * If we haven't seen this submission yet, we will:
 *  - Create an asset for each file/link in the submission
 *  - Create a `submit_assignment` activity for the user who made the submission
 *
 * If this is a re-submission which we haven't seen, we will:
 *  - Update the activity with the latest submission id, attempt number and the ids of the attachments
 *  - Remove assets we created in the previous submission
 *  - Create assets for the new submission
 *
 * @param  {Context}    ctx                   Standard context containing the current user and the current course
 * @param  {Object}     users                 All the users in the course, indexed by their canvas user id
 * @param  {Object}     assignment            The assignment that the submission is for
 * @param  {Object}     activities            All the activities for the assignment
 * @param  {Object}     submission            The submission to handle
 * @param  {Function}   callback              Standard callback function
 * @param  {Object}     callback.err          An error that occurred, if any
 * @api private
 */
var handleSubmission = function(ctx, users, assignment, activities, submission, callback) {
  var activity = {
    'type': 'submit_assignment',
    'objectId': assignment.id,
    'objectType': CollabosphereConstants.ACTIVITY.OBJECT_TYPES.CANVAS_SUBMISSION,
    'metadata': {
      'submission_id': submission.id,
      'attempt': submission.attempt,
      'attachment_ids': _.pluck(submission.attachments, 'id')
    },
    'user': submission.user_id
  };
  getOrCreateActivity(ctx, activities, users, activity, function(err, activity, created) {
    if (err) {
      return callback(err);

    // We've already seen this submission attempt, we can skip processing the attachments
    } else if (!created && (activity.metadata && activity.metadata.attempt === submission.attempt)) {
      return callback();
    }

    // Create a context for the user who created the submission. This will ensure that
    // any activities are created in their name
    ctx = {
      'course': ctx.course,
      'user': users[submission.user_id]
    };

    // Get the attachments the user previously submitted, if any
    var filters = {
      'user': ctx.user.id,
      'assignment': assignment.id
    };
    AssetsAPI.getAssets(ctx, filters, null, null, function(err, assets) {
      if (err) {
        return callback(err);
      }

      // Delete any assets the user previously submitted for this assignment from the asset library.
      // Note that this won't actually delete the records from the database as we still need
      // activities such as liking, adding comments, etc.. to be retained
      var assetIds = _.pluck(assets.results, 'id');
      AssetsAPI.deleteAssets(ctx, assetIds, function(err) {
        if (err) {
          log.error({
            'assets': assetIds,
            'err': err
          }, 'Failed to delete a set of assets');
          return callback(err);
        }

        // Create a link asset for url submissions
        if (submission.submission_type === 'online_url') {
          var opts = {
            'assignment': assignment.id,
            'categories': [assignment.category.id],
            'skipCreateActivity': true
          };
          return AssetsAPI.createLink(ctx, null, submission.url, opts, callback);

        // Create a file asset for each attachment on an "upload" submission
        } else if (submission.submission_type === 'online_upload') {
          var handleFilesSubmissionAttachmentIterator = handleFilesSubmissionAttachment.bind(null, ctx, assignment);
          async.eachSeries(submission.attachments, handleFilesSubmissionAttachmentIterator, function(err) {
            if (err) {
              return callback(err);
            }

            // Update the activity to indicate this attempt has been seen
            if (activity.metadata.attempt !== submission.attempt) {
              var metadata = {
                'submission_id': submission.id,
                'attempt': submission.attempt,
                'attachment_ids': _.pluck(submission.attachments, 'id')
              };
              return ActivitiesAPI.updateActivity(activity, {'metadata': metadata}, callback);
            } else {
              return callback();
            }
          });

        // Ignore all other types of submissions
        } else {
          return callback();
        }
      });
    });
  });
};

/**
 * Download a submission's file attachment and create a file asset for it in the asset library
 *
 * @param  {Context}    ctx                   Standard context containing the current user and the current course
 * @param  {Object}     assignment            The assignment the submission belongs to
 * @param  {Object}     attachment            The attachment to create a file asset for
 * @param  {Function}   callback              Standard callback function
 * @param  {Object}     callback.err          An error that occurred, if any
 */
var handleFilesSubmissionAttachment = function(ctx, assignment, attachment, callback) {
  // Download the attachment
  var filePath = path.join(os.tmpdir(), util.format('collabosphere_' + attachment.id + '_' + attachment.filename));
  var fileStream = fs.createWriteStream(filePath);
  request(attachment.url).pipe(fileStream);

  fileStream.on('error', function(err) {
    log().error({'attachment': attachment}, 'Failed to download a file');
    return callback(err);
  });

  fileStream.on('finish', function() {
    var file = {
      'file': filePath,
      'filename': path.basename(filePath),
      'mimetype': attachment['content-type']
    };
    var opts = {
      'assignment': assignment.id,
      'categories': [assignment.category.id],
      'skipCreateActivity': true
    };
    AssetsAPI.createFile(ctx, attachment.display_name, file, opts, function(err, asset) {
      if (err) {
        log.error({
          'assignment': assignment.id,
          'attachment': attachment.id,
          'err': err
        }, 'Unable to create a file asset');
      }

      // Regardless of whether the asset was created, we need to remove the downloaded file
      fs.unlink(filePath, function(unlinkErr) {
        if (unlinkErr) {
          log.error({
            'assignment': assignment.id,
            'attachment': attachment.id,
            'err': err
          }, 'Unable to remove the downloaded file attachment');
        }

        // Pass control back up, including the error (if any)
        return callback(err);
      });
    });
  });
};

/* Discussions */

/**
 * Create activities for any discussion activities in the Canvas course
 *
 * @param  {Context}    ctx                     Standard context containing the current user and the current course
 * @param  {Object}     users                   The users in the course indexed by their `canvas_user_id` attribute
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @api private
 */
var pollDiscussions = function(ctx, users, callback) {
  CanvasAPI.getDiscussions(ctx.course, function(err, discussions) {
    if (err) {
      return callback(err);
    } else if (_.isEmpty(discussions)) {
      return callback();
    }

    // Get all the discussion activities in this course
    var types = ['discussion_topic', 'discussion_entry', 'get_discussion_entry_reply'];
    getActivities(ctx, types, null, null, function(err, activities) {
      if (err) {
        return callback(err);
      }

      // Get the comments for each discussion
      var discussionIterator = handleDiscussion.bind(null, ctx, activities, users);
      async.eachSeries(discussions, discussionIterator, callback);
    });
  });
};

/**
 * Create an activity for a discussion topic
 *
 * @param  {Context}    ctx                     Standard context containing the current user and the current course
 * @param  {Object}     activities              All the discussion related activities in the course
 * @param  {Object}     users                   All the users in the course indexed by their canvas user id
 * @param  {Object}     discussion              The discussion to handle
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @api private
 */
var handleDiscussion = function(ctx, activities, users, discussion, callback) {
  var activity = {
    'type': 'discussion_topic',
    'objectId': discussion.id,
    'objectType': CollabosphereConstants.ACTIVITY.OBJECT_TYPES.CANVAS_DISCUSSION,
    'user': discussion.author.id
  };
  getOrCreateActivity(ctx, activities, users, activity, function(err) {
    if (err) {
      return callback(err);

    // If there are no replies, we can return early
    } else if (discussion.discussion_subentry_count === 0) {
      return callback();
    }

    // Get the entries on each discussion
    CanvasAPI.getDiscussionEntries(ctx.course, discussion, function(err, entries) {
      if (err) {
        return callback(err);
      }

      var discussionEntryIterator = handleDiscussionEntry.bind(null, ctx, activities, users, discussion);
      async.eachSeries(entries, discussionEntryIterator, callback);
    });
  });
};

/**
 * Create an activity for a discussion entry
 *
 * @param  {Context}    ctx                     Standard context containing the current user and the current course
 * @param  {Object}     activities              All the discussion related activities in the course
 * @param  {Object}     users                   All the users in the course indexed by their canvas user id
 * @param  {Object}     discussion              The discussion to which the entry belongs
 * @param  {Object}     entry                   The discussion entry to handle
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @api private
 */
var handleDiscussionEntry = function(ctx, activities, users, discussion, entry, callback) {
  var activity = {
    'type': 'discussion_entry',
    'objectId': discussion.id,
    'objectType': CollabosphereConstants.ACTIVITY.OBJECT_TYPES.CANVAS_DISCUSSION,
    'user': entry.user_id
  };
  getOrCreateActivity(ctx, activities, users, activity, function(err) {
    if (err) {
      return callback(err);
    }

    // Handle the replies, if any
    entry.recent_replies = entry.recent_replies || [];
    var discussionEntryReplyIterator = handleDiscussionEntryReply.bind(null, ctx, activities, users, discussion, entry);
    async.eachSeries(entry.recent_replies, discussionEntryReplyIterator, callback);
  });
};

/**
 * Create an activity for a reply on a discussion entry
 *
 * @param  {Context}    ctx                     Standard context containing the current user and the current course
 * @param  {Object}     activities              All the discussion related activities in the course
 * @param  {Object}     users                   All the users in the course indexed by their canvas user id
 * @param  {Object}     discussion              The discussion to which the entry belongs
 * @param  {Object}     entry                   The discussion entry to which the reply was made
 * @param  {Object}     reply                   The discussion reply to handle
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @api private
 */
var handleDiscussionEntryReply = function(ctx, activities, users, discussion, entry, reply, callback) {
  // Create an activity for replying on a discussion
  var activity = {
    'type': 'discussion_entry',
    'objectId': discussion.id,
    'objectType': CollabosphereConstants.ACTIVITY.OBJECT_TYPES.CANVAS_DISCUSSION,
    'user': entry.user_id
  };
  getOrCreateActivity(ctx, activities, users, activity, function(err) {
    if (err) {
      return callback(err);
    }

    // Create an activity for getting a reply
    activity = {
      'type': 'get_discussion_entry_reply',
      'objectId': discussion.id,
      'objectType': CollabosphereConstants.ACTIVITY.OBJECT_TYPES.CANVAS_DISCUSSION,
      'user': entry.user_id,
      'actor': reply.user_id
    };
    return getOrCreateActivity(ctx, activities, users, activity, callback);
  });
};

/* Utilities */

/**
 * Get the activities matching a set of criteria
 *
 * @param  {Context}            ctx                         Standard context containing the current user and the current course
 * @param  {String|String[]}    type                        The activity type(s) to retrieve. One of `ActivitiesDefault`
 * @param  {Number}             [objectId]                  The id of the object on which the activity is taking place (e.g., the asset id, the comment id, etc.)
 * @param  {String}             [objectType]                The type of the object on which the activity is taking place. One of `CollabosphereConstants.ACTIVITY.OBJECT_TYPES`
 * @param  {Function}           callback                    Standard callback function
 * @param  {Object}             callback.err                An error that occurred, if any
 * @param  {Object}             callback.activities         The activities matching the criteria indexed by the Canvas user id, activity type and object id
 * @api private
 */
var getActivities = function(ctx, type, objectId, objectType, callback) {
  ActivitiesAPI.getActivities(ctx, type, objectId, objectType, function(err, activities) {
    if (err) {
      return callback(err);
    }

    // Index the activities on their Canvas user id, activity type and object id. This allows
    // for quickly checking whether an activity has already been tracked
    var indexedActivities = {};
    _.each(activities, function(activity) {
      var canvasUserId = activity.user.canvas_user_id;
      indexedActivities[canvasUserId] = indexedActivities[canvasUserId] || {};
      indexedActivities[canvasUserId][activity.type] = indexedActivities[canvasUserId][activity.type] || {};
      indexedActivities[canvasUserId][activity.type][activity.object_id] = activity;
    });

    return callback(null, indexedActivities);
  });
};

/**
 * Create an activity when it hasn't been tracked yet
 *
 * @param  {Context}      ctx                     Standard context containing the current user and the current course
 * @param  {Object}       activities              A set of similar activities in which a lookup can be done to determine whether this activity should be created
 * @param  {Object}       users                   A mapping of canvas user ids to Collabosphere users for all the users in the course
 * @param  {Object}       activity                The activity to create
 * @param  {String}       activity.type           The type of the activity
 * @param  {Number}       activity.objectId       The id of the object on which the activity is taking place (e.g., the asset id, the comment id, etc.)
 * @param  {String}       activity.objectType     The type of the object on which the activity is taking place. One of `CollabosphereConstants.ACTIVITY.OBJECT_TYPES`
 * @param  {Object}       activity.metadata       Additional metadata that is associated with the activity
 * @param  {Number}       activity.user           The Canvas id of the user earning activity points for the activity
 * @param  {Number}       [activity.actor]        The Canvas id of the user performing the activity when different than the user earning activity points
 * @param  {Function}     callback                Standard callback function
 * @param  {Object}       callback.err            An error that occurred, if any
 * @param  {Activity}     callback.activity       The created or retrieved activity
 * @param  {Boolean}      callback.created        Whether the activity was created
 * @api private
 */
var getOrCreateActivity = function(ctx, activities, users, activity, callback) {
  // Don't create an activity if we've already done so
  var existingActivity = getActivity(activities, activity.user, activity.type, activity.objectId);
  if (existingActivity) {
    return callback(null, existingActivity, false);
  }

  // Get the Collabosphere user objects. As we poll the list of users before checking any
  // activities, all users should be mappable from a canvas user id to a Collabosphere user object
  var user = users[activity.user];
  var actor = null;
  if (activity.actor) {
    actor = users[activity.actor];
  }

  // Create the activity
  log.info({'activity': activity}, 'Creating activity');
  ActivitiesAPI.createActivity(ctx.course, user, activity.type, activity.objectId, activity.objectType, activity.metadata, actor, function(err, activity) {
    if (err) {
      return callback(err);
    }

    return callback(null, activity, true);
  });
};

/**
 * Check whether an activity can be found in a set of indexed activities
 *
 * @param  {Object}       indexedActivities       A set of activities as returned by `getActivities`
 * @param  {Number}       canvasUserId            The Canvas id of the user who triggered the activity
 * @param  {String}       type                    The activity type
 * @param  {String}       objectId                The id of the object on which the activity is taking place (e.g., the asset id, the comment id, etc.)
 * @return {Activity}                             The activity if it could be found in the set of indexed activities, `null` otherwise
 * @api private
 */
var getActivity = function(indexedActivities, canvasUserId, type, objectId) {
  if (indexedActivities[canvasUserId] && indexedActivities[canvasUserId][type] && indexedActivities[canvasUserId][type][objectId]) {
    return indexedActivities[canvasUserId][type][objectId];
  } else {
    return null;
  }
};
