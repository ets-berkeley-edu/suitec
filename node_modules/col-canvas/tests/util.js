/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');
var url = require('url');
var util = require('util');

var MockedRequest = require('col-tests/lib/model').MockedRequest;
var TestsUtil = require('col-tests/lib/util');

/**
 * Mock all the requests that are involved in uploading a file to Canvas
 *
 * @param  {Course}   course    The course to which the file will be uploaded
 */
var mockFileUpload = module.exports.mockFileUpload = function(course) {
  var appServer = TestsUtil.getMockedCanvasAppServer(course.canvas);
  var apiDomain = course.canvas.canvas_api_domain;

  var id = _.random(100000);
  var fileInfo = {
    'id': id,
    'url': util.format('http://%s/files/%d/download', apiDomain, id),
    'content-type': 'text/plain'
  };

  // 1. Asking Canvas to upload a file
  var askUrl = util.format('/api/v1/courses/%d/files', course.canvas_course_id || course.id);
  var askHandler = function(req, res) {
    fileInfo['content-type'] = req.body.content_type;
    return res.status(200).send({
      'upload_url': util.format('http://%s/upload', apiDomain)
    });
  };
  var askValidator = function(req) {
    // Assert all required parameters are present
    assert.ok(req.body.name);
    assert.ok(req.body.filesize);
    assert.ok(req.body.content_type);
    assert.ok(req.body.parent_folder_path);
    assert.ok(req.body.on_duplicate);
  };
  var askRequest = new MockedRequest('POST', askUrl, null, null, null, askHandler, askValidator);
  appServer.expect(askRequest);

  // 2. The actual file upload
  var redirectHandler = function(req, res) {
    return res.redirect(util.format('http://%s/confirm', apiDomain));
  };
  var uploadRequest = new MockedRequest('POST', '/upload', null, null, null, redirectHandler);
  appServer.expect(uploadRequest);

  // 3. Confirming to Canvas the file was uploaded
  var confirmRequest = new MockedRequest('POST', '/confirm', 200, fileInfo);
  appServer.expect(confirmRequest);

  // 4. Hiding the file
  var hideUrl = util.format('/api/v1/files/%d', id);
  var hideRequest = new MockedRequest('PUT', hideUrl, 200, fileInfo);
  appServer.expect(hideRequest);
};

/**
 * As it is unfeasable to bootstrap an actual Canvas instance during the tests, the Canvas REST API
 * will be mocked. This method allows you to declare the data that should be returned during 1 polling
 * run.
 *
 * @param  {Course}                 course          The course that we'll be mocking requests for
 * @param  {CanvasUser[]}           users           The users that are registered in the course
 * @param  {CanvasAssignment[]}     assignments     The assignments that are available in the course
 * @param  {CanvasDiscussion[]}     discussions     The discussion topics that are available in the course
 */
var mockPollingRequests = module.exports.mockPollingRequests = function(course, users, assignments, discussions) {
  // Default some parameters
  users = users || [];
  assignments = assignments || [];
  discussions = discussions || [];

  mockGetCourseUsers(course, users);

  mockGetAssignments(course, assignments);
  _.each(assignments, function(assignment) {
    if (!_.isEmpty(assignment.submissions)) {
      mockGetSubmissions(course, assignment, assignment.submissions);
    }
  });

  mockGetDiscussions(course, discussions);
  _.each(discussions, function(discussion) {
    if (!_.isEmpty(discussion.getEntries())) {
      mockGetDiscussionEntries(course, discussion);
    }
  });
};

/**
 * Mock the REST API call for getting all the users of a course
 *
 * @param  {Course}         course    The course that we'll be mocking requests for
 * @param  {CanvasUser[]}   users     The users that are registered in the course
 */
var mockGetCourseUsers = module.exports.mockGetCourseUsers = function(course, users) {
  var url = util.format('/api/v1/courses/%d/users', course.canvas_course_id);
  mockPagedData(course, url, users);
};

/**
 * Mock the REST API call for getting all the assignments of a course
 *
 * @param  {Course}                 course          The course that we'll be mocking requests for
 * @param  {CanvasAssignment[]}     assignments     The assignments that are available in the course
 */
var mockGetAssignments = module.exports.mockGetAssignments = function(course, assignments) {
  var url = util.format('/api/v1/courses/%d/assignments', course.canvas_course_id);
  mockPagedData(course, url, assignments);
};

/**
 * Mock the REST API call for getting all the submissions of an assignment in a course
 *
 * @param  {Course}                 course          The course that we'll be mocking requests for
 * @param  {CanvasAssignment}       assignment      The assignment for which the submissions will be retrieved
 * @param  {CanvasSubmission[]}     submissions     The assignment submissions
 */
var mockGetSubmissions = module.exports.mockGetAssignments = function(course, assignment, submissions) {
  var apiUrl = util.format('/api/v1/courses/%d/assignments/%d/submissions', course.canvas_course_id, assignment.id);
  mockPagedData(course, apiUrl, submissions);

  // Some submissions might hold file attachments which will be pulled down and uploaded again.
  // These need to be mocked as well
  _.chain(submissions)
    .filter(function(submission) {
      return (submission.submission_type === 'online_upload');
    })
    .map(function(submission) {
      return submission.attachments;
    })
    .flatten()
    .each(function(attachment) {
      if (attachment.expectProcessing) {
        // The download request
        var expectedPath = url.parse(attachment.url).pathname;
        var mockedRequest = new MockedRequest('GET', expectedPath, 200, 'The file body');
        TestsUtil.getMockedCanvasAppServer(course.canvas).expect(mockedRequest);

        // The upload request
        mockFileUpload(course);
      }
    })
    .value();
};

/**
 * Mock the REST API call for getting all the discussion topics in a course
 *
 * @param  {Course}                   course          The course that we'll be mocking requests for
 * @param  {CanvasDiscussion[]}       discussions     The discussion topics that are available in the course
 */
var mockGetDiscussions = module.exports.mockGetDiscussions = function(course, discussions) {
  var url = util.format('/api/v1/courses/%d/discussion_topics', course.canvas_course_id);
  var discussionsData = _.map(discussions, function(discussion) {
    return discussion.json();
  });
  mockPagedData(course, url, discussionsData);
};

/**
 * Mock the REST API call for getting all the discussion entries on a dicussion topic in a course
 *
 * @param  {Course}                   course          The course that we'll be mocking requests for
 * @param  {CanvasDiscussion}         discussion      The discussion for which the entries will be retrieved
 */
var mockGetDiscussionEntries = module.exports.mockGetDiscussionEntries = function(course, discussion) {
  var id = discussion.json().id;
  var url = util.format('/api/v1/courses/%d/discussion_topics/%d/entries', course.canvas_course_id, id);
  mockPagedData(course, url, discussion.getEntries());
};

/**
 * Mock one or more Canvas API requests depending on the size of the dataset that is being requested.
 * This function assumes that at most 50 items at a time will be retrieved
 *
 * @param  {Course}     course          The course that we'll be mocking requests for
 * @param  {String}     url             The url of the request
 * @param  {Object[]}   pagedData       The full set of data that is being paged
 */
var mockPagedData = function(course, url, pagedData, currentPage) {
  currentPage = currentPage || 1;

  // Canvas returns the paging data in the `link` header
  var linkHeader = getLinkHeader(url, currentPage, pagedData);

  // Get the slice of data we should return
  var prevPage = currentPage - 1;
  var responseData = pagedData.slice(prevPage * 50, currentPage * 50);

  // Mock the request for the current slice of data
  TestsUtil.getMockedCanvasAppServer(course.canvas)
    .expect(new MockedRequest('GET', url, 200, responseData, {'link': linkHeader}));

  // Mock further pages of data, if any
  if (currentPage * 50 < pagedData.length) {
    mockPagedData(course, url, pagedData, currentPage + 1);
  }
};

/**
 * Construct a `link` header given a set of data, a URL and the current page that is being retrieved
 *
 * @param  {String}     url             The API url that is being requested
 * @param  {Number}     currentPage     The page that is being retrieved
 * @param  {Object[]}   pagedData       The full set of data that is being paged
 * @return {String}                     The full link header
 * @api private
 * @see https://canvas.instructure.com/doc/api/file.pagination.html
 */
var getLinkHeader = function(url, currentPage, pagedData) {
  var lastPage = Math.ceil(pagedData.length / 50);

  // A link to the current page is always present
  var links = [getLinkHeaderPart(url, currentPage, 'current')];

  // The previous and next page links are only shown when they exist
  if (currentPage !== 1) {
    links.push(getLinkHeaderPart(url, currentPage - 1, 'prev'));
  }
  if (currentPage < lastPage) {
    links.push(getLinkHeaderPart(url, currentPage + 1, 'next'));
  }

  // The first and last links are also always included
  links.push(getLinkHeaderPart(url, 1, 'first'));
  links.push(getLinkHeaderPart(url, lastPage, 'last'));
  return links.join(',');
};

/**
 * Construct part of a `link` header
 *
 * @param  {String}     url       The API url that is being requested
 * @param  {Number}     page      The page for the link part
 * @param  {String}     name      The name of the link. One of `current`, `prev`, `next`, `first` or `last`
 * @return {String}               A link part
 * @api private
 */
var getLinkHeaderPart = function(url, page, name) {
  return '<http://localhost:3001' + url + '%3Fpage= ' + page + '&per_page=50; rel="' + name + '"';
};
